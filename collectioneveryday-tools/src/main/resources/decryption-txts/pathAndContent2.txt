[{"content":"package com.lsc.freemarker.base;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: com.lsc.freemarker\r\n * @date 2022/11/11 17:48\r\n */\r\npublic  interface  FreeMarkerDataModel<T> {\r\n\r\n    /**\r\n     * 构建数据模型的数据\r\n     */\r\n    T buildModelData() throws Exception;\r\n}\r\n","fileName":"FreeMarkerDataModel.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\java\\com\\lsc\\freemarker\\base\\FreeMarkerDataModel.java"},{"content":"package com.lsc.freemarker.base;\r\n\r\nimport com.lsc.freemarker.core.FreeMarkerGenerator;\r\nimport com.lsc.freemarker.entity.MockResult;\r\nimport com.lsc.freemarker.enums.ResultOutPathEnum;\r\nimport com.lsc.freemarker.enums.TemplatePathEnum;\r\nimport freemarker.template.Configuration;\r\nimport lombok.extern.slf4j.Slf4j;\r\n\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: com.lsc.freemarker.base\r\n * @date 2022/11/11 18:16\r\n */\r\n@Slf4j\r\npublic class FreeMarkerServiceTemplate {\r\n\r\n    private FreeMarkerGenerator freeMarkerGenerator;\r\n\r\n    /**\r\n     * 生成代码的模板\r\n     *\r\n     * @param mockResult          结果\r\n     * @param templatePath        模板路径\r\n     * @param resultOutPath       文件生成路径\r\n     * @param freeMarkerDataModel 构建模型对象\r\n     */\r\n    public static void execute(MockResult mockResult, TemplatePathEnum templatePath, ResultOutPathEnum resultOutPath, FreeMarkerDataModel freeMarkerDataModel) {\r\n        try {\r\n            // 1 创建FreeMarker的配置类\r\n            Configuration instance = FreeMarkerGenerator.getInstance();\r\n\r\n            // 2 指定模版加载器 + 3 获取模版\r\n            FreeMarkerGenerator.generator(instance, templatePath.getPath());\r\n\r\n            // 把构建的数据传递到模板内\r\n            Map<String, Object> dataModel = new HashMap<>();\r\n            dataModel.put(\"date\", new Date());\r\n            // 4 构造数据模型  map的key就是模版内占位符的key\r\n            dataModel.put(\"mock\", freeMarkerDataModel.buildModelData());\r\n\r\n            // 5 代码生成  + 文件输出\r\n            FreeMarkerGenerator.scanAndGenerator(dataModel, templatePath.getPath(), resultOutPath.getPath());\r\n\r\n        } catch (Exception e) {\r\n            mockResult.setSuccess(false);\r\n            mockResult.setErrorMessage(e.getMessage());\r\n            log.info(\"发生异常\", e);\r\n        }\r\n        mockResult.setSuccess(true);\r\n        log.info(\"FreeMarkerServiceTemplate:execute 执行完毕\");\r\n    }\r\n}\r\n","fileName":"FreeMarkerServiceTemplate.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\java\\com\\lsc\\freemarker\\base\\FreeMarkerServiceTemplate.java"},{"content":"package com.lsc.freemarker.core;\r\n\r\nimport com.alibaba.fastjson.JSONObject;\r\nimport com.lsc.freemarker.utils.JarLoaderUtils;\r\nimport lombok.SneakyThrows;\r\nimport lombok.extern.log4j.Log4j;\r\nimport org.apache.commons.collections.CollectionUtils;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.io.File;\r\nimport java.io.FileFilter;\r\nimport java.io.FileInputStream;\r\nimport java.util.*;\r\nimport java.util.regex.Matcher;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: 自定义类加载器\r\n * 主要用于加载当前项目下不存在的jar包\r\n * @date 2022/9/30 14:34\r\n */\r\n\r\n\r\npublic class CustomClassLoader extends ClassLoader {\r\n\r\n    public Logger log = LoggerFactory.getLogger(this.getClass());\r\n\r\n    // maven仓库根路径\r\n    public static final String ROOT_PATH = \"D:\\\\maven\\\\Repoistory\\\\\";\r\n\r\n    private static final String SUFFIX = \".class\";\r\n\r\n    // 缓存查到找的class文件位置\r\n    private static Map<String, List<String>> classFilePathMap = new HashMap<>();\r\n\r\n    @Override\r\n    public Class<?> findClass(String name) {\r\n        log.info(\"findclass方法开始执行\");\r\n\r\n        // 检查该类的class文件是否已被加载，如果已加载则返回class文件(字节码文件)对象，如果没有加载返回null\r\n        Class<?> loadedClass = findLoadedClass(name);\r\n        // 如果已加载直接返回该类的class文件(字节码文件)对象\r\n        if (loadedClass != null) {\r\n            log.info(\"findLoadedClass : 找到class\");\r\n            return loadedClass;\r\n        }\r\n        String rootPath = \"D:\\\\Code\\\\javaCore\\\\ibizecoprod\\\\app\";\r\n        if (name.contains(\"iexpbizprod\")) {\r\n            rootPath = \"D:\\\\Code\\\\javaCore\\\\iexpbizprod\\\\app\";\r\n        }\r\n        // 如果没查到的话 加载项目下class文件\r\n        List<String> classFilePath = classFilePathMap.get(rootPath);\r\n\r\n        // 如果map中没有的话,证明是第一次加载项目,直接取扫指定目录下的文件\r\n        if (CollectionUtils.isEmpty(classFilePath)) {\r\n            log.info(\"执行查找本地class文件方法\");\r\n            classFilePath = getClassFilePath(rootPath);\r\n            classFilePathMap.put(rootPath,classFilePath);\r\n        }\r\n        loadedClass = loadedPathClassFile(name, classFilePath);\r\n        if (loadedClass != null) {\r\n            log.info(\"loadedPathClassFile : 找到class\");\r\n            return loadedClass;\r\n        }\r\n        // 如果没查到的话,就调用自定义的方法查找jar包\r\n        loadedClass = JarLoaderUtils.getClassObject(ROOT_PATH, name);\r\n\r\n        log.info(\"findclass方法结束执行\");\r\n        return loadedClass;\r\n    }\r\n\r\n\r\n    /**\r\n     * 获取class文件的本地文件路径\r\n     *\r\n     * @param classPath 例如/usr/java/classes下有一个test.App类，则/usr/java/classes即这个类的根路径，而.class文件的实际位置是/usr/java/classes/test/App.class\r\n     */\r\n    public List<String> getClassFilePath(String classPath) {\r\n        log.info(\"获取本地class文件: {}\", classPath);\r\n        // 设置class文件所在根路径\r\n        File clazzPath = new File(classPath);\r\n\r\n        ArrayList<String> pathList = new ArrayList<>();\r\n        try {\r\n            // 是否存在, 是否是目录\r\n            if (clazzPath.exists() && clazzPath.isDirectory()) {\r\n                // 获取路径长度\r\n                int clazzPathLen = clazzPath.getAbsolutePath().length() + 1;\r\n\r\n                Stack<File> stack = new Stack<>();\r\n                stack.push(clazzPath);\r\n\r\n                // 遍历类路径\r\n                while (stack.isEmpty() == false) {\r\n                    // 移除堆栈顶部的对象，并作为此函数的值返回该对象。\r\n                    File path = stack.pop();\r\n\r\n                    File[] classFiles = path.listFiles(new FileFilter() {\r\n                        public boolean accept(File pathname) {\r\n                            // 留下 是文件夹 并且文件夹名不包含test 或者 是.class文件且不包含$\r\n                            return (pathname.isDirectory() && !pathname.getName().contains(\"test\")) || (pathname.getName().endsWith(\".class\")); // && !pathname.getName().contains(\"$\")\r\n                        }\r\n                    });\r\n\r\n                    for (File subFile : classFiles) {\r\n                        if (subFile.isDirectory()) {\r\n                            stack.push(subFile);\r\n                        } else {\r\n                            pathList.add(subFile.getPath());\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            log.info(\"获取class文件本地地址异常\", e);\r\n        }\r\n        return pathList;\r\n    }\r\n\r\n    /**\r\n     * 加载本地编译后的class文件\r\n     *\r\n     * @param name\r\n     * @return\r\n     */\r\n    private Class<?> loadedPathClassFile(String name, List<String> classFiles) {\r\n        if (classFiles.isEmpty()) {\r\n            log.info(\"classFile is null\");\r\n            return null;\r\n        }\r\n\r\n        for (String classFile : classFiles) {\r\n/*\r\n            int lastIndexOf = classFile.lastIndexOf('\\\\');\r\n            int indexOf = classFile.lastIndexOf('.');\r\n            String listClassFile = classFile.substring(lastIndexOf + 1, indexOf);\r\n\r\n            int index = name.lastIndexOf('.');\r\n            String findClassPath = name.substring(index + 1);\r\n\r\n            if (!listClassFile.equals(findClassPath)) {\r\n                continue;\r\n            }\r\n          //  log.info(\"listName: {}, findClassPath: {}\", listClassFile, findClassPath);\r\n          */\r\n\r\n\r\n            // 把// 替换成 .\r\n            String replaceAll = classFile.replaceAll(\"\\\\\\\\\", \".\");\r\n            int com = replaceAll.indexOf(\"com.\");\r\n            int lastIndexOf = replaceAll.lastIndexOf(\".\");\r\n            String substring = replaceAll.substring(com, lastIndexOf);\r\n            if (!substring.equals(name)) {\r\n                continue;\r\n            }\r\n            //   log.info(\"replaceAll: {}, findName: {}\", replaceAll, name);\r\n\r\n            byte[] loadClazz = loadClazz(classFile);\r\n            return defineClass(name, loadClazz, 0, loadClazz.length);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public byte[] loadClazz(String classPath) {\r\n        try {\r\n            log.info(\"loadClazz方法执行: classPath: {}\", classPath);\r\n            FileInputStream in = new FileInputStream(new File(classPath));\r\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n            int b;\r\n            while ((b = in.read()) != -1) {\r\n                baos.write(b);\r\n            }\r\n            in.close();\r\n            return baos.toByteArray();\r\n        } catch (Exception e) {\r\n            System.out.println(e);\r\n        } finally {\r\n            log.info(\"loadClazz方法执行结束\");\r\n        }\r\n        return null;\r\n    }\r\n\r\n}","fileName":"CustomClassLoader.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\java\\com\\lsc\\freemarker\\core\\CustomClassLoader.java"},{"content":"package com.lsc.freemarker.core;\r\n\r\nimport com.alibaba.fastjson.JSONObject;\r\nimport com.lsc.freemarker.db.DataBaseConnection;\r\nimport com.lsc.freemarker.entity.Table;\r\nimport com.lsc.freemarker.enums.ResultOutPathEnum;\r\nimport com.lsc.freemarker.enums.TemplatePathEnum;\r\nimport freemarker.template.Configuration;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.junit.Test;\r\n\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\n/**\r\n * @author lisc\r\n * @Description:\r\n *  输入表名,获取数据库表数据结构 生成sql文件\r\n * @date 2022/11/11 11:01\r\n */\r\n@Slf4j\r\npublic class DataBaseTableToJava {\r\n\r\n    @Test\r\n    public void test() {\r\n\r\n        tableSqlCodeGeneration(\"ibep_mp_company_information\");\r\n    }\r\n\r\n    /**\r\n     * 根据表名获取数据库内表内的列\r\n     * @param tableName\r\n     * @return\r\n     */\r\n    public boolean tableSqlCodeGeneration(String tableName) {\r\n        boolean result = true;\r\n        try {\r\n            // 1 创建FreeMarker的配置类\r\n            Configuration instance = FreeMarkerGenerator.getInstance();\r\n\r\n            // 2 指定模版加载器 + 3 获取模版\r\n            FreeMarkerGenerator.generator(instance, TemplatePathEnum.TABLE_SQL_XML.getPath());\r\n\r\n            // 4 构造数据模型  map的key就是模版内占位符的key\r\n            Table tableData = DataBaseConnection.getDataBaseTableData(tableName);\r\n\r\n            System.out.println(JSONObject.toJSONString(tableData));\r\n\r\n            // 把构建的数据传递到模板内\r\n            Map<String, Object> dataModel = new HashMap<>();\r\n            dataModel.put(\"date\", new Date());\r\n            dataModel.put(\"table\", tableData);\r\n\r\n            // 5 代码生成  + 文件输出\r\n            FreeMarkerGenerator.scanAndGenerator(dataModel, TemplatePathEnum.TABLE_SQL_XML.getPath(), ResultOutPathEnum.TABLE_RESULT_PATH.getPath());\r\n        } catch (Exception e) {\r\n            log.info(\"生成sql语句文件发生异常\", e);\r\n            result = false;\r\n        }\r\n        return result;\r\n    }\r\n}\r\n","fileName":"DataBaseTableToJava.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\java\\com\\lsc\\freemarker\\core\\DataBaseTableToJava.java"},{"content":"package com.lsc.freemarker.core;\r\n\r\nimport com.alibaba.fastjson.JSONObject;\r\nimport com.alibaba.fastjson.serializer.SerializerFeature;\r\nimport com.lsc.freemarker.db.DataBaseConnection;\r\nimport com.lsc.freemarker.entity.FieldBean;\r\nimport com.lsc.freemarker.entity.FreeMarkerDataBean;\r\nimport com.lsc.freemarker.entity.MethodBean;\r\nimport com.lsc.freemarker.entity.Table;\r\nimport com.lsc.freemarker.enums.ResultOutPathEnum;\r\nimport com.lsc.freemarker.enums.TemplatePathEnum;\r\nimport com.lsc.freemarker.utils.FileUtils;\r\nimport com.lsc.freemarker.utils.ReflectionUtil;\r\nimport freemarker.cache.FileTemplateLoader;\r\nimport freemarker.template.Configuration;\r\nimport freemarker.template.Template;\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.junit.Test;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.util.Assert;\r\n\r\nimport java.io.*;\r\nimport java.text.DateFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.*;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: com.lsc.freemarker.core\r\n * @date 2022/10/9 14:22\r\n */\r\npublic class FreeMarkerGenerator {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(FreeMarkerGenerator.class);\r\n\r\n    // FreeMarker 连接对象\r\n    private static Configuration cfg = null;\r\n\r\n    // 模版路径\r\n    private static String TEMPLATE_PATH = \"D:\\\\Code\\\\TestCode\\\\newzhongchou\\\\Freemarker-utils\\\\src\\\\main\\\\resources\\\\FreeMarkerFile\\\\CodeTemplates\";\r\n\r\n\r\n    private static String MOCK_TEMPLATE_PATH = \"D:\\\\Code\\\\TestCode\\\\newzhongchou\\\\Freemarker-utils\\\\src\\\\main\\\\resources\\\\FreeMarkerFile\\\\mock-templates\";\r\n\r\n\r\n    private static String OUT_ROOT_PATH = \"D:\\\\Code\\\\TestCode\\\\newzhongchou\\\\Freemarker-utils\\\\src\\\\main\\\\resources\\\\FreeMarkerFile\\\\SpannedFile\\\\\";\r\n\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            FreeMarkerGenerator freeMarkerGenerator = new FreeMarkerGenerator();\r\n            freeMarkerGenerator.mockCodeGenerator(\"com.ipay.iexpbizprod.partner.imgs.impl.RevivalMerchantRpcFacadeImpl\");\r\n        } catch (Exception e) {\r\n            System.out.println(\"main方法catch\" + e);\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void test() throws ClassNotFoundException {\r\n        ClassLoader loader = this.getClass().getClassLoader();\r\n        Class<?> loadClass = loader.loadClass(\"com.ipay.ibizecoprod.dal.ibizecoprod.dataobject.IbepFormDataRecordDO\");\r\n        CreationJsonTxt(loadClass);\r\n    }\r\n\r\n    /**\r\n     * 生成mock代码\r\n     *\r\n     * @param classPath\r\n     */\r\n    public static String mockCodeGenerator(String classPath) {\r\n        String generatorPath = StringUtils.EMPTY;\r\n        try {\r\n            DateFormat df = new SimpleDateFormat(\"yyyyMMddHHmmss\");\r\n            String dateTime = df.format(new Date());\r\n\r\n            String outPath = OUT_ROOT_PATH + dateTime;\r\n\r\n            // 1 创建FreeMarker的配置类\r\n            Configuration instance = getInstance();\r\n\r\n            // 2 指定模版加载器 + 3 获取模版\r\n            generator(instance, MOCK_TEMPLATE_PATH);\r\n            // 构建参数\r\n            FreeMarkerDataBean freeMarkerDataBean = classPathCreateMock(classPath, outPath);\r\n\r\n            if (freeMarkerDataBean == null) {\r\n                return generatorPath = \"生成错误,请确认路径是否正确\";\r\n            }\r\n            // 4 构造数据模型  map的key就是模版内占位符的key\r\n            Map<String, Object> dataModel = new HashMap<>();\r\n            dataModel.put(\"date\", new Date());\r\n            dataModel.put(\"mock\", freeMarkerDataBean);\r\n\r\n            // 5 代码生成  + 文件输出\r\n            generatorPath = scanAndGenerator(dataModel, MOCK_TEMPLATE_PATH, outPath);\r\n\r\n        } catch (Throwable e) {\r\n            log.info(\"mockCodeGenerator方法异常 : {}\", JSONObject.toJSONString(e), e);\r\n        } finally {\r\n            log.info(\"代码生成完成!\");\r\n        }\r\n        return generatorPath;\r\n    }\r\n\r\n    /**\r\n     * 获取FreeMarker对象\r\n     * 1 创建FreeMarker的配置类\r\n     *\r\n     * @return Configuration\r\n     */\r\n    public static Configuration getInstance() {\r\n        if (cfg == null) {\r\n            synchronized (FreeMarkerGenerator.class) {\r\n                cfg = new Configuration(Configuration.DEFAULT_INCOMPATIBLE_IMPROVEMENTS);\r\n            }\r\n        }\r\n        return cfg;\r\n    }\r\n\r\n    /**\r\n     * 给FreeMarker 设置模版加载器, 指定模版路径\r\n     * 2 指定模版加载器\r\n     * ClassTemplateLoader() 类路径\r\n     * FileTemplateLoader() 文件路径加载器\r\n     * StringTemplateLoader() 文本\r\n     * URLTemplateLoader() url路径\r\n     * WebappTemplateLoader web应用程序下\r\n     *\r\n     * @param templatePath 模版路径\r\n     */\r\n    public static void generator(Configuration cfg, String templatePath) {\r\n        try {\r\n\r\n            //  指定模版加载器\r\n            FileTemplateLoader ftl = new FileTemplateLoader(new File(templatePath));\r\n            cfg.setTemplateLoader(ftl);\r\n        } catch (IOException e) {\r\n            System.out.println(\"获取模版路径出错\");\r\n            log.info(\"获取模版路径出错, templatePath:{}\", templatePath, e);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * 代码生成\r\n     * 1 扫描模版路径下所有模版\r\n     * 2 对每个模版进行文件生成\r\n     *\r\n     * @param dataModel    数据模型\r\n     * @param templatePath 模版路径\r\n     * @param outPath      输出代码路径\r\n     */\r\n    public static String scanAndGenerator(Map<String, Object> dataModel, String templatePath, String outPath) {\r\n        //1  根据模版路径找到此路径下所有模版文件\r\n        List<File> fileList = FileUtils.searchAllFile(new File(templatePath));\r\n        if (fileList.isEmpty()) {\r\n            log.info(\"模板路径下未找到模板文件\");\r\n            return outPath;\r\n        }\r\n        for (File file : fileList) {\r\n            try {\r\n                executeGenertor(dataModel, file, templatePath, outPath);\r\n            } catch (Exception e) {\r\n                log.error(\"对模版进行代码生成时报错! dataModel:{}\", dataModel, e);\r\n            }\r\n        }\r\n        return outPath;\r\n    }\r\n\r\n    /**\r\n     * 对模版进行代码生成\r\n     *\r\n     * @param dataModel    数据模型\r\n     * @param file         模版路径下单个模版文件\r\n     * @param templatePath\r\n     * @param outPath\r\n     * @throws Exception\r\n     */\r\n    public static void executeGenertor(Map<String, Object> dataModel, File file, String templatePath, String outPath) throws Exception {\r\n        log.info(\"executeGenertor:outPath: {} \",outPath);\r\n        // 把前面的路径替换成空,只处理后面的路径\r\n        String templateFileName = file.getAbsolutePath().replace(templatePath, \"\");\r\n        String stringTemplate = processStringTemplate(templateFileName, dataModel);\r\n        log.info(\"templateFileName: {}\", templateFileName);\r\n        // 2 读取文件模版\r\n        Template template = cfg.getTemplate(templateFileName);\r\n        // 指定生成文件的字符集编码\r\n        template.setOutputEncoding(\"utf-8\");\r\n\r\n        String dateTime = new SimpleDateFormat(\"yyyyMMddHHmmss\").format(new Date());\r\n        outPath = outPath + dateTime;\r\n\r\n        log.info(\"executeGenertor:outPath:处理后的 {} \",outPath);\r\n        // 3 创建文件\r\n        File file1 = FileUtils.mkdir(outPath, stringTemplate);\r\n\r\n        // 4 文件生成\r\n        FileWriter fw = new FileWriter(file1);\r\n        template.process(dataModel, fw);\r\n        fw.close();\r\n    }\r\n\r\n    public static String processStringTemplate(String templateString, Map<String, Object> dataModel) throws Exception {\r\n        StringWriter out = new StringWriter();\r\n        /**\r\n         *  创建字符串模版\r\n         */\r\n        Template template = new Template(\"StringTemplate\", new StringReader(templateString), cfg);\r\n        // 输出到out\r\n        template.process(dataModel, out);\r\n        return out.toString();\r\n    }\r\n\r\n    /**\r\n     * 根据给定的类,反射出他所有的方法\r\n     *\r\n     * @param classPath\r\n     * @return\r\n     */\r\n    public static FreeMarkerDataBean classPathCreateMock(String classPath, String outPathJson) {\r\n        // 返回结果bean\r\n        FreeMarkerDataBean classBean = new FreeMarkerDataBean();\r\n\r\n        // 创建自定义的类加载器\r\n        CustomClassLoader loader = new CustomClassLoader();\r\n        try {\r\n            // 使用自定义的类加载器加载TestHelloWorld类\r\n            Class classaa = loader.loadClass(classPath);\r\n            if (null == classaa) {\r\n                log.info(\"classPathCreateMock 未加载到相关class文件\");\r\n                return null;\r\n            }\r\n            // 获取全类名\r\n            String classPathName = classaa.getName();\r\n\r\n            int lastIndexOf = classPathName.lastIndexOf('.');\r\n            // 得到类名\r\n            classBean.setClassName(classPathName.substring(lastIndexOf + 1));\r\n            // 得到包名\r\n            classBean.setClassPath(classPathName.substring(0, lastIndexOf));\r\n\r\n            /**\r\n             * 获取类下所有自定义属性\r\n             */\r\n            List<FieldBean> fieldBeans = ReflectionUtil.getFieldBeans(classaa);\r\n            classBean.setFieldBeanList(fieldBeans);\r\n\r\n            // 得到类下所有的方法及方法出入参\r\n            ArrayList<MethodBean> methodList = ReflectionUtil.getMethodBeans(classaa, outPathJson);\r\n            classBean.setMethodBeanList(methodList);\r\n\r\n\r\n        } catch (IllegalArgumentException e) {\r\n            log.info(\"本地仓库此路径不存在,程序结束\", e);\r\n        } catch (NoClassDefFoundError error) {\r\n            log.info(\"NoClassDefFoundError \", error);\r\n            try {\r\n                // 把全类名多余的信息过滤掉\r\n                int indexOf = error.getMessage().indexOf(\"(\");\r\n                String errorClassName = error.getMessage().substring(0, indexOf).trim();\r\n                loader.loadClass(errorClassName);\r\n            } catch (ClassNotFoundException e) {\r\n                log.info(\"二次查询依然没有找到所需对象:{}\", e);\r\n            }\r\n        } catch (Throwable e) {\r\n            log.info(\"Throwable  执行 异常类型: {}\", e);\r\n        }\r\n        log.info(\"classPathCreateMock 执行结束, classBean:{}\", JSONObject.toJSONString(classBean));\r\n        return classBean;\r\n    }\r\n\r\n\r\n    private void CreationJsonTxt(Class<?> aclass) {\r\n        if (!aclass.isInterface()) {\r\n            Object instance = null;\r\n            try {\r\n                instance = aclass.newInstance();\r\n                String contex = JSONObject.toJSONString(instance, SerializerFeature.PrettyFormat, SerializerFeature.WriteMapNullValue);\r\n                FileUtils.fileWrite(\"D:\\\\Code\\\\TestCode\\\\newzhongchou\\\\Freemarker-utils\\\\FreeMarkerFile\\\\SpannedFile\\\\json\", aclass.getSimpleName() + \".json\", contex);\r\n            } catch (Exception e) {\r\n                log.error(\"CreationJsonTxt 创建json文本对象时出错!!!e:{}\", e);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public boolean tableSqlCodeGeneration(String tableName, TemplatePathEnum templatePathEnum) {\r\n        boolean result = true;\r\n        try {\r\n            // 1 创建FreeMarker的配置类\r\n            Configuration instance = getInstance();\r\n\r\n            // 2 指定模版加载器 + 3 获取模版\r\n            FreeMarkerGenerator.generator(instance, templatePathEnum.TABLE_SQL_XML.getPath());\r\n\r\n            // 4 构造数据模型  map的key就是模版内占位符的key\r\n            Table tableData = DataBaseConnection.getDataBaseTableData(tableName);\r\n\r\n            System.out.println(JSONObject.toJSONString(tableData));\r\n\r\n            // 把构建的数据传递到模板内\r\n            Map<String, Object> dataModel = new HashMap<>();\r\n            dataModel.put(\"date\", new Date());\r\n            dataModel.put(\"table\", tableData);\r\n\r\n            // 5 代码生成  + 文件输出\r\n            FreeMarkerGenerator.scanAndGenerator(dataModel, TemplatePathEnum.TABLE_SQL_XML.getPath(), ResultOutPathEnum.TABLE_RESULT_PATH.getPath());\r\n        } catch (Exception e) {\r\n            log.info(\"生成sql语句文件发生异常\", e);\r\n            result = false;\r\n        }\r\n        return result;\r\n    }\r\n}\r\n","fileName":"FreeMarkerGenerator.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\java\\com\\lsc\\freemarker\\core\\FreeMarkerGenerator.java"},{"content":"package com.lsc.freemarker.core;\r\n\r\nimport com.alibaba.fastjson.JSONObject;\r\nimport com.lsc.freemarker.base.FreeMarkerDataModel;\r\nimport com.lsc.freemarker.base.FreeMarkerServiceTemplate;\r\nimport com.lsc.freemarker.entity.MockResult;\r\nimport com.lsc.freemarker.entity.SetMethodBean;\r\nimport com.lsc.freemarker.enums.ResultCodeEnum;\r\nimport com.lsc.freemarker.entity.CrudBean;\r\nimport com.lsc.freemarker.enums.ResultOutPathEnum;\r\nimport com.lsc.freemarker.enums.TemplatePathEnum;\r\nimport com.lsc.freemarker.utils.FileUtils;\r\nimport com.lsc.freemarker.utils.ReflectionUtil;\r\nimport freemarker.cache.FileTemplateLoader;\r\nimport freemarker.template.Configuration;\r\nimport freemarker.template.Template;\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.junit.Test;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\nimport java.io.*;\r\nimport java.lang.reflect.Field;\r\nimport java.lang.reflect.Method;\r\nimport java.util.*;\r\nimport java.util.stream.Collectors;\r\n\r\n/**\r\n * Created by lisc on 2021/12/19\r\n * 代码生成核心处理类\r\n * 是用Freemarker 完成文件生成\r\n * 数据模型 + 模版\r\n * 数据:\r\n * 数据模型\r\n * 模版位置\r\n * 生成文件的路径\r\n */\r\n\r\npublic class Generator {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(Generator.class);\r\n    // 模版路径\r\n    private static final String TEMPLATE_PATH = \"D:\\\\Code\\\\TestCode\\\\newzhongchou\\\\Freemarker-utils\\\\src\\\\main\\\\resources\\\\FreeMarkerFile\\\\CodeTemplates\";\r\n\r\n    // 生成类路径\r\n    private static final String OUT_PATH = \"D:\\\\Code\\\\TestCode\\\\newzhongchou\\\\Freemarker-utils\\\\src\\\\main\\\\resources\\\\FreeMarkerFile\\\\SpannedFile\\\\crud\";\r\n\r\n    // FreeMarker 连接对象\r\n    private static Configuration cfg = null;\r\n\r\n    /**\r\n     * 1 创建FreeMarker的配置类\r\n     * 2 制定模版加载器: 将模版存入缓存中\r\n     * ClassTemplateLoader() 类路径\r\n     * FileTemplateLoader() 文件路径加载器\r\n     * StringTemplateLoader() 文本\r\n     * URLTemplateLoader() url路径\r\n     * WebappTemplateLoader web应用程序下\r\n     * 3 获取模版\r\n     * 4 构造数据模型  map的key就是模版内占位符的key\r\n     * 5 文件输出\r\n     */\r\n    public static String generateCrudCode(String rootPath, String packagePath, String className, String tableName) {\r\n        log.info(\"Generator:generateCrudCode:rootPath:{},packagePath:{},className:{},tableName:{}\", rootPath, packagePath, className, tableName);\r\n        if (StringUtils.isEmpty(rootPath)) {\r\n            log.info(\"Generator:generateCrudCode: rootPath为null\");\r\n            return ResultCodeEnum.FAILURE.getCode();\r\n        }\r\n        String path = StringUtils.EMPTY;\r\n        if (rootPath.contains(\"iexpbizprod\")) {\r\n            path = TEMPLATE_PATH + \"\\\\iexpbizprod\";\r\n        } else {\r\n            path = TEMPLATE_PATH + \"\\\\ibizecoprod\";\r\n        }\r\n        // 元数据JSON文件路径\r\n        //String jsonTextFile = \"E:\\\\TestCodeDome\\\\atcrowdfunding\\\\Freemarker-utils\\\\FreeMarkerFile\\\\MetaDataFile\";\r\n\r\n        // 1 创建FreeMarker的配置类\r\n        Configuration instance = getInstance();\r\n\r\n        // 2 指定模版加载器 + 3 获取模版\r\n        generator(instance, path);\r\n\r\n        // 4 构造数据模型  map的key就是模版内占位符的key\r\n        // Map<String, Object> dataModel = getDataModel(jsonTextFile);\r\n        CrudBean crudBean = CrudBean.builder()\r\n                .rootPath(rootPath).packagePath(packagePath).className(className).tableName(tableName)\r\n                .build();\r\n\r\n\r\n        Map<String, Object> dataModel = new HashMap<>();\r\n        dataModel.put(\"date\", new Date());\r\n        dataModel.put(\"mock\", crudBean);\r\n\r\n        // 5 代码生成  + 文件输出\r\n        return scanAndGenerator(dataModel, path, OUT_PATH);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * 给FreeMarker 设置模版加载器, 指定模版路径\r\n     * 2 指定模版加载器\r\n     * ClassTemplateLoader() 类路径\r\n     * FileTemplateLoader() 文件路径加载器\r\n     * StringTemplateLoader() 文本\r\n     * URLTemplateLoader() url路径\r\n     * WebappTemplateLoader web应用程序下\r\n     *\r\n     * @param templatePath 模版路径\r\n     */\r\n    public static void generator(Configuration cfg, String templatePath) {\r\n        try {\r\n\r\n            //  指定模版加载器\r\n            FileTemplateLoader ftl = new FileTemplateLoader(new File(templatePath));\r\n            cfg.setTemplateLoader(ftl);\r\n        } catch (IOException e) {\r\n            System.out.println(\"获取模版路径出错\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取FreeMarker对象\r\n     * 1 创建FreeMarker的配置类\r\n     *\r\n     * @return Configuration\r\n     */\r\n    public static Configuration getInstance() {\r\n        if (cfg == null) {\r\n            synchronized (Generator.class) {\r\n                cfg = new Configuration(Configuration.DEFAULT_INCOMPATIBLE_IMPROVEMENTS);\r\n            }\r\n        }\r\n        return cfg;\r\n    }\r\n\r\n    /**\r\n     * 返回数据模型\r\n     * 根据json格式文本返回一个map对象\r\n     *\r\n     * @param jsonPath json文件路径\r\n     * @return\r\n     */\r\n    public static Map<String, Object> getDataModel(String jsonPath) {\r\n        String jsonStr = \"\";\r\n        Map map = new HashMap();\r\n        try {\r\n            File jsonFile = new File(jsonPath);\r\n            FileReader fileReader = new FileReader(jsonFile);\r\n            Reader reader = new InputStreamReader(new FileInputStream(jsonFile), \"utf-8\");\r\n            int ch = 0;\r\n            StringBuffer sb = new StringBuffer();\r\n            while ((ch = reader.read()) != -1) {\r\n                sb.append((char) ch);\r\n            }\r\n            fileReader.close();\r\n            reader.close();\r\n            jsonStr = sb.toString();\r\n            map = JSONObject.parseObject(jsonStr, Map.class);\r\n\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return map;\r\n    }\r\n\r\n\r\n    /**\r\n     * 代码生成\r\n     * 1 扫描模版路径下所有模版\r\n     * 2 对每个模版进行文件生成\r\n     *\r\n     * @param dataModel    数据模型\r\n     * @param templatePath 模版路径\r\n     * @param outPath      输出代码路径\r\n     */\r\n    public static String scanAndGenerator(Map<String, Object> dataModel, String templatePath, String outPath) {\r\n        String result = ResultCodeEnum.SUCCESS.getCode();\r\n        //1  根据模版路径找到此路径下所有模版文件\r\n        List<File> fileList = FileUtils.searchAllFile(new File(templatePath));\r\n        for (File file : fileList) {\r\n            try {\r\n                executeGenertor(dataModel, file, templatePath, outPath);\r\n            } catch (Exception e) {\r\n                result = ResultCodeEnum.FAILURE.getCode();\r\n                log.error(\"对模版进行代码生成时报错!\", e);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    /**\r\n     * 对模版进行代码生成\r\n     *\r\n     * @param dataModel    数据模型\r\n     * @param file         模版路径下单个模版文件\r\n     * @param templatePath\r\n     * @param outPath\r\n     * @throws Exception\r\n     */\r\n    public static void executeGenertor(Map<String, Object> dataModel, File file, String templatePath, String outPath) throws Exception {\r\n        // 1 文件路径处理 getAbsolutePath() 获取到当前file的绝对路径\r\n        // E:\\TestCodeDome\\FreeMarkerUtils\\freemarker-template\\templates\\outtemplates\\\r\n        //      ${path1}\\${path2}\\${path3}\\${className}.java\r\n        // 把前面的路径替换成空,只处理后面的路径\r\n        String templateFileName = file.getAbsolutePath().replace(templatePath, \"\");\r\n        String stringTemplate = processStringTemplate(templateFileName, dataModel);\r\n\r\n        // 2 读取文件模版\r\n        Template template = cfg.getTemplate(templateFileName);\r\n        // 指定生成文件的字符集编码\r\n        template.setOutputEncoding(\"utf-8\");\r\n\r\n        // 3 创建文件\r\n        File file1 = FileUtils.mkdir(outPath, stringTemplate);\r\n\r\n        // 4 文件生成\r\n        FileWriter fw = new FileWriter(file1);\r\n        template.process(dataModel, fw);\r\n        fw.close();\r\n    }\r\n\r\n    public static String processStringTemplate(String templateString, Map<String, Object> dataModel) throws Exception {\r\n        StringWriter out = new StringWriter();\r\n        /**\r\n         *  创建字符串模版\r\n         */\r\n        Template template = new Template(\"StringTemplate\", new StringReader(templateString), cfg);\r\n        // 输出到out\r\n        template.process(dataModel, out);\r\n        return out.toString();\r\n    }\r\n\r\n    @Test\r\n    public void test() {\r\n        String name = \"com.lsc.freemarker.entity.Bean\";\r\n        ClassLoader classLoader = new CustomClassLoader();\r\n\r\n        MockResult<String> result = new MockResult();\r\n        FreeMarkerServiceTemplate.execute(result, TemplatePathEnum.SET_METHOD_PATH, ResultOutPathEnum.SET_METHOD_PATH, new FreeMarkerDataModel<SetMethodBean>() {\r\n            @Override\r\n            public SetMethodBean buildModelData() throws Exception {\r\n                Class<?> aClass = classLoader.loadClass(name);\r\n                List<Field> fieldList = ReflectionUtil.getDeclaredFields(aClass);\r\n\r\n                ArrayList<Method> methods = new ArrayList<>();\r\n                for (Field field : fieldList) {\r\n                    Method method = ReflectionUtil.getObjectSetMethod(aClass, field);\r\n                    if (null != method) {\r\n                        methods.add(method);\r\n                    }\r\n                }\r\n                log.info(\"set方法执行完毕\");\r\n                List<String> methodList = methods.stream().map(Method::getName).collect(Collectors.toList());\r\n                return SetMethodBean.builder().className(aClass.getSimpleName()).methodsName(methodList).build();\r\n\r\n            }\r\n        });\r\n    }\r\n}\r\n","fileName":"Generator.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\java\\com\\lsc\\freemarker\\core\\Generator.java"},{"content":"package com.lsc.freemarker.core;\r\n\r\nimport com.lsc.freemarker.demo.GeneratorBackup;\r\nimport com.lsc.freemarker.entity.DataBase;\r\nimport com.lsc.freemarker.entity.Settings;\r\nimport com.lsc.freemarker.utils.PropertiesUtils;\r\nimport lombok.Data;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\n/**\r\n * Created by lisc on 2021/12/19\r\n * 1  采集输入数据\r\n * 模版位置\r\n * 代码生成路径\r\n * 工程配置对象\r\n * 数据库对象\r\n * 2  准备数据模型\r\n * 自定义配置\r\n * 元数据\r\n * 3  调用核心处理类完成代码生成工作\r\n */\r\n@Data\r\npublic class GeneratorFacade {\r\n\r\n    // 模版路径\r\n    private String templatePath;\r\n    // 输出路径\r\n    private String outPath;\r\n    // 配置对象\r\n    private Settings settings;\r\n    // 数据库对象\r\n    private DataBase db;\r\n    private GeneratorBackup generator;\r\n\r\n    public GeneratorFacade(String templatePath, String outPath, Settings settings, DataBase db, GeneratorBackup generator) {\r\n        this.templatePath = templatePath;\r\n        this.outPath = outPath;\r\n        this.settings = settings;\r\n        this.db = db;\r\n        this.generator = new GeneratorBackup(templatePath, outPath);\r\n    }\r\n\r\n    /**\r\n     * 1 准备数据模型\r\n     * 2 调用核心处理类完成代码生成工作\r\n     */\r\n    public void generatorByDataBase() {\r\n        Map<String, Object> dataModel = getDataModel(\"\");\r\n    }\r\n\r\n    /**\r\n     * 获取数据模型\r\n     *\r\n     * @param s\r\n     * @return\r\n     */\r\n    private Map<String, Object> getDataModel(Object s) {\r\n        Map<String, Object> dataModel = new HashMap<>();\r\n        // 自定义配置\r\n        dataModel.putAll(PropertiesUtils.customMap);\r\n\r\n        // 元数据\r\n        //dataModel.putAll(\"table\", Table);\r\n\r\n        dataModel.putAll(this.settings.getSettingMap());\r\n\r\n        return dataModel;\r\n    }\r\n}\r\n","fileName":"GeneratorFacade.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\java\\com\\lsc\\freemarker\\core\\GeneratorFacade.java"},{"content":"package com.lsc.freemarker.db;\r\n\r\n\r\nimport com.alibaba.druid.pool.DruidDataSourceFactory;\r\nimport com.alibaba.fastjson.JSONObject;\r\nimport com.alibaba.fastjson.serializer.SerializerFeature;\r\nimport com.lsc.freemarker.entity.Column;\r\nimport com.lsc.freemarker.entity.Table;\r\nimport com.lsc.freemarker.utils.StringBuildUtils;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.junit.Test;\r\n\r\nimport javax.sql.DataSource;\r\nimport java.io.InputStream;\r\nimport java.sql.*;\r\nimport java.util.ArrayList;\r\nimport java.util.Properties;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: com.lsc.freemarker.db\r\n * @date 2022/11/8 15:30\r\n */\r\n@Slf4j\r\n\r\npublic class DataBaseConnection {\r\n\r\n    public static void main(String[] args) {\r\n        Connection conn = getConnection();\r\n        String sql = \"select * from ibep_form_data_records\";\r\n        PreparedStatement stmt = null;\r\n        ResultSet rs = null;\r\n        try {\r\n            stmt = conn.prepareStatement(sql);\r\n            rs = stmt.executeQuery(sql);\r\n            ResultSetMetaData data = rs.getMetaData();\r\n            while (rs.next()) {\r\n                for (int i = 1; i <= data.getColumnCount(); i++) {\r\n                    //获得所有列的数目及实际列数\r\n                    int columnCount = data.getColumnCount();\r\n                    //获得指定列的列名\r\n                    String columnName = data.getColumnName(i);\r\n                    //获得指定列的列值\r\n                    String columnValue = rs.getString(i);\r\n                    //获得指定列的数据类型\r\n                    int columnType = data.getColumnType(i);\r\n                    //获得指定列的数据类型名\r\n                    String columnTypeName = data.getColumnTypeName(i);\r\n                    //所在的Catalog名字\r\n                    String catalogName = data.getCatalogName(i);\r\n                    //对应数据类型的类\r\n                    String columnClassName = data.getColumnClassName(i);\r\n                    //在数据库中类型的最大字符个数\r\n                    int columnDisplaySize = data.getColumnDisplaySize(i);\r\n                    //默认的列的标题\r\n                    String columnLabel = data.getColumnLabel(i);\r\n                    //获得列的模式\r\n                    String schemaName = data.getSchemaName(i);\r\n                    //某列类型的精确度(类型的长度)\r\n                    int precision = data.getPrecision(i);\r\n                    //小数点后的位数\r\n                    int scale = data.getScale(i);\r\n                    //获取某列对应的表名\r\n                    String tableName = data.getTableName(i);\r\n                    // 是否自动递增\r\n                    boolean isAutoInctement = data.isAutoIncrement(i);\r\n                    //在数据库中是否为货币型\r\n                    boolean isCurrency = data.isCurrency(i);\r\n                    //是否为空\r\n                    int isNullable = data.isNullable(i);\r\n                    //是否为只读\r\n                    boolean isReadOnly = data.isReadOnly(i);\r\n                    //能否出现在where中\r\n                    boolean isSearchable = data.isSearchable(i);\r\n                    System.out.println(columnCount);\r\n                    System.out.println(\"获得列\" + i + \"的字段名称:\" + columnName);\r\n                    System.out.println(\"获得列\" + i + \"的字段值:\" + columnValue);\r\n                    System.out.println(\"获得列\" + i + \"的类型,返回SqlType中的编号:\" + columnType);\r\n                    System.out.println(\"获得列\" + i + \"的数据类型名:\" + columnTypeName);\r\n                    System.out.println(\"获得列\" + i + \"所在的Catalog名字:\" + catalogName);\r\n                    System.out.println(\"获得列\" + i + \"对应数据类型的类:\" + columnClassName);\r\n                    System.out.println(\"获得列\" + i + \"在数据库中类型的最大字符个数:\" + columnDisplaySize);\r\n                    System.out.println(\"获得列\" + i + \"的默认的列的标题:\" + columnLabel);\r\n                    System.out.println(\"获得列\" + i + \"的模式:\" + schemaName);\r\n                    System.out.println(\"获得列\" + i + \"类型的精确度(类型的长度):\" + precision);\r\n                    System.out.println(\"获得列\" + i + \"小数点后的位数:\" + scale);\r\n                    System.out.println(\"获得列\" + i + \"对应的表名:\" + tableName);\r\n                    System.out.println(\"获得列\" + i + \"是否自动递增:\" + isAutoInctement);\r\n                    System.out.println(\"获得列\" + i + \"在数据库中是否为货币型:\" + isCurrency);\r\n                    System.out.println(\"获得列\" + i + \"是否为空:\" + isNullable);\r\n                    System.out.println(\"获得列\" + i + \"是否为只读:\" + isReadOnly);\r\n                    System.out.println(\"获得列\" + i + \"能否出现在where中:\" + isSearchable);\r\n\r\n                }\r\n            }\r\n        } catch (SQLException e) {\r\n            System.out.println(\"数据库连接失败\");\r\n            close(conn, stmt, rs);\r\n        }\r\n    }\r\n\r\n\r\n    public static Table getDataBaseTableData(String tableName) {\r\n        Connection conn = getConnection();\r\n        String sql = String.format(\"select * from %s\", tableName);\r\n        PreparedStatement stmt = null;\r\n        ResultSet rs = null;\r\n\r\n        Table table = new Table();\r\n        ArrayList<Column> columnArrayList = new ArrayList<>();\r\n        try {\r\n            stmt = conn.prepareStatement(sql);\r\n            rs = stmt.executeQuery(sql);\r\n            ResultSetMetaData data = rs.getMetaData();\r\n         //   while (rs.next()) {\r\n                for (int i = 1; i <= data.getColumnCount(); i++) {\r\n\r\n                    Column column = new Column();\r\n                    // 获取某列对应的表名\r\n                    String dataTableName = data.getTableName(i);\r\n                    table.setDatabaseTableName(dataTableName);\r\n                    // 下划线命名转为驼峰命名\r\n                    String javaTableName = StringBuildUtils.underlineToHump(dataTableName);\r\n                    table.setJavaTableName(javaTableName);\r\n\r\n\r\n                    //获得指定列的列名\r\n                    String dataColumnName = data.getColumnName(i);\r\n                    column.setColumnName(dataColumnName);\r\n\r\n                    // 下划线命名转为驼峰命名\r\n                    String javaColumnName = StringBuildUtils.underlineToHump(dataColumnName);\r\n                    column.setJavaColumnName(javaColumnName);\r\n\r\n                    //对应数据类型的类\r\n                    String columnClassName = data.getColumnClassName(i);\r\n                    column.setColumnType(columnClassName.substring(columnClassName.lastIndexOf(\".\")));\r\n\r\n                    //获得指定列的数据类型名\r\n                    String columnTypeName = data.getColumnTypeName(i);\r\n                    column.setColumnDbType(columnTypeName);\r\n\r\n                    columnArrayList.add(column);\r\n                }\r\n       //     }\r\n            table.setColumns(columnArrayList);\r\n        } catch (SQLException e) {\r\n            log.info(\"数据库连接失败\",e);\r\n        }finally {\r\n            close(conn, stmt, rs);\r\n        }\r\n        return table;\r\n    }\r\n\r\n    /**\r\n     * 获取数据库连接\r\n     *\r\n     * @return\r\n     */\r\n    public static Connection getConnection() {\r\n        Connection connection = null;\r\n        try {\r\n            Properties prop = new Properties();\r\n            InputStream in = DataBaseConnection.class.getClassLoader().getResourceAsStream(\"spring-config/db.properties\");\r\n            prop.load(in);\r\n            DataSource dataSource = DruidDataSourceFactory.createDataSource(prop);\r\n            //5.获取数据库联链接\r\n            connection = dataSource.getConnection();\r\n        } catch (Exception e) {\r\n            log.info(\"DateBaseConnection:init() 创建连接时 发生异常:\", e);\r\n        }\r\n        return connection;\r\n    }\r\n\r\n\r\n    /**\r\n     * 关闭数据库连接\r\n     *\r\n     * @param connection\r\n     * @param statement\r\n     * @param resultSet\r\n     */\r\n    public static void close(Connection connection, Statement statement, ResultSet resultSet) {\r\n        try {\r\n            if (resultSet != null) {\r\n                resultSet.close();\r\n            }\r\n            if (statement != null) {\r\n                statement.close();\r\n            }\r\n\r\n            if (connection != null) {\r\n                connection.close();\r\n            }\r\n        } catch (SQLException throwables) {\r\n            log.info(\"DateBaseConnection:close() 关闭连接时,发生异常:\", throwables);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    @Test\r\n    public void test() throws Exception {\r\n        Table ibep_form_data_records = getDataBaseTableData(\"ibep_form_data_records\");\r\n        System.out.println(\"JSONObject.toJSONString(ibep_form_data_records, SerializerFeature.PrettyFormat, SerializerFeature.WriteMapNullValue) = \" + JSONObject.toJSONString(ibep_form_data_records, SerializerFeature.PrettyFormat, SerializerFeature.WriteMapNullValue));\r\n\r\n\r\n    }\r\n\r\n\r\n}\r\n","fileName":"DataBaseConnection.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\java\\com\\lsc\\freemarker\\db\\DataBaseConnection.java"},{"content":"package com.lsc.freemarker.demo;\r\n\r\nimport lombok.Data;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.junit.Test;\r\n\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.io.File;\r\nimport java.io.FileFilter;\r\nimport java.io.FileInputStream;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Stack;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: com.lsc.freemarker.demo\r\n * @date 2022/10/20 19:10\r\n */\r\n@Slf4j\r\n@Data\r\npublic class ClassFileTest02 extends ClassLoader {\r\n\r\n    private List<String> classFile = null;\r\n\r\n    @Test\r\n    public void test() throws ClassNotFoundException {\r\n        String rootPath = \"D:\\\\Code\\\\javaCore\\\\ibizecoprod\\\\app\";\r\n\r\n        ClassFileTest02 test02 = new ClassFileTest02();\r\n        test02.setClassFile(getClassFilePath(rootPath));\r\n        Class<?> loadClass = test02.loadClass(\"com.ipay.ibizecoprod.core.service.xero.response.GetTokenByAuthorizationCodeResponse\");\r\n        System.out.println(\"loadClass.getSimpleName() = \" + loadClass);\r\n    }\r\n\r\n    /**\r\n     * 获取class文件的本地文件路径\r\n     * @param classPath 例如/usr/java/classes下有一个test.App类，则/usr/java/classes即这个类的根路径，而.class文件的实际位置是/usr/java/classes/test/App.class\r\n     */\r\n    public List<String> getClassFilePath(String classPath) {\r\n        // 设置class文件所在根路径\r\n        File clazzPath = new File(classPath);\r\n\r\n        ArrayList<String> pathList = new ArrayList<>();\r\n        try {\r\n            // 是否存在, 是否是目录\r\n            if (clazzPath.exists() && clazzPath.isDirectory()) {\r\n                // 获取路径长度\r\n                int clazzPathLen = clazzPath.getAbsolutePath().length() + 1;\r\n\r\n                Stack<File> stack = new Stack<>();\r\n                stack.push(clazzPath);\r\n\r\n                // 遍历类路径\r\n                while (stack.isEmpty() == false) {\r\n                    // 移除堆栈顶部的对象，并作为此函数的值返回该对象。\r\n                    File path = stack.pop();\r\n\r\n                    File[] classFiles = path.listFiles(new FileFilter() {\r\n                        public boolean accept(File pathname) {\r\n                            // 留下 是文件夹 并且文件夹名不包含test 或者 是.class文件且不包含$\r\n                            return (pathname.isDirectory() && !pathname.getName().contains(\"test\")) || (pathname.getName().endsWith(\".class\") && !pathname.getName().contains(\"$\"));\r\n                        }\r\n                    });\r\n\r\n                    for (File subFile : classFiles) {\r\n                        if (subFile.isDirectory()) {\r\n                            stack.push(subFile);\r\n                        } else {\r\n                            // 文件名称\r\n                            String className = subFile.getAbsolutePath();\r\n                            className = className.substring(clazzPathLen, className.length() - 6);\r\n                            int indexOf = className.indexOf(\"com\");\r\n                            className = className.substring(indexOf);\r\n                            className = className.replace(File.separatorChar, '.');\r\n                            pathList.add(subFile.getPath());\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            log.info(\"获取class文件本地地址异常\", e);\r\n        }\r\n        return pathList;\r\n    }\r\n\r\n    @Override\r\n    protected Class<?> findClass(String name) throws ClassNotFoundException {\r\n        log.info(\"findClass -> {}\", name);\r\n        Class<?> aClass = null;\r\n        return loadedPathClassFile(name, aClass);\r\n    }\r\n\r\n    /**\r\n     * 加载本地编译后的class文件\r\n     * @param name\r\n     * @param aClass\r\n     * @return\r\n     */\r\n    private Class<?> loadedPathClassFile(String name, Class<?> aClass) {\r\n        List<String> classFile = this.getClassFile();\r\n        if (classFile.isEmpty()) {\r\n            log.info(\"classFile is null\");\r\n            return null;\r\n        }\r\n\r\n        for (String cla : classFile) {\r\n            int lastIndexOf = cla.lastIndexOf('\\\\');\r\n            int indexOf = cla.lastIndexOf('.');\r\n            String substring = cla.substring(lastIndexOf + 1, indexOf);\r\n\r\n            int index = name.lastIndexOf('.');\r\n            String substring1 = name.substring(index + 1);\r\n\r\n            if (!substring.equals(substring1)) {\r\n                continue;\r\n            }\r\n            log.info(\"listName: {}, className: {}\", substring, substring1);\r\n            byte[] loadClazz = loadClazz(cla);\r\n            return defineClass(name, loadClazz, 0, loadClazz.length);\r\n        }\r\n\r\n        return aClass;\r\n    }\r\n\r\n    public byte[] loadClazz(String classPath) {\r\n        try {\r\n            log.info(\"loadClazz方法执行: classPath: {}\", classPath);\r\n            FileInputStream in = new FileInputStream(new File(classPath));\r\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n            int b;\r\n            while ((b = in.read()) != -1) {\r\n                baos.write(b);\r\n            }\r\n            in.close();\r\n            return baos.toByteArray();\r\n        } catch (Exception e) {\r\n            System.out.println(e);\r\n        } finally {\r\n            log.info(\"loadClazz方法执行结束\");\r\n        }\r\n        return null;\r\n    }\r\n}\r\n","fileName":"ClassFileTest02.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\java\\com\\lsc\\freemarker\\demo\\ClassFileTest02.java"},{"content":"package com.lsc.freemarker.demo;\r\n\r\nimport com.alibaba.fastjson.JSONObject;\r\nimport com.lsc.freemarker.utils.FileUtils;\r\nimport freemarker.cache.FileTemplateLoader;\r\nimport freemarker.template.Configuration;\r\nimport freemarker.template.Template;\r\nimport lombok.Data;\r\n\r\nimport java.io.*;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\n/**\r\n * Created by lisc on 2021/12/19\r\n * 代码生成核心处理类\r\n * 是用Freemarker 完成文件生成\r\n * 数据模型 + 模版\r\n * 数据:\r\n * 数据模型\r\n * 模版位置\r\n * 生成文件的路径\r\n */\r\n@Data\r\npublic class GeneratorBackup {\r\n    // 模版路径\r\n    private String templatePath;\r\n    // 代码生成路径\r\n    private String outPath;\r\n    // FreeMarker 连接对象\r\n    private Configuration cfg;\r\n\r\n    /**\r\n     * freeMarker 核心方法\r\n     *\r\n     * @param templatePath 模版路径\r\n     * @param outPath      输出代码路径\r\n     */\r\n    public GeneratorBackup(String templatePath, String outPath) {\r\n        this.templatePath = templatePath;\r\n        this.outPath = outPath;\r\n        // 1 创建FreeMarker的配置类\r\n        this.cfg = new Configuration(Configuration.DEFAULT_INCOMPATIBLE_IMPROVEMENTS);\r\n        try {\r\n            // 2 指定模版加载器\r\n            FileTemplateLoader ftl = new FileTemplateLoader(new File(templatePath));\r\n            cfg.setTemplateLoader(ftl);\r\n        } catch (IOException e) {\r\n            System.out.println(\"获取模版路径出错\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 1 创建FreeMarker的配置类\r\n     * 2 制定模版加载器: 将模版存入缓存中\r\n     * ClassTemplateLoader() 类路径\r\n     * FileTemplateLoader() 文件路径加载器\r\n     * StringTemplateLoader() 文本\r\n     * URLTemplateLoader() url路径\r\n     * WebappTemplateLoader web应用程序下\r\n     * 3 获取模版\r\n     * 4 构造数据模型  map的key就是模版内占位符的key\r\n     * 5 文件输出\r\n     */\r\n    public static void main(String[] args) throws Exception {\r\n        // 模版路径\r\n        String templatePath = \"E:\\\\TestCodeDome\\\\FreeMarkerUtils\\\\freemarker-template\\\\FreeMarkerFile\\\\templates\";\r\n        // 生成类路径\r\n        String outPath = \"E:\\\\TestCodeDome\\\\FreeMarkerUtils\\\\freemarker-template\\\\FreeMarkerFile\\\\outtemplates\";\r\n\r\n        GeneratorBackup generator = new GeneratorBackup(templatePath, outPath);\r\n        // 获取元数据\r\n        Map<String, Object> dataModel = getDataModel(\"E:\\\\TestCodeDome\\\\FreeMarkerUtils\\\\freemarker-template\\\\src\\\\main\\\\resources\\\\templateData\\\\Bean.txt\");\r\n        dataModel.put(\"package\", \"com.lsc.bean\");\r\n\r\n        // 代码生成\r\n        generator.scanAndGenerator(dataModel);\r\n    }\r\n\r\n    /**\r\n     * 返回数据模型\r\n     * 根据json格式文本返回一个map对象\r\n     * @param jsonPath json文件路径\r\n     * @return\r\n     */\r\n    public static Map<String, Object> getDataModel(String jsonPath) {\r\n        String jsonStr = \"\";\r\n        try {\r\n            File jsonFile = new File(jsonPath);\r\n            FileReader fileReader = new FileReader(jsonFile);\r\n            Reader reader = new InputStreamReader(new FileInputStream(jsonFile), \"utf-8\");\r\n            int ch = 0;\r\n            StringBuffer sb = new StringBuffer();\r\n            while ((ch = reader.read()) != -1) {\r\n                sb.append((char) ch);\r\n            }\r\n            fileReader.close();\r\n            reader.close();\r\n            jsonStr = sb.toString();\r\n            return JSONObject.parseObject(jsonStr, Map.class);\r\n\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 代码生成\r\n     * 1 扫描模版路径下所有模版\r\n     * 2 对每个模版进行文件生成\r\n     *\r\n     * @param dataModel 数据模型\r\n     */\r\n    public void scanAndGenerator(Map<String, Object> dataModel) throws Exception {\r\n        //1  根据模版路径找到此路径下所有模版文件\r\n        List<File> fileList = FileUtils.searchAllFile(new File(templatePath));\r\n        for (File file : fileList) {\r\n            executeGenertor(dataModel, file);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 对模版进行代码生成\r\n     *\r\n     * @param dataModel 数据模型\r\n     * @param file      模版文件\r\n     */\r\n    private void executeGenertor(Map<String, Object> dataModel, File file) throws Exception {\r\n        // 1 文件路径处理 getAbsolutePath() 获取到当前file的绝对路径\r\n        // E:\\TestCodeDome\\FreeMarkerUtils\\freemarker-template\\templates\\outtemplates\\\r\n        //      ${path1}\\${path2}\\${path3}\\${className}.java\r\n        // 把前面的路径替换成空,只处理后面的路径\r\n        String templateFileName = file.getAbsolutePath().replace(this.templatePath, \"\");\r\n        String stringTemplate = processStringTemplate(templateFileName, dataModel);\r\n\r\n        // 2 读取文件模版\r\n        Template template = cfg.getTemplate(templateFileName);\r\n        // 指定生成文件的字符集编码\r\n        template.setOutputEncoding(\"utf-8\");\r\n\r\n        // 3 创建文件\r\n        File file1 = FileUtils.mkdir(outPath, stringTemplate);\r\n\r\n        // 4 文件生成\r\n        FileWriter fw = new FileWriter(file1);\r\n        template.process(dataModel, fw);\r\n        fw.close();\r\n    }\r\n\r\n    public String processStringTemplate(String templateString, Map<String, Object> dataModel) throws Exception {\r\n        StringWriter out = new StringWriter();\r\n        /**\r\n         *  创建字符串模版\r\n         */\r\n        Template template = new Template(\"StringTemplate\", new StringReader(templateString), cfg);\r\n        // 输出到out\r\n        template.process(dataModel, out);\r\n        return out.toString();\r\n    }\r\n}\r\n","fileName":"GeneratorBackup.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\java\\com\\lsc\\freemarker\\demo\\GeneratorBackup.java"},{"content":"package com.lsc.freemarker.demo;\r\n\r\nimport com.lsc.freemarker.utils.FileUtils;\r\nimport lombok.NoArgsConstructor;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.apache.commons.collections.ListUtils;\r\nimport org.junit.Test;\r\nimport sun.applet.AppletClassLoader;\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.lang.reflect.InvocationTargetException;\r\nimport java.lang.reflect.Method;\r\nimport java.net.MalformedURLException;\r\nimport java.net.URL;\r\nimport java.net.URLClassLoader;\r\nimport java.util.*;\r\nimport java.util.jar.JarEntry;\r\nimport java.util.jar.JarFile;\r\nimport java.util.stream.Collectors;\r\n\r\n/**\r\n * @Description: 存根\r\n * @Author: lisc\r\n * @date: 2022/5/9\r\n */\r\n@NoArgsConstructor\r\n@Slf4j\r\npublic class JarLoaderDemo {\r\n\r\n    /**\r\n     * 功能描述: 扫描一个文件夹下面的所有jar，不包含子文件夹和子jar\r\n     *\r\n     * @param directoryPath\r\n     * @return:java.util.Map>\r\n     * @since: v1.0\r\n     * @Author:wangcanfeng\r\n     * @Date: 2019/9/12-15:21\r\n     */\r\n    public static Map loadAllJarFromAbsolute(String directoryPath) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException, IOException {\r\n\r\n        File directory = new File(directoryPath);\r\n\r\n        // 判断是否为文件夹，如果是文件,直接用单个jar解析的方法去解析\r\n        if (!directory.isDirectory()) {\r\n            // 添加jar扫描路径\r\n            //   addUrl(directory);\r\n\r\n            return loadJarFromAbsolute(directoryPath);\r\n\r\n        }\r\n\r\n        // 如果是文件夹，则需要循环加载当前文件夹下面的所有jar\r\n        Map clazzMap = new HashMap<>(16);\r\n\r\n        // 获取这个文件夹下所有文件\r\n        File[] jars = directory.listFiles();\r\n\r\n        if (jars != null && jars.length > 0) {\r\n\r\n            List<String> jarPath = new LinkedList<>();\r\n\r\n            for (File file : jars) {\r\n                String fPath = file.getPath();\r\n                // 只加载jar\r\n                if (fPath.endsWith(\".jar\")) {\r\n                    //  addUrl(file);\r\n                    jarPath.add(fPath);\r\n                }\r\n            }\r\n\r\n            if (jarPath.size() > 0) {\r\n\r\n                for (String path : jarPath) {\r\n\r\n                    clazzMap.putAll(loadJarFromAbsolute(path));\r\n                }\r\n            }\r\n        }\r\n        return clazzMap;\r\n\r\n    }\r\n\r\n    /**\r\n     * 功能描述: 从绝对路径中加载jar包中的类\r\n     * 扫描指定jar包前需要将这个jar的地址加入了系统类加载器的扫描列表中\r\n     * 注意，这里只支持单个jar的加载，如果这个jar还引入了其他jar依赖，会加载失败\r\n     * 所以只能用来加载对其他jar包没有依赖的简单对象类信息\r\n     *\r\n     * @param path jar包路径加载地址\r\n     * @return:java.util.Map>\r\n     * @since: v1.0\r\n     * @Author:wangcanfeng\r\n     * @Date: 2019/9/12-14:14\r\n     */\r\n\r\n    public static Map loadJarFromAbsolute(String path) throws IOException {\r\n\r\n        // 文件中读取 jar 文件的内容\r\n        JarFile jar = new JarFile(path);\r\n\r\n        Enumeration entryEnumeration = jar.entries();\r\n\r\n        Map clazzMap = new HashMap<>(16);\r\n\r\n        while (entryEnumeration.hasMoreElements()) {\r\n\r\n            JarEntry entry = (JarEntry) entryEnumeration.nextElement();\r\n            // 先获取类的名称，符合条件之后再做处理，避免处理不符合条件的类\r\n            String clazzName = entry.getName();\r\n            System.out.println(\"clazzName = \" + clazzName);\r\n\r\n            if (clazzName.endsWith(\".class\")) {\r\n\r\n                // 去掉文件名的后缀\r\n                clazzName = clazzName.substring(0, clazzName.length() - 6);\r\n\r\n                // 替换分隔符\r\n                clazzName = clazzName.replace(\"/\", \".\");\r\n\r\n                // 加载类,如果失败直接跳过\r\n                try {\r\n                    Class clazz = Class.forName(clazzName);\r\n\r\n                    // 将类名称作为键，类Class对象作为值存入map\r\n                    // 因为类名存在重复的可能，所以这里的类名是带包名的\r\n                    clazzMap.put(clazzName, clazz);\r\n\r\n                } catch (Throwable e) {\r\n                    // 这里可能出现有些类是依赖不全的，直接跳过，不做处理，也没法做处理\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n        return clazzMap;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * 功能描述: 添加需要扫描的jar包\r\n     *\r\n     * @param jarPath\r\n     * @return:void\r\n     * @since: v1.0\r\n     * @Author:wangcanfeng\r\n     * @Date: 2019/9/12-15:21\r\n     */\r\n    public static void addUrl(File jarPath, URLClassLoader classLoader)  {\r\n        try {\r\n            // URLClassLoader 该类加载器用于从指向 JAR 文件和目录的 URL 的搜索路径加载类和资源。这里假定任何以 '/' 结束的 URL 都是指向目录的。如果不是以该字符结束，则认为该 URL 指向一个将根据需要打开的 JAR 文件。\r\n\r\n            // 反射获取类加载器中的addURL方法，并将需要加载类的jar路径 反射获取URL.class类的addURL()方法\r\n            Method method = URLClassLoader.class.getDeclaredMethod(\"addURL\", URL.class);\r\n\r\n            // 反射访问属性或方法时将Accessible设置为true\r\n            if (!method.isAccessible()) {\r\n                method.setAccessible(true);\r\n            }\r\n            // 把文件路径转为URL对象\r\n            URL url = jarPath.toURI().toURL();\r\n            // 把当前jar的路径加入到类加载器需要扫描的路径\r\n            method.invoke(classLoader, url);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 根据jar包路径,加载路径下所有的jar包,根据指定的class名 获取反射的class对象\r\n     *\r\n     * @param jarPath       jar包路径\r\n     * @param classNamePath 要反射的class全路径\r\n     * @return\r\n     */\r\n    public static Class<?> getClassObject(String jarPath, String classNamePath) {\r\n        log.info(\"getClassObject方法开始执行\");\r\n        Class<?> loadClass = null;\r\n        try {\r\n            // 获取委托的系统类加载器\r\n            URLClassLoader classLoader = (URLClassLoader) ClassLoader.getSystemClassLoader();\r\n\r\n            File file = new File(jarPath);\r\n\r\n            // 递归遍历路径下的jar包\r\n            List<File> files = FileUtils.searchAllJarFile(file);\r\n            // 按文件最后修改时间排序\r\n            files.stream().sorted(Comparator.comparing(File::lastModified).reversed())\r\n                    // 获取第一个\r\n                    .limit(1)\r\n                    // 调用addurl方法,把jar包加载到jvm中\r\n                    .forEach((file1 -> JarLoaderDemo.addUrl(file1, classLoader)));\r\n\r\n            loadClass = classLoader.loadClass(classNamePath);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return loadClass;\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n","fileName":"JarLoaderDemo.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\java\\com\\lsc\\freemarker\\demo\\JarLoaderDemo.java"},{"content":"package com.lsc.freemarker.demo;\r\n\r\nimport com.lsc.freemarker.core.FreeMarkerGenerator;\r\nimport org.junit.Test;\r\n\r\nimport java.lang.reflect.Method;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: com.lsc.freemarker.demo\r\n * @date 2022/10/31 16:10\r\n */\r\npublic class ReflectionUtilTest {\r\n\r\n    @Test\r\n    public void test(){\r\n        FreeMarkerGenerator freeMarkerGenerator = new FreeMarkerGenerator();\r\n        Class<? extends FreeMarkerGenerator> aClass = freeMarkerGenerator.getClass();\r\n        for (Method method : aClass.getMethods()) {\r\n            method.setAccessible(true);\r\n            Class<?> returnType = method.getReturnType();\r\n            System.out.println(\"returnType.getSimpleName() = \" + returnType.getSimpleName());\r\n            System.out.println(\"returnType.getName() = \" + returnType.getName());\r\n            System.out.println(\"returnType.getTypeName() = \" + returnType.getTypeName());\r\n            System.out.println(\"returnType.getCanonicalName() = \" + returnType.getCanonicalName());\r\n            System.out.println(\"returnType.getTypeParameters() = \" + returnType.getTypeParameters());\r\n            System.out.println();\r\n        }\r\n    }\r\n}\r\n","fileName":"ReflectionUtilTest.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\java\\com\\lsc\\freemarker\\demo\\ReflectionUtilTest.java"},{"content":"package com.lsc.freemarker.demo;\r\n\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: com.lsc.freemarker.demo\r\n * @date 2022/10/27 18:01\r\n */\r\npublic class TestAop {\r\n    private ClassPathXmlApplicationContext ac;\r\n\r\n    @Before\r\n    public void before() {\r\n        ac = new ClassPathXmlApplicationContext(\"*/applicationContext.xml\");\r\n    }\r\n\r\n    @Test\r\n    public void test() {\r\n        try {\r\n            UserService userService = (UserService) ac.getBean(\"userService\");\r\n            userService.insertUser();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n}\r\n","fileName":"TestAop.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\java\\com\\lsc\\freemarker\\demo\\TestAop.java"},{"content":"package com.lsc.freemarker.demo;\r\n\r\nimport com.alibaba.fastjson.JSONObject;\r\nimport com.lsc.freemarker.core.CustomClassLoader;\r\nimport com.lsc.freemarker.entity.Bean;\r\nimport com.lsc.freemarker.entity.CrudBean;\r\nimport com.lsc.freemarker.enums.ResultCodeEnum;\r\nimport com.lsc.freemarker.utils.ReflectionUtil;\r\nimport freemarker.template.Configuration;\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.junit.Test;\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.lang.reflect.Array;\r\nimport java.lang.reflect.Field;\r\nimport java.lang.reflect.InvocationTargetException;\r\nimport java.lang.reflect.Method;\r\nimport java.util.*;\r\nimport java.util.function.Function;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: com.lsc.freemarker.demo\r\n * @date 2022/10/10 10:08\r\n */\r\npublic class TestCode {\r\n\r\n    @Test\r\n    public void test01() throws IOException, ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException {\r\n\r\n        //    String classPath = \"com.ipay.ibizecoprod.core.service.voyage.impl.MpOpenMarketPlaceServiceImpl\";\r\n        String classPath = \"com.ipay.ibizecoprod.core.service.voyage.impl.MpOpenMarketPlaceServiceImpl\";\r\n        // 创建自定义的类加载器\r\n        CustomClassLoader loader = new CustomClassLoader();\r\n\r\n        // 使用自定义的类加载器加载TestHelloWorld类\r\n        Class classaa = loader.loadClass(classPath);\r\n        Field[] declaredFields = classaa.getDeclaredFields();\r\n        Method[] declaredMethods = classaa.getDeclaredMethods();\r\n        Method[] methods = classaa.getMethods();\r\n\r\n        for (Method declaredMethod : declaredMethods) {\r\n            declaredMethod.setAccessible(true);\r\n\r\n            System.out.println(\"declaredMethod = \" + JSONObject.toJSONString(declaredMethod));\r\n       /*     for (Type genericParameterType : declaredMethod.getGenericParameterTypes()) {\r\n                String typeName = genericParameterType.getTypeName();\r\n\r\n            }*/\r\n        }\r\n\r\n        System.out.println(JSONObject.toJSONString(classaa));\r\n        System.out.println(\"declaredFields \" + JSONObject.toJSONString(declaredFields));\r\n        System.out.println(\"declaredMethods \" + JSONObject.toJSONString(declaredMethods));\r\n        System.out.println(\"methods = \" + JSONObject.toJSONString(methods));\r\n\r\n     /*   for (Field field : declaredFields) {\r\n            System.out.println(\"field.getType().getSimpleName() = \" + field.getType().getSimpleName());\r\n            System.out.println(\"field.getType().getName() = \" + field.getType().getName());\r\n            System.out.println(\"field.getName() = \" + field.getName());\r\n        }*/\r\n\r\n    }\r\n\r\n    @Test\r\n    public void test02() throws Exception {\r\n        String ipayUserId = \"2121150000223041\";\r\n        String substring = StringUtils.substring(ipayUserId, -3, -1);\r\n        System.out.println(\"substring = \" + substring);\r\n\r\n    }\r\n\r\n    @Test\r\n    public void test03() {\r\n        Bean bean = new Bean();\r\n        List<Field> fieldList = ReflectionUtil.getSelfAndAllParentAllFild(bean);\r\n\r\n        ArrayList<Method> methods = new ArrayList<>();\r\n        for (Field field : fieldList) {\r\n            Method method = ReflectionUtil.getObjectSetMethod(bean, field);\r\n            if (null != method) {\r\n                methods.add(method);\r\n            }\r\n        }\r\n        methods.stream().map(Method::getName).forEach(System.out::println);\r\n\r\n\r\n    }\r\n\r\n\r\n}\r\n","fileName":"TestCode.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\java\\com\\lsc\\freemarker\\demo\\TestCode.java"},{"content":"package com.lsc.freemarker.demo;\r\n\r\nimport com.lsc.freemarker.utils.Constants;\r\nimport com.lsc.freemarker.utils.SystemLog;\r\nimport org.springframework.stereotype.Service;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: com.lsc.freemarker.demo\r\n * @date 2022/10/27 18:00\r\n */\r\n@Service\r\npublic class UserService {\r\n    @SystemLog\r\n    public void insertUser() {\r\n        try {\r\n            System.out.println(\"插入用户成功\" + 10/0);\r\n        } catch (Exception e) {\r\n            System.out.println(\"插入用户异常了\");\r\n        }\r\n\r\n    }\r\n\r\n    @SystemLog(LogType = Constants.LogType.Insert)\r\n    public boolean updateUser() {\r\n        System.out.println(\"更新用户成功\");\r\n        return true;\r\n    }\r\n}\r\n","fileName":"UserService.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\java\\com\\lsc\\freemarker\\demo\\UserService.java"},{"content":"package com.lsc.freemarker.entity;\r\n\r\nimport lombok.Data;\r\n\r\nimport java.util.List;\r\n\r\n/**\r\n * Created by lisc on 2021/12/19\r\n */\r\n@Data\r\npublic class Bean extends Column{\r\n    // 类名\r\n    private String className;\r\n    // 属性类型和属性名\r\n    private List<Column> columns;\r\n}\r\n","fileName":"Bean.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\java\\com\\lsc\\freemarker\\entity\\Bean.java"},{"content":"package com.lsc.freemarker.entity;\r\n\r\nimport lombok.Data;\r\n\r\n/**\r\n * Created by lisc on 2021/12/19\r\n */\r\n@Data\r\npublic class Column {\r\n    // 列名称\r\n    private String columnName;\r\n    // 列名称(处理后的列名称)\r\n    private String javaColumnName;\r\n    // 列类型\r\n    private String columnType;\r\n    // 列数据库类型\r\n    private String columnDbType;\r\n    // 列描述\r\n    private String columnComment;\r\n    // 是否是主键\r\n    private String columnKey;\r\n}\r\n","fileName":"Column.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\java\\com\\lsc\\freemarker\\entity\\Column.java"},{"content":"package com.lsc.freemarker.entity;\r\n\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Builder;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: com.lsc.freemarker.entity\r\n * @date 2022/10/24 16:45\r\n */\r\n@Data\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\n@Builder\r\npublic class CrudBean {\r\n    /**\r\n     * 项目路径\r\n     * com.ipay.ibizecoprod\r\n     */\r\n    private String rootPath;\r\n\r\n    /**\r\n     * 包路径\r\n     * core.service.voyage.impl\r\n     */\r\n    private String packagePath;\r\n\r\n    /**\r\n     * 类名\r\n     */\r\n    private String className;\r\n\r\n    /**\r\n     * 表名\r\n     */\r\n    private String tableName;\r\n\r\n    /**\r\n     * 数据库表对象\r\n     */\r\n    private Table table;\r\n}\r\n","fileName":"CrudBean.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\java\\com\\lsc\\freemarker\\entity\\CrudBean.java"},{"content":"package com.lsc.freemarker.entity;\r\n\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\n\r\n/**\r\n * Created by lisc on 2021/12/19\r\n */\r\n@Data\r\n@NoArgsConstructor\r\npublic class DataBase {\r\n    private static String mysqlUrl = \"jdbc:mysql://[ip]:[port]/[db]?useUnicode=true&amp;characterEncoding=UTF8\";\r\n    private static String oracleUrl = \"jdbc:oracle:thin:@[ip]:[port]:[db]\";\r\n    private String dbType;\r\n    private String driver;\r\n    private String userName;\r\n    private String passWord;\r\n    private String url;\r\n\r\n    public DataBase(String dbType){\r\n        this(dbType,\"127.0.0.1\",\"3306\",\"\");\r\n    }\r\n    public DataBase(String dbType,String db){\r\n        this(dbType,\"127.0.0.1\",\"3306\",db);\r\n    }\r\n    public DataBase(String dbType,String ip,String port,String db){\r\n        this.dbType = dbType;\r\n        if (\"MYSQL\".endsWith(dbType.toUpperCase())){\r\n            this.driver = \"com.mysql.jdbc.Driver\";\r\n            this.url = mysqlUrl.replace(\"[ip]\",ip).replace(\"[port]\",port).replace(\"[db]\",db);\r\n        }else {\r\n            this.driver = \"oracle.jdbc.driver.OracleDriver\";\r\n            this.url = mysqlUrl.replace(\"[ip]\",ip).replace(\"[port]\",port).replace(\"[db]\",db);\r\n        }\r\n    }\r\n}\r\n","fileName":"DataBase.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\java\\com\\lsc\\freemarker\\entity\\DataBase.java"},{"content":"package com.lsc.freemarker.entity;\r\n\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: com.lsc.freemarker.entity\r\n * @date 2022/10/12 18:34\r\n */\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\n@Data\r\npublic class FieldBean {\r\n    /**\r\n     * 属性类型\r\n     */\r\n    private String fieldType;\r\n    /**\r\n     * 属性名\r\n     */\r\n    private String fieldName;\r\n    /**\r\n     * 属性全路径\r\n     */\r\n    private String fieldPathAndName;\r\n}\r\n","fileName":"FieldBean.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\java\\com\\lsc\\freemarker\\entity\\FieldBean.java"},{"content":"package com.lsc.freemarker.entity;\r\n\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Builder;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\n\r\nimport java.util.List;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: com.lsc.freemarker.entity\r\n * @date 2022/10/9 11:03\r\n */\r\n@Data\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\n@Builder\r\npublic class FreeMarkerDataBean {\r\n\r\n    /**\r\n     * 全类名只要类名\r\n     * com.lsc.freemarker.entity.FreeMarkerDataBean\r\n     * FreeMarkerDataBean\r\n     */\r\n    private String className;\r\n\r\n    /**\r\n     * 全类名不要类名\r\n     * com.lsc.freemarker.entity.FreeMarkerDataBean\r\n     * com.lsc.freemarker.entity\r\n     */\r\n    private String classPath;\r\n    /**\r\n     * 属性类型\r\n     */\r\n    private List<FieldBean> fieldBeanList;\r\n\r\n    /**\r\n     * 方法\r\n     */\r\n    private List<MethodBean> methodBeanList;\r\n}\r\n","fileName":"FreeMarkerDataBean.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\java\\com\\lsc\\freemarker\\entity\\FreeMarkerDataBean.java"},{"content":"package com.lsc.freemarker.entity;\r\n\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Builder;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\n\r\nimport java.util.List;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: com.lsc.freemarker.entity\r\n * @date 2022/10/9 11:12\r\n */\r\n@Data\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\n@Builder\r\npublic class MethodBean {\r\n    /**.\r\n     * 方法名\r\n     */\r\n    private String methodName;\r\n\r\n    /**\r\n     * 方法返回值类型\r\n     */\r\n    private List<FieldBean> methodResponseType;\r\n\r\n    /**\r\n     * 方法入参类型\r\n     */\r\n    private List<FieldBean> methodRequestType;\r\n}\r\n","fileName":"MethodBean.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\java\\com\\lsc\\freemarker\\entity\\MethodBean.java"},{"content":"package com.lsc.freemarker.entity;\r\n\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Builder;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\n\r\nimport java.io.Serializable;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: com.lsc.freemarker.entity\r\n * @date 2022/11/11 17:06\r\n */\r\n@Data\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\n@Builder\r\npublic class MockResult <T> implements Serializable {\r\n\r\n    /**\r\n     * 结果标识\r\n     */\r\n    private String code;\r\n    /**\r\n     * 接口成败标识\r\n     */\r\n    private boolean success;\r\n    /**\r\n     * 错误信息\r\n     */\r\n    private String errorMessage;\r\n\r\n    /**\r\n     * 返回的数据\r\n     */\r\n    private T data;\r\n\r\n    /**\r\n     * 获取默认的success result\r\n     *\r\n     * @param data 数据\r\n     * @param <T>  data范型\r\n     * @return success result\r\n     */\r\n    public static <T> MockResult<T> buildSuccessResult(T data) {\r\n        MockResult<T> result = new MockResult<>();\r\n        result.setSuccess(true);\r\n        result.setData(data);\r\n\r\n        return result;\r\n    }\r\n\r\n    public static <T> MockResult<T> processBaseResult(T data) {\r\n        MockResult<T> result = new MockResult<>();\r\n        result.setSuccess(true);\r\n        result.setData(data);\r\n        return result;\r\n    }\r\n}\r\n","fileName":"MockResult.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\java\\com\\lsc\\freemarker\\entity\\MockResult.java"},{"content":"package com.lsc.freemarker.entity;\r\n\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Builder;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\n\r\nimport java.util.List;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: com.lsc.freemarker.entity\r\n * @date 2022/11/14 11:07\r\n */\r\n\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\n@Data\r\n@Builder\r\npublic class SetMethodBean {\r\n\r\n    private String className;\r\n\r\n    private List<String> methodsName;\r\n}\r\n","fileName":"SetMethodBean.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\java\\com\\lsc\\freemarker\\entity\\SetMethodBean.java"},{"content":"package com.lsc.freemarker.entity;\r\n\r\nimport lombok.Data;\r\n\r\nimport java.lang.reflect.Field;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\n/**\r\n * Created by lisc on 2021/12/19\r\n */\r\n@Data\r\npublic class Settings {\r\n    private String project = \"example\";\r\n    private String pPackage = \"com.example.demo\";\r\n    // 项目描述信息\r\n    private String projectComment;\r\n    private String author;\r\n    private String path1 = \"com\";\r\n    private String path2 = \"example\";\r\n    private String path3 = \"demo\";\r\n    private String pathAll;\r\n\r\n    public Settings(String project, String pPackage, String projectComment, String author) {\r\n        this.project = project;\r\n        this.pPackage = pPackage;\r\n        this.projectComment = projectComment;\r\n        this.author = author;\r\n    }\r\n\r\n    public Map<String,Object> getSettingMap(){\r\n        HashMap<String, Object> map = new HashMap<>();\r\n        Field[] declaredFields = Settings.class.getDeclaredFields();\r\n        for (Field field : declaredFields) {\r\n            field.setAccessible(true);\r\n            try {\r\n                map.put(field.getName(),field.get(this));\r\n            } catch (IllegalAccessException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n        return map;\r\n    }\r\n}\r\n","fileName":"Settings.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\java\\com\\lsc\\freemarker\\entity\\Settings.java"},{"content":"package com.lsc.freemarker.entity;\r\n\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Builder;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\n\r\nimport java.util.List;\r\n\r\n/**\r\n * Created by lisc on 2021/12/19\r\n */\r\n\r\n@Data\r\npublic class Table {\r\n    // 数据库表名\r\n    private String databaseTableName;\r\n    // 处理后的表名\r\n    private String javaTableName;\r\n    // 描述\r\n    private String comment;\r\n    // 主键列\r\n    private String key;\r\n    // 列集合\r\n    private List<Column> columns;\r\n}\r\n","fileName":"Table.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\java\\com\\lsc\\freemarker\\entity\\Table.java"},{"content":"package com.lsc.freemarker.enums;\r\n\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Getter;\r\n\r\nimport java.util.Arrays;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: 方法结果枚举\r\n * @date 2022/11/7 18:05\r\n */\r\n@AllArgsConstructor\r\n@Getter\r\npublic enum ResultCodeEnum {\r\n    SUCCESS(\"1\",true,\"执行成功\"),\r\n\r\n    FAILURE(\"0\",false,\"执行失败\")\r\n    ;\r\n\r\n\r\n    private String code;\r\n\r\n    private Boolean success;\r\n\r\n    private String desc;\r\n\r\n    public static ResultCodeEnum getByCode(String code) {\r\n        return Arrays.stream(ResultCodeEnum.values()).filter(value -> value.getCode().equals(code)).findFirst()\r\n                .orElse(null);\r\n    }\r\n\r\n}\r\n","fileName":"ResultCodeEnum.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\java\\com\\lsc\\freemarker\\enums\\ResultCodeEnum.java"},{"content":"package com.lsc.freemarker.enums;\r\n\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Getter;\r\n\r\nimport java.util.Arrays;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: com.lsc.freemarker.enums\r\n * 生成代码结果路径枚举\r\n * @date 2022/11/11 11:18\r\n */\r\n\r\n@Getter\r\n@AllArgsConstructor\r\npublic enum ResultOutPathEnum {\r\n    /**\r\n     * 数据库sql生成路径\r\n     */\r\n    TABLE_RESULT_PATH(\"D:\\\\Code\\\\TestCode\\\\newzhongchou\\\\Freemarker-utils\\\\src\\\\main\\\\resources\\\\FreeMarkerFile\\\\SpannedFile\\\\table\",\"数据库sql生成文件输出路径\"),\r\n    /**\r\n     * set方法生成路径\r\n     */\r\n    SET_METHOD_PATH(\"D:\\\\Code\\\\TestCode\\\\newzhongchou\\\\Freemarker-utils\\\\src\\\\main\\\\resources\\\\FreeMarkerFile\\\\SpannedFile\\\\set\",\"set方法文件生成路径\"),\r\n\r\n    /**\r\n     * mock代码生成路径\r\n     */\r\n    MOCK_RESULT_PATH(\"D:\\\\Code\\\\TestCode\\\\newzhongchou\\\\Freemarker-utils\\\\src\\\\main\\\\resources\\\\FreeMarkerFile\\\\SpannedFile\\\\mock\\\\\",\"Mock代码生成路径\"),\r\n\r\n\r\n\r\n    ;\r\n    /**\r\n     * 路径\r\n     */\r\n    private String path;\r\n\r\n    /**\r\n     * 描述\r\n     */\r\n    private String desc;\r\n\r\n\r\n    public static ResultCodeEnum getByCode(String code) {\r\n        return Arrays.stream(ResultCodeEnum.values()).filter(value -> value.getCode().equals(code)).findFirst()\r\n                .orElse(null);\r\n    }\r\n\r\n\r\n}\r\n","fileName":"ResultOutPathEnum.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\java\\com\\lsc\\freemarker\\enums\\ResultOutPathEnum.java"},{"content":"package com.lsc.freemarker.enums;\r\n\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Getter;\r\n\r\nimport java.util.Arrays;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: com.lsc.freemarker.enums\r\n * 模板路径枚举\r\n * @date 2022/11/11 11:18\r\n */\r\n@AllArgsConstructor\r\n@Getter\r\npublic enum TemplatePathEnum {\r\n    TABLE_SQL_XML(\"D:\\\\Code\\\\TestCode\\\\newzhongchou\\\\Freemarker-utils\\\\src\\\\main\\\\resources\\\\FreeMarkerFile\\\\dataBaseTemplates\",\"数据库sql生成路径\"),\r\n    SET_METHOD_PATH(\"D:\\\\Code\\\\TestCode\\\\newzhongchou\\\\Freemarker-utils\\\\src\\\\main\\\\resources\\\\FreeMarkerFile\\\\CodeTemplates\\\\setMethod\",\"set方法模板路径\"),\r\n    MOCK_TEMPLATE_PATH(\"D:\\\\Code\\\\TestCode\\\\newzhongchou\\\\Freemarker-utils\\\\src\\\\main\\\\resources\\\\FreeMarkerFile\\\\mock-templates\",\"MOCK代码的模板\"),\r\n\r\n    ;\r\n    private String path;\r\n\r\n    private String desc;\r\n\r\n    public static ResultCodeEnum getByCode(String code) {\r\n        return Arrays.stream(ResultCodeEnum.values()).filter(value -> value.getCode().equals(code)).findFirst()\r\n                .orElse(null);\r\n    }\r\n}\r\n","fileName":"TemplatePathEnum.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\java\\com\\lsc\\freemarker\\enums\\TemplatePathEnum.java"},{"content":"package com.lsc.freemarker.facade;\r\n\r\nimport com.lsc.freemarker.base.FreeMarkerDataModel;\r\nimport com.lsc.freemarker.base.FreeMarkerServiceTemplate;\r\nimport com.lsc.freemarker.core.CustomClassLoader;\r\nimport com.lsc.freemarker.core.DataBaseTableToJava;\r\nimport com.lsc.freemarker.core.FreeMarkerGenerator;\r\nimport com.lsc.freemarker.entity.FreeMarkerDataBean;\r\nimport com.lsc.freemarker.entity.MockResult;\r\nimport com.lsc.freemarker.entity.SetMethodBean;\r\nimport com.lsc.freemarker.enums.ResultOutPathEnum;\r\nimport com.lsc.freemarker.enums.TemplatePathEnum;\r\nimport com.lsc.freemarker.utils.ReflectionUtil;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.junit.Test;\r\n\r\nimport java.lang.reflect.Field;\r\nimport java.lang.reflect.Method;\r\nimport java.text.DateFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: 聚合所有mock代码\r\n * @date 2022/11/11 17:05\r\n */\r\n@Slf4j\r\npublic class FreeMarkerCodeFacade {\r\n\r\n    /**\r\n     * 数据库相关的moke功能\r\n     */\r\n    private DataBaseTableToJava dataBaseTableToJava;\r\n\r\n    /**\r\n     * mock模板\r\n     */\r\n    private FreeMarkerServiceTemplate freeMarkerServiceTemplate;\r\n\r\n    /**\r\n     * mock代码实现\r\n     */\r\n    private FreeMarkerGenerator freeMarkerGenerator;\r\n\r\n    /**\r\n     * 根据表名获取数据库内表内的列\r\n     *\r\n     * @param tableName\r\n     * @return\r\n     */\r\n    public MockResult<Boolean> tableSqlCodeGeneration(String tableName) {\r\n\r\n        boolean sqlCodeGeneration = dataBaseTableToJava.tableSqlCodeGeneration(tableName);\r\n\r\n        return MockResult.buildSuccessResult(sqlCodeGeneration);\r\n    }\r\n\r\n\r\n    /**\r\n     * 根据传入的全类名 获取该ben的set方法\r\n     *\r\n     * @param beanName\r\n     * @return\r\n     */\r\n    public MockResult<Boolean> setMethodCodeGeneration(String beanName) {\r\n        ClassLoader classLoader = new CustomClassLoader();\r\n\r\n        MockResult result = new MockResult();\r\n\r\n        freeMarkerServiceTemplate.execute(result, TemplatePathEnum.SET_METHOD_PATH, ResultOutPathEnum.SET_METHOD_PATH, new FreeMarkerDataModel<SetMethodBean>() {\r\n            @Override\r\n            public SetMethodBean buildModelData() throws Exception {\r\n                Class<?> aClass = classLoader.loadClass(beanName);\r\n                List<Field> fieldList = ReflectionUtil.getDeclaredFields(aClass);\r\n\r\n                ArrayList<Method> methods = new ArrayList<>();\r\n                for (Field field : fieldList) {\r\n                    Method method = ReflectionUtil.getObjectSetMethod(aClass, field);\r\n                    if (null != method) {\r\n                        methods.add(method);\r\n                    }\r\n                }\r\n                log.info(\"set方法执行完毕\");\r\n                List<String> methodList = methods.stream().map(Method::getName).collect(Collectors.toList());\r\n                return SetMethodBean.builder().className(aClass.getSimpleName()).methodsName(methodList).build();\r\n\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n    /**\r\n     * mock代码生成\r\n     *\r\n     * @param className 需要生产mock代码的类的全路径\r\n     * @return\r\n     */\r\n    public MockResult<Boolean> mockCodeGeneration(String className) {\r\n        MockResult result = new MockResult();\r\n        freeMarkerServiceTemplate.execute(result, TemplatePathEnum.MOCK_TEMPLATE_PATH, ResultOutPathEnum.MOCK_RESULT_PATH, new FreeMarkerDataModel() {\r\n            @Override\r\n            public Object buildModelData() throws Exception {\r\n\r\n                FreeMarkerDataBean mockResult = freeMarkerGenerator.classPathCreateMock(className, ResultOutPathEnum.MOCK_RESULT_PATH.getPath());\r\n                return mockResult;\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n    @Test\r\n    public void test(){\r\n        MockResult<Boolean> result = mockCodeGeneration(\"com.ipay.ibizecoprod.biz.asynctask.taskschedule.IbepCommonTaskRecordExecuter\");\r\n       // MockResult<Boolean> result = mockCodeGeneration(\"com.ipay.ibizecoprod.core.service.commonTask.impl.CommonTaskRecordServiceImpl\");\r\n        System.out.println(\"result = \" + result);\r\n    }\r\n}\r\n","fileName":"FreeMarkerCodeFacade.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\java\\com\\lsc\\freemarker\\facade\\FreeMarkerCodeFacade.java"},{"content":"package com.lsc.freemarker.utils;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: com.lsc.freemarker.utils\r\n * @date 2022/10/27 18:16\r\n */\r\npublic class Constants {\r\n\r\n    public static class LogType {\r\n        public static final int Empty = 0;//默认为0\r\n        public static final int Insert = 1;//插入操作日志\r\n        public static final int Update = 2;//更新操作日志\r\n    }\r\n\r\n}\r\n","fileName":"Constants.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\java\\com\\lsc\\freemarker\\utils\\Constants.java"},{"content":"package com.lsc.freemarker.utils;\r\n\r\nimport com.alibaba.fastjson.JSONObject;\r\nimport com.alibaba.fastjson.serializer.SerializerFeature;\r\nimport lombok.extern.log4j.Log4j;\r\nimport lombok.extern.slf4j.Slf4j;\r\n\r\nimport java.io.*;\r\nimport java.net.CookieHandler;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * Created by lisc on 2021/12/19\r\n */\r\n@Slf4j\r\npublic class FileUtils {\r\n    // 得到相对路径\r\n    public static String getRelativePath(File baseDir, File file) {\r\n        if (baseDir.equals(file)) {\r\n            return \"\";\r\n        }\r\n        if (baseDir.getParentFile() == null) {\r\n            return file.getAbsolutePath().substring(baseDir.getAbsolutePath().length());\r\n        }\r\n        return file.getAbsolutePath().substring(baseDir.getAbsolutePath().length() + 1);\r\n    }\r\n\r\n    // 查询某个目录下所有的文件\r\n    public static List<File> searchAllFile(File dir) {\r\n        ArrayList arrayList = new ArrayList<>();\r\n        searchFiles(dir, arrayList);\r\n        return arrayList;\r\n    }\r\n\r\n    // 查询某个目录下所有的jar文件\r\n    public static List<File> searchAllJarFile(File dir) {\r\n        log.info(\"searchAllJarFile start\");\r\n        ArrayList arrayList = new ArrayList<>();\r\n        searchJarFiles(dir, arrayList);\r\n        return arrayList;\r\n    }\r\n\r\n    // 递归获取某个目录下所有文件\r\n    private static void searchFiles(File dir, ArrayList<Object> collector) {\r\n        // isDirectory() 判断当前是否是目录\r\n        if (dir.isDirectory()) {\r\n            File[] subFiles = dir.listFiles();\r\n            for (int i = 0; i < subFiles.length; i++) {\r\n                searchFiles(subFiles[i], collector);\r\n            }\r\n        } else {\r\n            collector.add(dir);\r\n        }\r\n    }\r\n\r\n    // 递归获取某个目录下所有jar文件\r\n    private static void searchJarFiles(File dir, ArrayList<Object> collector) {\r\n        // isDirectory() 判断当前是否是目录\r\n        if (dir.isDirectory()) {\r\n            File[] subFiles = dir.listFiles();\r\n            for (int i = 0; i < subFiles.length; i++) {\r\n                searchJarFiles(subFiles[i], collector);\r\n            }\r\n        } else {\r\n            // 只扫描jar包\r\n            String path = dir.getPath();\r\n            if (path.endsWith(\".jar\")&& !path.contains(\"sources\")) {\r\n                collector.add(dir);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // 创建文件\r\n    public static File mkdir(String dir, String file) throws IllegalAccessException {\r\n        if (dir == null) {\r\n            throw new IllegalAccessException(\"dir must be not null\");\r\n        }\r\n        File result = new File(dir, file);\r\n        // getParentFile() 判断它是否有上一级目录\r\n        if (result.getParentFile() != null) {\r\n            // mkdir() 已该路径创建目录\r\n            result.getParentFile().mkdir();\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * 输出文件到指定目录\r\n     * @param filePath 文件目录\r\n     * @param fileName 文件名\r\n     * @param content 文件内容\r\n     */\r\n    public static void fileWrite(String filePath,String fileName,String content) {\r\n        File file = new File(filePath,fileName);\r\n        BufferedWriter bufferedWriter = null;\r\n        try {\r\n            // 如果文件不存在创建文件\r\n            if (!file.exists()) {\r\n                // 先创建目录\r\n                file.getParentFile().mkdirs();\r\n                // 在创建文件\r\n                file.createNewFile();\r\n            }\r\n            bufferedWriter = new BufferedWriter(new FileWriter(file));\r\n            bufferedWriter.write(content);\r\n\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }finally {\r\n            try {\r\n                bufferedWriter.flush();\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n            try {\r\n                bufferedWriter.close();\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 读取文件转换为字节码\r\n     * @param classPath\r\n     * @return\r\n     */\r\n    public byte[] loadClazz(String classPath) {\r\n        try {\r\n            log.info(\"loadClazz方法执行: classPath: {}\", classPath);\r\n            FileInputStream in = new FileInputStream(new File(classPath));\r\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n            int b;\r\n            while ((b = in.read()) != -1) {\r\n                baos.write(b);\r\n            }\r\n            in.close();\r\n            return baos.toByteArray();\r\n        } catch (Exception e) {\r\n            log.error(\"loadClazz方法执行异常\",e);\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n}\r\n","fileName":"FileUtils.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\java\\com\\lsc\\freemarker\\utils\\FileUtils.java"},{"content":"package com.lsc.freemarker.utils;\r\n\r\nimport freemarker.cache.FileTemplateLoader;\r\nimport freemarker.template.Configuration;\r\nimport freemarker.template.Template;\r\n\r\nimport java.io.File;\r\nimport java.io.PrintWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\n\r\n/**\r\n * @Description: FreeMarkerDemo\r\n * @Author: lisc\r\n * @date: 2022/5/4\r\n */\r\npublic class FreemarkerUtils {\r\n\r\n\r\n\r\n    public void FileTemplateLoader(String filePath) throws Exception {\r\n        // 1 创建FreeMarker的配置类\r\n        Configuration cfg = new Configuration(Configuration.DEFAULT_INCOMPATIBLE_IMPROVEMENTS);\r\n\r\n        // 2 制定模版加载器: 将模版存入缓存中\r\n        // ClassTemplateLoader() 类路径\r\n        // FileTemplateLoader() 文件路径加载器\r\n        // StringTemplateLoader() 文本\r\n        // URLTemplateLoader() url路径\r\n        // WebappTemplateLoader web应用程序下\r\n        FileTemplateLoader ftl = new FileTemplateLoader(new File(filePath));\r\n        // 设置模版\r\n        cfg.setTemplateLoader(ftl);\r\n\r\n        // 3 获取模版\r\n        Template template = cfg.getTemplate(\"template01.ftl\");\r\n        // 4 构造数据模型  map的key就是模版内占位符的key\r\n        HashMap<String, Object> dateModel = new HashMap<>();\r\n        dateModel.put(\"username\", \"何以解忧\");\r\n        // 测试if指令\r\n        dateModel.put(\"flag\", 1);\r\n        // 测试list指令\r\n        ArrayList<String> list = new ArrayList<>();\r\n        list.add(\"星期一\");\r\n        list.add(\"星期二\");\r\n        list.add(\"星期三\");\r\n        list.add(\"星期四\");\r\n        list.add(\"星期五\");\r\n        dateModel.put(\"weeks\", list);\r\n\r\n\r\n\r\n        // 5 文件输出\r\n        /**\r\n         * 文件输出 也叫处理模型\r\n         *      参数一: 数据模型\r\n         *      参数二: writer(FileWriter(文件输出), printWriter(控制台输出) )\r\n         */\r\n        // 指定文件输出位置\r\n        /*template.process(dateModel,new FileWriter(\r\n                // 文件输出的位置\r\n                new File(\"E:\\\\TestCodeDome\\\\FreeMarkerUtils\\\\freemarker-template\\\\templates\\\\outtemplates\\\\a.txt\")));\r\n*/\r\n        // 指定输出到控制台\r\n        template.process(dateModel, new PrintWriter(System.out));\r\n\r\n    }\r\n}\r\n","fileName":"FreemarkerUtils.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\java\\com\\lsc\\freemarker\\utils\\FreemarkerUtils.java"},{"content":"package com.lsc.freemarker.utils;\r\n\r\nimport com.alibaba.fastjson.JSONObject;\r\nimport com.alibaba.fastjson.serializer.SerializerFeature;\r\nimport com.lsc.bean.MockAttributeBean;\r\nimport com.lsc.bean.MockClassBean;\r\nimport com.lsc.bean.MockMethodBean;\r\nimport com.lsc.freemarker.core.CustomClassLoader;\r\nimport lombok.NoArgsConstructor;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.springframework.util.Assert;\r\n\r\nimport java.io.File;\r\nimport java.lang.reflect.Field;\r\nimport java.lang.reflect.Method;\r\nimport java.lang.reflect.Parameter;\r\nimport java.net.URL;\r\nimport java.net.URLClassLoader;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\n/**\r\n * @Description: 类加载器工具类 主要用于反射\r\n * @Author: lisc\r\n * @date: 2022/5/9\r\n */\r\n@NoArgsConstructor\r\n@Slf4j\r\npublic class JarLoaderUtils {\r\n\r\n\r\n    /**\r\n     * 根据jar包路径,加载路径下所有的jar包,根据指定的class名 获取反射的class对象\r\n     *\r\n     * @param jarPath       jar包路径\r\n     * @param classNamePath 要反射的class全路径\r\n     * @return\r\n     */\r\n    public static Class<?> getClassObject(String jarPath, String classNamePath) {\r\n        Class<?> loadClass = null;\r\n        try {\r\n            log.info(\"加载jar包: jarPath:{} classNamePath:{}\",jarPath,classNamePath);\r\n            if (classNamePath.contains(\"/\")){\r\n                classNamePath = classNamePath.replace('/', '.');\r\n            }\r\n            File file = new File(jarPath);\r\n\r\n            Assert.isTrue(file.exists(),\"当前路径不存在\");\r\n            // 递归遍历路径下的jar包\r\n            List<File> files = FileUtils.searchAllJarFile(file);\r\n            // 过滤掉重复的jar\r\n            ArrayList<File> filterDuplicateJar = filterDuplicateJar(files);\r\n            // 调用addurl方法,把jar包加载到jvm中\r\n            filterDuplicateJar.forEach(JarLoaderUtils::addUrl);\r\n\r\n            CustomClassLoader loader = new CustomClassLoader();\r\n\r\n            // todo 此处有bug 如果查找一个不存在的class 会一直循环\r\n           // loadClass = loader.loadClass(classNamePath);\r\n            loadClass = loader.getParent().loadClass(classNamePath);\r\n\r\n        } catch (ClassNotFoundException e) {\r\n            log.error(\"JarLoaderUtils:getClassObject 发生异常:\",e);\r\n        }\r\n        return loadClass;\r\n    }\r\n\r\n    /**\r\n     * 获取类所有属性和方法\r\n     * @param classNamePath 类路径\r\n     * @param outPath json文本输出路径\r\n     * @param aClass 反射的类\r\n     * @return\r\n     */\r\n    public static MockClassBean buildSourceData(String classNamePath, String outPath, Class<?> aClass) {\r\n\r\n        // 全类名\r\n        String classPathName = aClass.getName();\r\n        int lastIndexOf = classNamePath.lastIndexOf('.');\r\n        // 类名\r\n        String className = classNamePath.substring(lastIndexOf + 1);\r\n        // 包名\r\n        String packageName = classNamePath.substring(0, lastIndexOf);\r\n\r\n\r\n        // 得到类下所有属性\r\n        Field[] declaredFields = aClass.getDeclaredFields();\r\n        ArrayList<MockAttributeBean> fieldList = new ArrayList<>();\r\n        log.info(\"获取当前类的所有属性:start\");\r\n        for (Field field : declaredFields) {\r\n            // 设置属性可访问\r\n            field.setAccessible(true);\r\n            MockAttributeBean mockAttributeBean = MockAttributeBean.builder()\r\n                    // 属性名\r\n                    .attributeName(field.getName())\r\n                    // 属性类型\r\n                    .attributeType(field.getType().getSimpleName())\r\n                    .build();\r\n            fieldList.add(mockAttributeBean);\r\n        }\r\n\r\n        log.info(\"获取当前类的所有方法:start\");\r\n\r\n        ArrayList<MockMethodBean> methodList = new ArrayList<>();\r\n        // 得到类下所有方法 不包括继承的\r\n        for (Method method : aClass.getDeclaredMethods()) {\r\n\r\n            ArrayList<String> paraName = new ArrayList<>();\r\n            ArrayList<String> paraType = new ArrayList<>();\r\n            // 方法内参数\r\n            Parameter[] parameters = method.getParameters();\r\n            for (Parameter parameter : parameters) {\r\n                // 参数名\r\n                paraName.add(StringBuildUtils.buildLowerCaseStr(parameter.getType().getSimpleName()));\r\n                // 参数类型\r\n                paraType.add(parameter.getType().getSimpleName());\r\n            }\r\n\r\n\r\n            MockMethodBean mockMethodBean = MockMethodBean.builder().methodName(method.getName())  // 方法名\r\n                    .parameterType(paraType) // 参数类型\r\n                    .parameterName(paraName) // 参数名\r\n                    .returnType(method.getReturnType().getSimpleName())  // 方法返回类型\r\n                    .build();\r\n            methodList.add(mockMethodBean);\r\n\r\n            Class<?>[] parameterTypes = method.getParameterTypes();\r\n            for (Class<?> parameterType : parameterTypes) {\r\n                // 判断当前参数是否是基本类型\r\n                if (!JarLoaderUtils.isWrapClass(parameterType)) {\r\n                    // 把方法入参生成json文件到指定目录下\r\n                    JarLoaderUtils.CreationJsonText(parameterType, outPath);\r\n                }\r\n            }\r\n        }\r\n        return MockClassBean.builder().className(className).packageName(packageName).pack(classPathName)\r\n                .attribute(fieldList)\r\n                .methodBeansList(methodList)\r\n                .build();\r\n    }\r\n\r\n    /**\r\n     * 功能描述: 添加需要扫描的jar包\r\n     *\r\n     * @param jarPath\r\n     * @return:void\r\n     * @since: v1.0\r\n     * @Author:wangcanfeng\r\n     * @Date: 2019/9/12-15:21\r\n     */\r\n    private static void addUrl(File jarPath) {\r\n        // URLClassLoader 该类加载器用于从指向 JAR 文件和目录的 URL 的搜索路径加载类和资源。这里假定任何以 '/' 结束的 URL 都是指向目录的。如果不是以该字符结束，则认为该 URL 指向一个将根据需要打开的 JAR 文件。\r\n        try {\r\n            // 获取委托的系统类加载器\r\n            URLClassLoader classLoader = (URLClassLoader) ClassLoader.getSystemClassLoader();\r\n            // 反射获取类加载器中的addURL方法，并将需要加载类的jar路径 反射获取URL.class类的addURL()方法\r\n            Method method = URLClassLoader.class.getDeclaredMethod(\"addURL\", URL.class);\r\n\r\n            // 反射访问属性或方法时将Accessible设置为true\r\n            if (!method.isAccessible()) {\r\n                method.setAccessible(true);\r\n            }\r\n            // 把文件路径转为URL对象\r\n            URL url = jarPath.toURI().toURL();\r\n            // 把当前jar的路径加入到类加载器需要扫描的路径\r\n            method.invoke(classLoader, url);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 生成json文件\r\n     *\r\n     * @param clazz\r\n     */\r\n    public static void CreationJsonText(Class<?> clazz, String outPath) {\r\n        // 判断是否是一个接口\r\n        if (clazz.isInterface()) {\r\n            log.info(\"className:{} 该文件是一个接口,生成json文件失败\", clazz.getName());\r\n            return;\r\n        }\r\n        try {\r\n            Object instance = clazz.newInstance();\r\n            String content = JSONObject.toJSONString(instance, SerializerFeature.PrettyFormat, SerializerFeature.WriteMapNullValue);\r\n            FileUtils.fileWrite(outPath, clazz.getSimpleName()+\".json\", content);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 判断当前类型是否是基本类型 或 包装类型 或String\r\n     * 如果非以上类型的话,会报错, catch里会返回false;\r\n     * @param clazz\r\n     * @return\r\n     */\r\n    public static boolean isWrapClass(Class clazz) {\r\n        try {\r\n            if (clazz.equals(String.class) || clazz.isPrimitive()) {\r\n                System.out.println(clazz.getName() + \"当前是基本类型\");\r\n                return true;\r\n            }\r\n            return ((Class) clazz.getField(\"TYPE\").get(null)).isPrimitive();\r\n        } catch (Exception e) {\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 过滤重复jar包\r\n     * 相同的jar包,取更新时间最近的那个\r\n     * @param files1\r\n     * @return\r\n     */\r\n    public static ArrayList<File> filterDuplicateJar(List<File> files1) {\r\n\r\n        HashMap<String, File> hashMap = new HashMap<>();\r\n\r\n        for (int i = 0; i < files1.size(); i++) {\r\n            // 当前jar文件\r\n            File currentFile = files1.get(i);\r\n            // jar文件名,不要后面的\r\n            String currentFileName = currentFile.getName().substring(0, currentFile.getName().indexOf(\".\"));\r\n\r\n            // 如果不存在,直接put,并且返回null , 如果存在,不put, 返回的是存在的对象\r\n            File file1 = hashMap.putIfAbsent(currentFileName, currentFile);\r\n\r\n            // 当前jar包已存在\r\n            if (file1 != null) {\r\n                // 当前的文件修改时间大于 已存在的文件, 就替换掉, 否则不动\r\n                if (currentFile.lastModified() > file1.lastModified()) {\r\n                    hashMap.put(currentFileName,currentFile);\r\n                }\r\n            }\r\n        }\r\n\r\n        return new ArrayList<>(hashMap.values());\r\n    }\r\n}\r\n\r\n","fileName":"JarLoaderUtils.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\java\\com\\lsc\\freemarker\\utils\\JarLoaderUtils.java"},{"content":"package com.lsc.freemarker.utils;\r\n\r\nimport com.alibaba.fastjson.JSON;\r\nimport org.aspectj.lang.JoinPoint;\r\nimport org.aspectj.lang.ProceedingJoinPoint;\r\nimport org.aspectj.lang.annotation.*;\r\nimport org.aspectj.lang.reflect.MethodSignature;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport java.lang.reflect.Method;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: 切入点文档: https://blog.csdn.net/weixin_43611145/article/details/102728814\r\n * apo 切面介绍文档: https://blog.csdn.net/weixin_43611145/article/details/89084019\r\n * @date 2022/10/27 17:52\r\n */\r\n@Component\r\n@Aspect\r\npublic class LogAop {\r\n    public Logger log = LoggerFactory.getLogger(this.getClass());\r\n    /**\r\n     * 切入点\r\n     * execution(<修饰符模式>?<返回类型模式><方法名模式>(<参数模式>)<异常模式>?)\r\n     */\r\n    @Pointcut(\"execution(* com.lsc..*(..))\")\r\n    public void ponitCut() {\r\n\r\n    }\r\n\r\n    /**\r\n     * 异常通知，在目标方法抛出异常之后执行，意味着如果此通知被执行，则@AfterReturning不会被执行。\r\n     * 此注解有一个throwing属性，使用了命名绑定模式(下文有介绍)，定义异常类型并接收异常对象。\r\n     * 注意：\r\n     * 1、如果目标方法自己try- catch了异常，而没有继续往外抛，则不会进入此通知。\r\n     * 2、@AfterThrowing虽然处理异常，但它不会阻止异常传播到上一级调用者，如果没有catch，则会导致jvm终止。\r\n     * @param e\r\n     */\r\n    @AfterThrowing(throwing = \"e\",pointcut=\"ponitCut()\")\r\n    public void exceptionAdvice(JoinPoint jp, Throwable e) {\r\n        System.out.println(\"异常通知\" + e);\r\n    }\r\n    /**\r\n     * 标注了@SystemLog 这个注解都会拦截\r\n     */\r\n    @Pointcut(\"@annotation(SystemLog)\")\r\n    public void ponitCutAnnotation() {\r\n\r\n    }\r\n\r\n    /**\r\n     * 满足 ponitCutAnnotation() 方法和 ponitCut() 这个方法的切入点都会拦截\r\n     */\r\n    @Pointcut(\"ponitCutAnnotation() || ponitCut()\")\r\n    public void collectPointcut() {\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @Before(\"ponitCut()\") 基于ponitCut()的切入点 进行前置通知\r\n     */\r\n    @Before(\"ponitCut()\")\r\n    public void beforeAdvice() {\r\n        System.out.println(\"前置通知: beforeAdvice\");\r\n    }\r\n\r\n    @After(\"ponitCut()\")\r\n    public void afterAdvice() {\r\n        System.out.println(\"后置通知: afterAdvice\");\r\n    }\r\n\r\n\r\n    //环绕通知。注意要有ProceedingJoinPoint参数传入\r\n    @Around(\"collectPointcut()\")\r\n    public void around(ProceedingJoinPoint pjp) throws Throwable {\r\n        System.out.println(\"注解类型环绕通知..环绕前\");\r\n\r\n\r\n        pjp.proceed();//执行方法\r\n        // 当前拦截的对象\r\n        Class<?> currentClass = pjp.getTarget().getClass();\r\n        //获取拦截类\r\n        String className = currentClass.getName();\r\n\r\n        //获取拦截的方法名\r\n        MethodSignature msig = (MethodSignature) pjp.getSignature();\r\n\r\n        Method currentMethod = currentClass.getMethod(msig.getName(), msig.getParameterTypes());\r\n        String methodName = currentMethod.getName();\r\n\r\n\r\n        //获取拦截方法的参数\r\n        Object[] params = pjp.getArgs();\r\n        String param = JSON.toJSONString(params);\r\n        System.out.println(\"拦截方法的入参参数为：\" + param);\r\n\r\n        //获取注解\r\n        SystemLog annotation = currentMethod.getAnnotation(SystemLog.class);\r\n        System.out.println(\"拦截方法注解上LogType值为：\" + annotation.LogType());\r\n\r\n        log.info(\"AOP切面: {}.{}({})\",className,methodName,param);\r\n\r\n        System.out.println(\"注解类型环绕通知..环绕后\");\r\n    }\r\n}\r\n","fileName":"LogAop.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\java\\com\\lsc\\freemarker\\utils\\LogAop.java"},{"content":"package com.lsc.freemarker.utils;\r\n\r\n\r\nimport java.util.function.Function;\r\n\r\n/**\r\n * @author: yuchao\r\n * @description:三目运算\r\n * @date: 2022-07-18 11:26:01\r\n */\r\npublic final class OptionalUtil {\r\n    /**\r\n     * 三目\r\n     *\r\n     * @param bol\r\n     * @param trueValue\r\n     * @param falseValue\r\n     * @param <T>\r\n     * @return\r\n     */\r\n    public static <T> T ofBoolean(Boolean bol, T trueValue, T falseValue) {\r\n        return bol != null && bol ? trueValue : falseValue;\r\n    }\r\n    \r\n    /**\r\n     * 三目,传递\r\n     *\r\n     * @param bol\r\n     * @param t\r\n     * @param trueApply\r\n     * @param falseApply\r\n     * @param <T>\r\n     * @param <R>\r\n     * @return\r\n     */\r\n    public static <T, R> R ofBoolean(Boolean bol, T t, Function<T, R> trueApply, Function<T, R> falseApply) {\r\n        return bol != null && bol ? trueApply.apply(t) : falseApply.apply(t);\r\n    }\r\n    \r\n}\r\n","fileName":"OptionalUtil.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\java\\com\\lsc\\freemarker\\utils\\OptionalUtil.java"},{"content":"package com.lsc.freemarker.utils;\r\n\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.IOException;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Properties;\r\n\r\n/**\r\n * Created by lisc on 2021/12/19\r\n * 获取所有以.properties格式的文件\r\n */\r\npublic class PropertiesUtils {\r\n    public static Map<String, String> customMap = new HashMap<>();\r\n\r\n    static {\r\n        File dir = new File(\"properties\");\r\n        List<File> files = FileUtils.searchAllFile(new File(dir.getAbsolutePath()));\r\n        for (File file : files) {\r\n            if (file.getName().endsWith(\".properties\")) {\r\n                Properties prope = new Properties();\r\n                try {\r\n                    prope.load(new FileInputStream(file));\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n                customMap.putAll((Map) prope);\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n","fileName":"PropertiesUtils.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\java\\com\\lsc\\freemarker\\utils\\PropertiesUtils.java"},{"content":"/**\r\n * Alipay.com Inc.\r\n * Copyright (c) 2004-2020 All Rights Reserved.\r\n */\r\npackage com.lsc.freemarker.utils;\r\n\r\nimport com.alibaba.fastjson.JSONObject;\r\nimport com.alibaba.fastjson.serializer.SerializerFeature;\r\nimport com.lsc.freemarker.entity.FieldBean;\r\nimport com.lsc.freemarker.entity.MethodBean;\r\nimport lombok.extern.log4j.Log4j;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.aop.framework.AdvisedSupport;\r\nimport org.springframework.aop.framework.AopProxy;\r\nimport org.springframework.aop.support.AopUtils;\r\nimport org.springframework.util.ObjectUtils;\r\n\r\nimport java.lang.reflect.Field;\r\nimport java.lang.reflect.Method;\r\nimport java.lang.reflect.Modifier;\r\nimport java.util.*;\r\n\r\n/**\r\n * 反射工具类\r\n */\r\n\r\n@Slf4j\r\npublic class ReflectionUtil {\r\n\r\n    /**\r\n     * 获取类下所有自定义属性\r\n     *\r\n     * @param classaa\r\n     */\r\n    public static List<FieldBean> getFieldBeans(Class classaa) {\r\n        // 得到类下所有属性\r\n        Field[] fields = classaa.getDeclaredFields();\r\n        ArrayList<FieldBean> fieldBeans = new ArrayList<>();\r\n        for (Field field : fields) {\r\n            FieldBean fieldBean = new FieldBean();\r\n            // 跳过java自带的类\r\n            if (StringUtils.containsAny(field.getType().getName(), \"java.lang.\", \"java.util.\", \".Logger\", \"$\")) {\r\n                continue;\r\n            }\r\n            // 属性类型名\r\n            fieldBean.setFieldType(field.getType().getSimpleName());\r\n            // 属性变量名\r\n            fieldBean.setFieldName(field.getName());\r\n            // 属性全路径\r\n            fieldBean.setFieldPathAndName(field.getType().getName().replace(\".\", \"/\"));\r\n            fieldBeans.add(fieldBean);\r\n        }\r\n        return fieldBeans;\r\n    }\r\n\r\n    /**\r\n     * 反射当前类下所有的方法\r\n     *\r\n     * @param classaa\r\n     * @return\r\n     */\r\n    public static ArrayList<MethodBean> getMethodBeans(Class classaa, String outPathJson) {\r\n        // 类下的方法集合\r\n        ArrayList<MethodBean> methodList = new ArrayList<>();\r\n        // 循环类下的所有方法\r\n        /**\r\n         * getDeclaredMethods()和getMethods()的方法区别在于, 前者会把Object类的方法变成代理对象, 后者会输出Object方法\r\n         */\r\n        for (Method declaredMethod : classaa.getDeclaredMethods()) {\r\n            if (declaredMethod.getName().contains(\"$\")) {\r\n                continue;\r\n            }\r\n            MethodBean methodBean = new MethodBean();\r\n            // 得到方法名\r\n            methodBean.setMethodName(declaredMethod.getName());\r\n            // 得到方法内的参数\r\n            ArrayList<FieldBean> parameterList = new ArrayList<>();\r\n            if (declaredMethod.getParameterCount() > 0) {\r\n                if (!declaredMethod.isAccessible()) {\r\n                    declaredMethod.setAccessible(true);\r\n                }\r\n                for (Class<?> parameterType : declaredMethod.getParameterTypes()) {\r\n                    if (parameterType.getTypeName().contains(\"java.lang\")) {\r\n                        continue;\r\n                    }\r\n                    int parameterlastIndexOf = parameterType.getTypeName().lastIndexOf('.');\r\n                    String fieldName = parameterType.getName().substring(parameterlastIndexOf + 1);\r\n                    FieldBean fieldBean = new FieldBean();\r\n                    fieldBean.setFieldPathAndName(parameterType.getTypeName().replace(\".\", \"/\"));\r\n                    fieldBean.setFieldName(StringBuildUtils.buildLowerCaseStr(fieldName));\r\n                    fieldBean.setFieldType(fieldName);\r\n                    parameterList.add(fieldBean);\r\n                    // 把方法入参输出成json格式文本\r\n                    CreationJsonTxt(parameterType, outPathJson);\r\n                }\r\n            }\r\n            methodBean.setMethodRequestType(parameterList);\r\n            String returnTypeName = declaredMethod.getReturnType().getName();\r\n            if (!\"void\".equals(returnTypeName)) {\r\n\r\n                Class<?> returnType = declaredMethod.getReturnType();\r\n                FieldBean fieldBean = new FieldBean();\r\n                fieldBean.setFieldName(StringBuildUtils.buildLowerCaseStr(returnType.getSimpleName()));\r\n                fieldBean.setFieldType(returnType.getSimpleName());\r\n                fieldBean.setFieldPathAndName(returnType.getTypeName().replace(\".\", \"/\"));\r\n                methodBean.setMethodResponseType(Arrays.asList(fieldBean));\r\n                CreationJsonTxt(declaredMethod.getReturnType(), outPathJson);\r\n            }\r\n            methodList.add(methodBean);\r\n\r\n        }\r\n        return methodList;\r\n    }\r\n\r\n    /**\r\n     * getProxyTarget\r\n     *\r\n     * @param proxy\r\n     * @return\r\n     * @throws Exception\r\n     */\r\n    public static Object getProxyTargetObject(Object proxy) throws Exception {\r\n        if (!AopUtils.isAopProxy(proxy)) {\r\n            return proxy;\r\n        }\r\n\r\n        Object target = null;\r\n        if (AopUtils.isJdkDynamicProxy(proxy)) {\r\n            target = getJdkDynamicProxyTargetObject(proxy);\r\n        } else { //cglib\r\n            target = getCglibProxyTargetObject(proxy);\r\n        }\r\n        if (AopUtils.isAopProxy(target)) {\r\n            target = getProxyTargetObject(target);\r\n        }\r\n        return target;\r\n    }\r\n\r\n    /**\r\n     * getCglibProxyTargetObject\r\n     *\r\n     * @param proxy\r\n     * @return\r\n     * @throws Exception\r\n     */\r\n    private static Object getCglibProxyTargetObject(Object proxy) throws Exception {\r\n        Field h = proxy.getClass().getDeclaredField(\"CGLIB$CALLBACK_0\");\r\n        h.setAccessible(true);\r\n        Object dynamicAdvisedInterceptor = h.get(proxy);\r\n\r\n        Field advised = dynamicAdvisedInterceptor.getClass().getDeclaredField(\"advised\");\r\n        advised.setAccessible(true);\r\n\r\n        Object target = ((AdvisedSupport) advised.get(dynamicAdvisedInterceptor)).getTargetSource().getTarget();\r\n\r\n        return target;\r\n    }\r\n\r\n    /**\r\n     * getJdkDynamicProxyTargetObject\r\n     *\r\n     * @param proxy\r\n     * @return\r\n     * @throws Exception\r\n     */\r\n    private static Object getJdkDynamicProxyTargetObject(Object proxy) throws Exception {\r\n        Field h = proxy.getClass().getSuperclass().getDeclaredField(\"h\");\r\n        h.setAccessible(true);\r\n        AopProxy aopProxy = (AopProxy) h.get(proxy);\r\n\r\n        Field advised = aopProxy.getClass().getDeclaredField(\"advised\");\r\n        advised.setAccessible(true);\r\n\r\n        Object target = ((AdvisedSupport) advised.get(aopProxy)).getTargetSource().getTarget();\r\n\r\n        return target;\r\n    }\r\n\r\n    /**\r\n     * checkIfCanSkipField\r\n     *\r\n     * @param field\r\n     * @return\r\n     */\r\n    private static Boolean checkIfNeedSkipField(Field field) {\r\n        // 过滤静态属性\r\n        if (Modifier.isStatic(field.getModifiers())) {\r\n            return true;\r\n        }\r\n        // 过滤transient 关键字修饰的属性\r\n        if (Modifier.isTransient(field.getModifiers())) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 利用Java反射根据类的名称获取属性信息和父类的属性信息\r\n     *\r\n     * @param obj\r\n     * @return\r\n     */\r\n    public static Map<String, Field> getAllFieldList(Object obj) {\r\n        Map<String, Field> fieldMap = new LinkedHashMap<>();\r\n        Class<?> clazz = obj.getClass();\r\n        Field[] fields = clazz.getDeclaredFields();\r\n        for (Field field : fields) {\r\n            if (checkIfNeedSkipField(field)) {\r\n                continue;\r\n            }\r\n            fieldMap.put(field.getName(), field);\r\n        }\r\n        getFieldInParentClazz(clazz, fieldMap);\r\n        return fieldMap;\r\n    }\r\n\r\n    /**\r\n     * findFieldInTarget\r\n     *\r\n     * @param obj\r\n     * @param fieldName\r\n     * @return\r\n     */\r\n    public static Field getFieldInTarget(Object obj, String fieldName) {\r\n        Map<String, Field> fieldMap = getAllFieldList(obj);\r\n        if (fieldMap.containsKey(fieldName)) {\r\n            return fieldMap.get(fieldName);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 递归所有父类属性\r\n     *\r\n     * @param clazz\r\n     * @param fieldMap\r\n     */\r\n    private static void getFieldInParentClazz(Class<?> clazz, Map<String, Field> fieldMap) {\r\n        Class<?> superClazz = clazz.getSuperclass();\r\n        if (superClazz != null) {\r\n            Field[] superFields = superClazz.getDeclaredFields();\r\n            for (Field field : superFields) {\r\n                if (checkIfNeedSkipField(field)) {\r\n                    continue;\r\n                }\r\n                fieldMap.put(field.getName(), field);\r\n            }\r\n            getFieldInParentClazz(superClazz, fieldMap);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * checkIfSetMethodExists\r\n     *\r\n     * @param clazz\r\n     * @param field\r\n     * @return\r\n     */\r\n    public static Method checkIfSetMethodExists(Class<?> clazz, Field field) {\r\n        String fieldName = field.getName();\r\n        String methodName = \"set\" + fieldName.substring(0, 1).toUpperCase() + fieldName.substring(1);\r\n        Method method = getMethodInTarget(clazz, methodName);\r\n        return method;\r\n    }\r\n\r\n    /**\r\n     * getMethodInTarget\r\n     *\r\n     * @param clazz\r\n     * @param methodName\r\n     * @return\r\n     */\r\n    public static Method getMethodInTarget(Class<?> clazz, String methodName) {\r\n        Method method = null;\r\n        Method[] declaredMethods = clazz.getDeclaredMethods();\r\n        for (Method declaredMethod : declaredMethods) {\r\n            if (declaredMethod.getName().contains(methodName)) {\r\n                method = declaredMethod;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (method == null) {\r\n            Class<?> superClazz = clazz.getSuperclass();\r\n            if (superClazz != null) {\r\n                method = getMethodInTarget(superClazz, methodName);\r\n            }\r\n        }\r\n        return method;\r\n    }\r\n\r\n    //从当前实例到父类中找目标名、目标入参的方法,找到后执行并返回结果\r\n    public static Method getTargetMethod(Class cla, String metName, Class[] args) throws Exception {\r\n        try {\r\n            //非空继续\r\n            if (cla != null) {\r\n                Class tempClass = cla;\r\n                //当父类为null的时候说明到达了最上层的父类(Object类).\r\n                while (tempClass != null) {\r\n                    //所有已声明的方法,包括 private 级\r\n                    Method method = tempClass.getDeclaredMethod(metName, args);\r\n                    if (method != null) {\r\n                        method.setAccessible(true);\r\n                        return method;\r\n                    }\r\n                    //得到父类,然后赋给自己\r\n                    tempClass = tempClass.getSuperclass();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            throw e;\r\n        }\r\n        throw new Exception(\"没找到期望方法,方法名:\" + metName);\r\n    }\r\n\r\n    /**\r\n     * 取实例obj的自身与父的所有字段\r\n     *\r\n     * @param obj 实例\r\n     * @return\r\n     */\r\n    public static List<Field> getSelfAndAllParentAllFild(Object obj) {\r\n        List<Field> fieldList = new ArrayList<>();\r\n        //非空继续\r\n        if (obj != null) {\r\n            Class tempClass = obj.getClass();\r\n            //当父类为null的时候说明到达了最上层的父类(Object类).\r\n            while (tempClass != null) {\r\n                //获取 tempClass 自身4中修饰的 字段, 不包含父类\r\n                fieldList.addAll(Arrays.asList(tempClass.getDeclaredFields()));\r\n                //得到父类,然后赋给自己\r\n                tempClass = tempClass.getSuperclass();\r\n            }\r\n        }\r\n        return fieldList;\r\n    }\r\n\r\n    /**\r\n     * 取实例obj的自身所有属性不包含父类\r\n     *\r\n     * @param obj 实例\r\n     * @return\r\n     */\r\n    public static List<Field> getSelfAllFild(Object obj) {\r\n        List<Field> fieldList = new ArrayList<>();\r\n        //非空继续\r\n        if (obj != null) {\r\n            Class tempClass = obj.getClass();\r\n            //当父类为null的时候说明到达了最上层的父类(Object类).\r\n            while (tempClass != null) {\r\n                //获取 tempClass 自身4中修饰的 字段, 不包含父类\r\n                fieldList.addAll(Arrays.asList(tempClass.getDeclaredFields()));\r\n                //得到父类,然后赋给自己\r\n                tempClass = null;\r\n            }\r\n        }\r\n        return fieldList;\r\n    }\r\n\r\n    /**\r\n     * 实例目标字段设值\r\n     *\r\n     * @param ins\r\n     * @param fieldName\r\n     * @param val\r\n     * @throws IllegalAccessException\r\n     */\r\n    public static void setFieldValue(Object ins, String fieldName, Object val) throws IllegalAccessException {\r\n        Field field = getFieldInTarget(ins, fieldName);\r\n        //AssertUtil.notNull(field, BizeBizprodErrorCode.PARAMETER_ILLEGAL, \"fieldName:\"+fieldName+\" not exist \");\r\n        field.setAccessible(true);\r\n        field.set(ins, val);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * 根据Class对象,反射出对象的json文本\r\n     *\r\n     * @param aclass      类对象\r\n     * @param outPathJson 文本输出路径\r\n     */\r\n    public static void CreationJsonTxt(Class<?> aclass, String outPathJson) {\r\n\r\n        try {\r\n            if (!aclass.isInterface() && !aclass.isEnum()) {\r\n                Object instance = aclass.newInstance();\r\n                String contex = JSONObject.toJSONString(instance, SerializerFeature.PrettyFormat, SerializerFeature.WriteMapNullValue);\r\n                String path = outPathJson + \"\\\\json\\\\\";\r\n                FileUtils.fileWrite(path, aclass.getSimpleName() + \".json\", contex);\r\n            }\r\n        } catch (Exception e) {\r\n            log.error(\"CreationJsonTxt 创建json文本对象时出错!!!\", e);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 根据Class对象,反射出对象的json文本\r\n     *\r\n     * @param aclass      类对象\r\n     * @param outPathJson 文本输出路径\r\n     */\r\n    public static String CreationJsonTxt(Class<?> aclass) {\r\n        String contex = StringUtils.EMPTY;\r\n        try {\r\n            if (!aclass.isInterface() && !aclass.isEnum()) {\r\n                Object instance = aclass.newInstance();\r\n                contex = JSONObject.toJSONString(instance, SerializerFeature.PrettyFormat, SerializerFeature.WriteMapNullValue);\r\n\r\n            }\r\n        } catch (Exception e) {\r\n            log.error(\"CreationJsonTxt 创建json文本对象时出错!!!\", e);\r\n        }\r\n        return contex;\r\n    }\r\n    /**\r\n     * 循环遍历指定类的全部属性(不包含父类)\r\n     * 判断是否有属性非空 如果有属性非空 return true\r\n     * @param obj 目标对象实例\r\n     * @return\r\n     */\r\n    public static boolean objectAllFieldContainIsNotEmpty(Object obj) {\r\n        Class<?> aClass = obj.getClass();\r\n        try {\r\n            // 获取当前类所有的属性, 不包含父类\r\n            List<Field> fieldList = getDeclaredFields(aClass);\r\n            for (Field field : fieldList) {\r\n                field.setAccessible(true);\r\n                // 获取当前属性的值\r\n                Object  fieldValue = field.get(obj);\r\n                // 校验当前值是否为null\r\n                if (!ObjectUtils.isEmpty(fieldValue)) {\r\n                    return true;\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            log.error(String.format(\"ReflectUtil:getObjectAllFieldValueIsNotNull:busiFlg:system exception: msg:%s stack:\", e));\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 获取 cla 自身的所有字段\r\n     *\r\n     * @param cla\r\n     * @return\r\n     */\r\n    public static List<Field> getDeclaredFields(Class<?> cla) {\r\n        List<Field> fieldList = OptionalUtil.ofBoolean(cla == null, cla, val -> new ArrayList<>(), val -> new ArrayList<>(Arrays.asList(val.getDeclaredFields())));\r\n        fieldList.forEach(field -> field.setAccessible(true));\r\n        return fieldList;\r\n    }\r\n\r\n    /**\r\n     * 获取指定对象,指定属性的set方法\r\n     * @param obj\r\n     * @param field\r\n     * @return\r\n     */\r\n    public static Method getObjectSetMethod(Object obj, Field field) {\r\n        Class<?> clazz = obj.getClass();\r\n        String fieldName = field.getName();\r\n        String methodName = \"set\" + fieldName.substring(0, 1).toUpperCase() + fieldName.substring(1);\r\n        Method method = getMethodInTarget(clazz, methodName);\r\n        return method;\r\n    }\r\n\r\n    /**\r\n     * 获取指定对象,指定属性的set方法\r\n     * @param obj\r\n     * @param field\r\n     * @return\r\n     */\r\n    public static Method getObjectSetMethod(Class clazz, Field field) {\r\n        String fieldName = field.getName();\r\n        String methodName = \"set\" + fieldName.substring(0, 1).toUpperCase() + fieldName.substring(1);\r\n        Method method = getMethodInTarget(clazz, methodName);\r\n        log.info(\"getObjectSetMethod:结束\");\r\n        return method;\r\n    }\r\n}","fileName":"ReflectionUtil.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\java\\com\\lsc\\freemarker\\utils\\ReflectionUtil.java"},{"content":"package com.lsc.freemarker.utils;\r\n\r\nimport com.alibaba.fastjson.JSONObject;\r\nimport com.alibaba.fastjson.serializer.SerializerFeature;\r\nimport org.junit.Test;\r\n\r\n/**\r\n * @Description:\r\n * @Author: lisc\r\n * @date: 2022/5/11\r\n */\r\npublic class StringBuildUtils {\r\n\r\n    /**\r\n     * 我们都知道在ascii 码表中 a的ASCIII码值是65⽽A的ASCII码值是 97 两个之间的差值是 32，所以，如果我们需要把⼀个⼩写字母转化成\r\n     * ⼤写字母，那么我们只需要把这个 char 字符的ascii码值减上 32，转成⼩写同理。\r\n     */\r\n\r\n    /**\r\n     * 将字符串首字母转大写\r\n     * @param str\r\n     * @return\r\n     */\r\n    public static String buildUpperCaseStr(String str){\r\n\r\n        // 判断首字母是否为小写\r\n        if(!Character.isLowerCase(str.charAt(0))){\r\n            return \"null\";\r\n        }\r\n        char[] chars = str.toCharArray();\r\n        // 进行字母的ascli编码前移\r\n        chars[0] -=32;\r\n        return String.valueOf(chars);\r\n    }\r\n\r\n    /**\r\n     * 将字符串首字母转小写\r\n     * @param str\r\n     * @return\r\n     */\r\n    public static String buildLowerCaseStr(String str){\r\n        // 判断首字母是否为大写\r\n        if(!Character.isUpperCase(str.charAt(0))){\r\n            return \"null\";\r\n        }\r\n        // 进行字母的ascli编码前移\r\n        char[] chars = str.toCharArray();\r\n        chars[0] +=32;\r\n        return String.valueOf(chars);\r\n    }\r\n\r\n    /**\r\n     * 把class类转换为Json格式的文件\r\n     * @param obj\r\n     * @param url\r\n     */\r\n    public static void classJsonString(Object obj,String url){\r\n        String contex = JSONObject.toJSONString(obj, SerializerFeature.PrettyFormat, SerializerFeature.WriteMapNullValue);\r\n        FileUtils.fileWrite(url, obj.getClass().getSimpleName()+ \".json\", contex);\r\n    }\r\n\r\n\r\n    /***\r\n     * 下划线命名转为驼峰命名\r\n     *\r\n     * @param para\r\n     *        下划线命名的字符串\r\n     */\r\n\r\n    public static String underlineToHump(String para){\r\n        StringBuilder result=new StringBuilder();\r\n        String a[]=para.split(\"_\");\r\n        for(String s:a){\r\n            if(result.length()==0){\r\n                result.append(s.toLowerCase());\r\n            }else{\r\n                result.append(s.substring(0, 1).toUpperCase());\r\n                result.append(s.substring(1).toLowerCase());\r\n            }\r\n        }\r\n        return result.toString();\r\n    }\r\n\r\n\r\n\r\n    /***\r\n     * 驼峰命名转为下划线命名\r\n     *\r\n     * @param para\r\n     *        驼峰命名的字符串\r\n     */\r\n\r\n    public static String humpToUnderline(String para){\r\n        StringBuilder sb=new StringBuilder(para);\r\n        int temp=0;//偏移量，第i个下划线的位置是 当前的位置+ 偏移量（i-1）,第一个下划线偏移量是0\r\n        for(int i=0;i<para.length();i++){\r\n            if(Character.isUpperCase(para.charAt(i))){\r\n                sb.insert(i+temp, \"_\");\r\n                temp+=1;\r\n            }\r\n        }\r\n        return sb.toString().toLowerCase();\r\n    }\r\n\r\n    @Test\r\n    public void test(){\r\n        String gmtModified = underlineToHump(\"gmt_modified\");\r\n        System.out.println(\"gmtModified = \" + gmtModified);\r\n\r\n        String humpToUnderline = humpToUnderline(gmtModified);\r\n        System.out.println(\"humpToUnderline = \" + humpToUnderline);\r\n\r\n    }\r\n}\r\n","fileName":"StringBuildUtils.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\java\\com\\lsc\\freemarker\\utils\\StringBuildUtils.java"},{"content":"package com.lsc.freemarker.utils;\r\n\r\nimport java.lang.annotation.*;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: 切面注解\r\n * @date 2022/10/27 18:15\r\n */\r\n@Retention(RetentionPolicy.RUNTIME) //注解保留期限\r\n@Target(ElementType.METHOD) //注解目标类型\r\n@Documented\r\npublic @interface SystemLog {\r\n    int LogType() default Constants.LogType.Empty;\r\n}\r\n\r\n","fileName":"SystemLog.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\java\\com\\lsc\\freemarker\\utils\\SystemLog.java"},{"content":"package ${mock.rootPath}.biz.service.impl;\r\n\r\n\r\n/**\r\n * @author: lisc\r\n * @description: ${mock.className}Facade\r\n * @date: ${date?datetime}\r\n */\r\npublic class ${mock.className}FacadeImpl implements ${mock.className}Facade {\r\n\r\n    @SofaReference\r\n    private ${mock.className}Service ${mock.className?uncap_first}Service;\r\n\r\n    /**\r\n     * save${mock.className}\r\n     * @param request\r\n     * @return\r\n     */\r\n    @Override\r\n    public Save${mock.className}Response save${mock.className}(Save${mock.className}Request request) {\r\n        return ${mock.className?uncap_first}Service.save${mock.className}(request);\r\n    }\r\n\r\n    /**\r\n     * query${mock.className}\r\n     * @param request\r\n     * @return\r\n     */\r\n    @Override\r\n    public Query${mock.className}Response query${mock.className}(Query${mock.className}Request request) {\r\n        return ${mock.className?uncap_first}Service.query${mock.className}(request);\r\n    }\r\n\r\n    /**\r\n     * update{ClassName}\r\n     * @param request\r\n     * @return\r\n     */\r\n    @Override\r\n    public Upate${mock.className}Response update{ClassName}(Upate${mock.className}Request request) {\r\n        return ${mock.className?uncap_first}Service.query${mock.className}(request);\r\n    }\r\n\r\n    /**\r\n     * delete${mock.className}\r\n     * @param request\r\n     * @return\r\n     */\r\n    @Override\r\n    public Delete${mock.className}Response delete${mock.className}(Delete${mock.className}Request request) {\r\n        return ${mock.className?uncap_first}Service.query${mock.className}(request);\r\n    }\r\n}\r\n","fileName":"${mock.className}FacadeImpl.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\resources\\FreeMarkerFile\\CodeTemplates\\ibizecoprod\\${mock.rootPath}\\biz.service.impl\\${mock.className}FacadeImpl.java"},{"content":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n       xmlns:sofa=\"http://schema.alipay.com/sofa/schema/slite\"\r\n       xmlns:context=\"http://www.springframework.org/schema/context\"\r\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\r\n        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\r\n        http://schema.alipay.com/sofa/schema/slite http://schema.alipay.com/sofa/slite.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\"\r\n       default-autowire=\"byName\">\r\n\r\n    <context:annotation-config/>\r\n    <context:component-scan base-package=\"com.ipay.ibizecoprod.common.dal\"/>\r\n\r\n\r\n    <!--${mock.tableName?uncap_first}Repository:start-->\r\n    <bean id=\"${mock.tableName?uncap_first}Repository\" class=\"${mock.rootPath}.common.dal.repository.impl.${mock.tableName}RepositoryImpl\"/>\r\n    <sofa:service ref=\"${mock.tableName?uncap_first}Repository\"\r\n                  interface=\"${mock.rootPath}.common.dal.repository.${mock.tableName}Repository\"/>\r\n    <!--${mock.tableName?uncap_first}Repository:end-->\r\n</beans>\r\n","fileName":"common-dal-service.xml","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\resources\\FreeMarkerFile\\CodeTemplates\\ibizecoprod\\${mock.rootPath}\\common-dal-service.xml"},{"content":"package ${mock.rootPath}.common.dal.repository;\r\n\r\nimport ${mock.rootPath}.dal.ibizecoprod.dataobject.${mock.tableName}DO;\r\n\r\nimport java.util.List;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: ${mock.rootPath}.common.dal.repository\r\n * @date: ${date?datetime}\r\n */\r\npublic interface ${mock.tableName}Repository {\r\n    /**\r\n     *  Query DB table <tt>${mock.tableName}</tt> for records.\r\n     *\r\n     *\t@param ipayUserId ipayUserId\r\n     *\t@param serviceCode serviceCode\r\n     *\t@return List<IbepFormDataRecordDO>\r\n     */\r\n    List<${mock.tableName}DO> selectByUserIdAndServiceCode(String ipayUserId, String serviceCode);\r\n\r\n    /**\r\n     *  Update DB table <tt>${mock.tableName}</tt>.\r\n     *\r\n     *\t@param ibepFormDataRecord ibepFormDataRecord\r\n     *\t@return int\r\n     */\r\n    int updateById(${mock.tableName}RecordDO ${mock.tableName?uncap_first});\r\n\r\n    /**\r\n     *  Insert one <tt>${mock.tableName}DO</tt> object to DB table <tt>${mock.tableName}</tt>, return primary key\r\n     *\r\n     *\t@param ibepFormDataRecord ibepFormDataRecord\r\n     *\t@return String\r\n     */\r\n    String insert(${mock.tableName}DO ${mock.tableName?uncap_first});\r\n}\r\n","fileName":"IbepFormDataRecordRepository.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\resources\\FreeMarkerFile\\CodeTemplates\\ibizecoprod\\${mock.rootPath}\\common.dal.repository\\IbepFormDataRecordRepository.java"},{"content":"package ${mock.rootPath}.common.dal.repository.impl;\r\n\r\nimport com.alipay.sofa.runtime.api.annotation.SofaReference;\r\nimport com.ipay.ibizecoprod.common.dal.repository.IbepFormDataRecordRepository;\r\nimport com.ipay.ibizecoprod.dal.ibizecoprod.daointerface.IbepFormDataRecordDAO;\r\nimport com.ipay.ibizecoprod.dal.ibizecoprod.dataobject.IbepFormDataRecordDO;\r\n\r\nimport java.util.List;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: ${mock.rootPath}.common.dal.repository.impl\r\n * @date ${date?datetime}\r\n */\r\npublic class ${mock.tableName}RepositoryImpl implements ${mock.tableName}Repository {\r\n\r\n    @SofaReference\r\n    private ${mock.tableName}RecordDAO ${mock.tableName?uncap_first}RecordDAO;\r\n\r\n    @Override\r\n    public List<${mock.tableName}RecordDO> selectByUserIdAndServiceCode(String ipayUserId, String serviceCode) {\r\n        return ${mock.tableName?uncap_first}RecordDAO.selectByUserIdAndServiceCode(ipayUserId,serviceCode);\r\n    }\r\n\r\n    @Override\r\n    public int updateById(IbepFormDataRecordDO ibepFormDataRecord) {\r\n        return ${mock.tableName?uncap_first}RecordDAO.updateById(ibepFormDataRecord);\r\n    }\r\n\r\n    @Override\r\n    public String insert(IbepFormDataRecordDO ibepFormDataRecord) {\r\n        return ${mock.tableName?uncap_first}RecordDAO.insert(ibepFormDataRecord);\r\n    }\r\n}\r\n","fileName":"${mock.tableName}RepositoryImpl.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\resources\\FreeMarkerFile\\CodeTemplates\\ibizecoprod\\${mock.rootPath}\\common.dal.repository\\impl\\${mock.tableName}RepositoryImpl.java"},{"content":"package ${mock.rootPath}.common.service.facade;\r\n\r\n\r\n\r\n/**\r\n * @author: lisc\r\n * @description: ${mock.className}Facade\r\n * @date: ${date?datetime}\r\n */\r\npublic interface ${mock.className}Facade {\r\n\r\n  /**\r\n   * save${mock.className}\r\n   *\r\n   * @param request\r\n   * @return\r\n   */\r\n  Save${mock.className}Response save${mock.className}(Save${mock.className}Request request);\r\n\r\n  /**\r\n   * query${mock.className}\r\n   *\r\n   * @param request\r\n   * @return\r\n   */\r\n  Query${mock.className}Response query${mock.className}(Query${mock.className}Request request);\r\n\r\n  /**\r\n   * update{ClassName}\r\n   *\r\n   * @param request\r\n   * @return\r\n   */\r\n  Upate${mock.className}Response update{ClassName}(Upate${mock.className}Request request);\r\n\r\n  /**\r\n   * delete${mock.className}\r\n   *\r\n   * @param request\r\n   * @return\r\n   */\r\n  Delete${mock.className}Response delete${mock.className}(Delete${mock.className}Request request);\r\n\r\n}\r\n","fileName":"${mock.className}Facade.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\resources\\FreeMarkerFile\\CodeTemplates\\ibizecoprod\\${mock.rootPath}\\common.service.facade\\${mock.className}Facade.java"},{"content":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n       xmlns:sofa=\"http://schema.alipay.com/sofa/schema/slite\"\r\n       xmlns:context=\"http://www.springframework.org/schema/context\"\r\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\r\n        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\r\n        http://schema.alipay.com/sofa/schema/slite http://schema.alipay.com/sofa/slite.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\"\r\n       default-autowire=\"byName\">\r\n\r\n    <context:annotation-config/>\r\n    <context:component-scan base-package=\"com.ipay.ibizecoprod.core.service\"/>\r\n\r\n\r\n    <!--${mock.className}Service:begin-->\r\n    <bean id=\"${mock.className?uncap_first}Service\" class=\"com.ipay.ibizecoprod.core.service.voyage.impl.${mock.className}ServiceImpl\"/>\r\n    <sofa:service ref=\"${mock.className?uncap_first}Service\" interface=\"com.ipay.ibizecoprod.core.service.voyage.${mock.className}Service\" >\r\n    </sofa:service>\r\n    <!--${mock.className}Service:end-->\r\n\r\n\r\n</beans>\r\n","fileName":"core-service.xml","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\resources\\FreeMarkerFile\\CodeTemplates\\ibizecoprod\\${mock.rootPath}\\core-service.xml"},{"content":"package ${mock.rootPath}.core.service;\r\n\r\n\r\n\r\n/**\r\n * @author: lisc\r\n * @description: ${mock.className}Service\r\n * @date: ${date?datetime}\r\n */\r\npublic interface ${mock.className}Service {\r\n\r\n  /**\r\n   * save${mock.className}\r\n   *\r\n   * @param request\r\n   * @return\r\n   */\r\n  Save${mock.className}Response save${mock.className}(Save${mock.className}Request request);\r\n\r\n  /**\r\n   * query${mock.className}\r\n   *\r\n   * @param request\r\n   * @return\r\n   */\r\n  Query${mock.className}Response query${mock.className}(Query${mock.className}Request request);\r\n\r\n  /**\r\n   * update{ClassName}\r\n   *\r\n   * @param request\r\n   * @return\r\n   */\r\n  Upate${mock.className}Response update{ClassName}(Upate${mock.className}Request request);\r\n\r\n  /**\r\n   * delete${mock.className}\r\n   *\r\n   * @param request\r\n   * @return\r\n   */\r\n  Delete${mock.className}Response delete${mock.className}(Delete${mock.className}Request request);\r\n\r\n}\r\n","fileName":"${mock.className}Service.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\resources\\FreeMarkerFile\\CodeTemplates\\ibizecoprod\\${mock.rootPath}\\core.service\\${mock.className}Service.java"},{"content":"package ${mock.rootPath}.core.service.impl;\r\n\r\nimport com.alipay.sofa.runtime.api.annotation.SofaReference;\r\nimport com.ipay.ialicore.common.event.EventContextUtil;\r\nimport com.ipay.ialicore.common.log.BaseDigestLog;\r\nimport com.ipay.ialicore.common.util.assertion.AssertUtil;\r\nimport com.ipay.ialicore.common.util.log.LogUtil;\r\nimport com.ipay.ibizecoprod.common.util.JSONUtil;\r\nimport com.ipay.ibizecoprod.common.util.constants.CommonConstant;\r\nimport com.ipay.ibizecoprod.common.util.constants.LoggerConstants;\r\nimport com.ipay.ibizecoprod.common.util.error.BizeBizprodErrorCode;\r\nimport org.springframework.util.CollectionUtils;\r\n\r\n\r\n/**\r\n * @author lisc\r\n * @Description: ${mock.className}ServiceImpl\r\n * @date ${date?datetime}\r\n */\r\npublic class ${mock.className}ServiceImpl implements ${mock.className}Service {\r\n\r\n    /**\r\n     * ibep_form_data_records 开店申请单数据暂存\r\n     */\r\n    @SofaReference\r\n    private ${mock.tableName}Repository ${mock.tableName?uncap_first}Repository;\r\n\r\n\r\n\r\n    /**\r\n     * 保存\r\n     *\r\n     * @param request\r\n     * @return\r\n     */\r\n    @Override\r\n    public Save${mock.className}Response save${mock.className}(Save${mock.className}Request request) {\r\n        Save${mock.className}Response response = new Save${mock.className}Response();\r\n        ServiceTemplate.execute(request, response, new BizServiceCallback() {\r\n\r\n            @Override\r\n            public void beforeService() {\r\n                AssertUtil.notNull(request, BizeBizprodErrorCode.REQUEST_NULL_EXCEPTION);\r\n            }\r\n\r\n            @Override\r\n            public void executeService() throws Exception {\r\n\r\n\r\n            }\r\n\r\n            @Override\r\n            public BaseDigestLog afterService() {\r\n                LogUtil.info(LoggerConstants.IBIZECOPROD_BIZ_CORE_SERVICE, String.format(\"MpOpenMarketPlaceServiceImpl:save${mock.className}:end,  [request]:%s [response]:%s\",\r\n                        JSONUtil.objectToString(request), JSONUtil.objectToString(response)));\r\n                return null;\r\n            }\r\n        });\r\n        return response;\r\n    }\r\n\r\n    /**\r\n     * 查询\r\n     *\r\n     * @param request\r\n     * @return\r\n     */\r\n    @Override\r\n    public Query${mock.className}Response query${mock.className}(Query${mock.className}Request request) {\r\n        Query${mock.className}Response response = new Query${mock.className}Response();\r\n        ServiceTemplate.execute(request, response, new BizServiceCallback() {\r\n            @Override\r\n            public void beforeService() {\r\n                AssertUtil.notNull(request, BizeBizprodErrorCode.REQUEST_NULL_EXCEPTION);\r\n            }\r\n\r\n            @Override\r\n            public void executeService() throws Exception {\r\n\r\n\r\n            }\r\n\r\n            @Override\r\n            public BaseDigestLog afterService() {\r\n                LogUtil.info(LoggerConstants.IBIZECOPROD_BIZ_CORE_SERVICE,\r\n                        String.format(\"${mock.className}ServiceImpl:query${mock.className}:end, [request]:%s [response]:%s\",\r\n                                JSONUtil.objectToString(request), JSONUtil.objectToString(response)));\r\n                return null;\r\n            }\r\n        });\r\n        return response;\r\n    }\r\n\r\n    /**\r\n     * 修改\r\n     *\r\n     * @param request\r\n     * @return\r\n     */\r\n    @Override\r\n    public Upate${mock.className}Response upate${mock.className}(Upate${mock.className}Request request) {\r\n        Upate${mock.className}Response response = new Upate${mock.className}Response();\r\n        ServiceTemplate.execute(request, response, new BizServiceCallback() {\r\n            @Override\r\n            public void beforeService() {\r\n            AssertUtil.notNull(request, BizeBizprodErrorCode.REQUEST_NULL_EXCEPTION);\r\n            }\r\n\r\n            @Override\r\n            public void executeService() throws Exception {\r\n\r\n\r\n            }\r\n\r\n    @Override\r\n    public BaseDigestLog afterService() {\r\n        LogUtil.info(LoggerConstants.IBIZECOPROD_BIZ_CORE_SERVICE,\r\n                String.format(\"${mock.className}ServiceImpl:upate${mock.className}:end, [request]:%s [response]:%s\",\r\n                    JSONUtil.objectToString(request), JSONUtil.objectToString(response)));\r\n        return null;\r\n            }\r\n        });\r\n        return response;\r\n    }\r\n\r\n\r\n    /**\r\n     * 查询\r\n     *\r\n     * @param request\r\n     * @return\r\n     */\r\n    @Override\r\n    public Delete${mock.className}Response delete${mock.className}(Delete${mock.className}Request request) {\r\n        Delete${mock.className}Response response = new Delete${mock.className}Response();\r\n        ServiceTemplate.execute(request, response, new BizServiceCallback() {\r\n            @Override\r\n            public void beforeService() {\r\n                AssertUtil.notNull(request, BizeBizprodErrorCode.REQUEST_NULL_EXCEPTION);\r\n            }\r\n\r\n            @Override\r\n            public void executeService() throws Exception {\r\n\r\n\r\n            }\r\n\r\n            @Override\r\n            public BaseDigestLog afterService() {\r\n                LogUtil.info(LoggerConstants.IBIZECOPROD_BIZ_CORE_SERVICE,\r\n                    String.format(\"${mock.className}ServiceImpl:delete${mock.className}:end, [request]:%s [response]:%s\",\r\n                        JSONUtil.objectToString(request), JSONUtil.objectToString(response)));\r\n                return null;\r\n            }\r\n        });\r\n        return response;\r\n    }\r\n\r\n\r\n\r\n}\r\n","fileName":"${mock.className}ServiceImpl.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\resources\\FreeMarkerFile\\CodeTemplates\\ibizecoprod\\${mock.rootPath}\\core.service\\impl\\${mock.className}ServiceImpl.java"},{"content":"package ${mock.classPath};\r\n\r\n\r\nimport com.alipay.gateway.adapterservice.annotation.OperationType;\r\nimport com.ipay.ibizecoprod.common.service.facade.response.CityLabel;\r\nimport com.ipay.iexpbizprod.capability.imgs.ImgsResult;\r\nimport com.ipay.iexpbizprod.imgs.partner.voyage.dto.MpOpenMarketRecordDto;\r\nimport com.ipay.iexpbizprod.imgs.partner.voyage.dto.MpVoyageCompanyInformationDto;\r\nimport com.ipay.iexpbizprod.imgs.partner.voyage.request.*;\r\nimport com.ipay.iexpbizprod.imgs.partner.voyage.response.*;\r\n\r\nimport java.util.List;\r\n\r\n/**\r\n * 全球远航\r\n * 远程开店\r\n */\r\npublic interface ${ClassName}RpcFacade {\r\n\r\n  //company\r\n\r\n  /**\r\n   * 单条查询主体信息\r\n   * 根据id\r\n   * @param request\r\n   * @return\r\n   */\r\n  @OperationType(\"com.worldfirst.portal.pc.voyage.queryCompanyInfo\")\r\n  ImgsResult<QueryVoyageCompanyInfoResponse> queryCompanyInfo(QueryVoyageCompanyInfoRequest request);\r\n\r\n  /**\r\n   * 分页多条查询主体信息\r\n   * @param request\r\n   * @return\r\n   */\r\n  @OperationType(\"com.worldfirst.portal.pc.voyage.queryCompanyInfoList\")\r\n  ImgsResult<PaginatorResponse<List<MpVoyageCompanyInformationDto>>> queryCompanyInfoList(QueryVoyageCompanyInfoListRequest request);\r\n\r\n  /**\r\n   * 更新主体信息\r\n   * @param request\r\n   * @return\r\n   */\r\n  @OperationType(\"com.worldfirst.portal.pc.voyage.updateCompanyInfo\")\r\n  ImgsResult<UpdateVoyageCompanyInfoResponse> updateCompanyInfo(UpdateVoyageCompanyInfoRequest request);\r\n\r\n  /**\r\n   * 删除主体信息\r\n   * @param request\r\n   * @return\r\n   */\r\n  @OperationType(\"com.worldfirst.portal.pc.voyage.deleteCompanyInfo\")\r\n  ImgsResult<DeleteVoyageCompanyInfoResponse> deleteCompanyInfo(DeleteVoyageCompanyInfoRequest request);\r\n\r\n  /**\r\n   * 添加主体信息\r\n   * @param request\r\n   * @return\r\n   */\r\n  @OperationType(\"com.worldfirst.portal.pc.voyage.addCompanyInfo\")\r\n  ImgsResult<AddVoyageCompanyInfoResponse> addCompanyInfo(AddVoyageCompanyInfoRequest request);\r\n\r\n\r\n\r\n  //MarketPlace\r\n  /**\r\n   * 单条查询MarketPlace申请\r\n   *\r\n   * 如果传入applyid根据主键id查询\r\n   * @param request\r\n   * @return\r\n   */\r\n  @OperationType(\"com.worldfirst.portal.pc.voyage.queryMarketPlaceApply\")\r\n  ImgsResult<MpOpenMarketRecordDto> queryMarketPlaceApply(QueryVoyageApplyRequest request);\r\n\r\n\r\n  /**\r\n   * 分页多条查询MarketPlace申请\r\n   * @param request\r\n   * @return\r\n   */\r\n  @OperationType(\"com.worldfirst.portal.pc.voyage.queryMarketPlaceApplyList\")\r\n  ImgsResult<PaginatorResponse<List<MpOpenMarketRecordDto>>> queryMarketPlaceApplyList(QueryVoyageApplyListRequest request);\r\n\r\n\r\n\r\n  /**\r\n   * 添加开店申请\r\n   * @param request\r\n   * @return\r\n   */\r\n  @OperationType(\"com.worldfirst.portal.pc.voyage.addMarketPlaceApply\")\r\n  ImgsResult<AddVoyageApplyResponse> addMarketPlaceApply(AddVoyageApplyRequest request);\r\n\r\n\r\n  @OperationType(\"com.worldfirst.portal.pc.voyage.updateMarketPlace\")\r\n  ImgsResult<UpdateVoyageApplyResponse> updateMarketPlace(UpdateVoyageApplyRequest request);\r\n\r\n\r\n\r\n  @OperationType(\"com.worldfirst.portal.pc.voyage.querySiteInfo\")\r\n  ImgsResult<QueryVoyageSitesInfoResponse> querySiteInfo(QueryVoyageSitesInfoRequest request);\r\n\r\n\r\n  @OperationType(\"com.worldfirst.portal.pc.voyage.sentSmsCode\")\r\n  ImgsResult<SentSmsCodeResponse> sentSmsCode(SentSmsCodeRequest request);\r\n\r\n\r\n\r\n  @OperationType(\"com.worldfirst.portal.pc.voyage.getCityCodeLabel\")\r\n  ImgsResult<List<CityLabel>> queryCityCodeLabel(QueryCityCodeLabelRequest request);\r\n\r\n  @OperationType(\"com.worldfirst.portal.pc.voyage.reminder\")\r\n  ImgsResult<ReminderResponse> reminder(ReminderRequest request);\r\n\r\n\r\n  /**\r\n   * 获取用户的入驻信息\r\n   * @return\r\n   */\r\n  @OperationType(\"com.worldfirst.portal.pc.voyage.queryOnboardingInfo\")\r\n  ImgsResult<QueryVoyageOnboardingInfoResponse> queryOnboardingInfo(QueryVoyageOnboardingInfoRequest request);\r\n\r\n  /**\r\n   * 暂存 远航批量开店表单数据\r\n   * @return\r\n   */\r\n  @OperationType(\"com.worldfirst.portal.pc.voyage.storeMpApplyFormData\")\r\n  ImgsResult<StoreMpApplyFormDataResponse> storeMpApplyFormData(StoreMpApplyFormDataRequest request);\r\n\r\n  /**\r\n   * 查询 暂存的远航批量开店表单数据\r\n   * @return\r\n   */\r\n  @OperationType(\"com.worldfirst.portal.pc.voyage.queryMpApplyFormData\")\r\n  ImgsResult<QueryMpApplyFormDataResponse> queryMpApplyFormData(QueryMpApplyFormDataRequest request);\r\n}\r\n","fileName":"${ClassName}RpcFacade.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\resources\\FreeMarkerFile\\CodeTemplates\\iexpbizprod\\${ClassName}RpcFacade.java"},{"content":"package com.ipay.iexpbizprod.partner.imgs.impl;\r\n\r\nimport com.alipay.sofa.runtime.api.annotation.SofaService;\r\nimport com.alipay.sofa.runtime.api.annotation.SofaServiceBinding;\r\nimport com.ipay.ibizecoprod.common.service.facade.response.CityLabel;\r\nimport com.ipay.iexpbizprod.capability.authentication.util.UserAuthenticationContext;\r\nimport com.ipay.iexpbizprod.capability.imgs.ImgsResult;\r\nimport com.ipay.iexpbizprod.imgs.partner.voyage.VoyageRpcFacade;\r\nimport com.ipay.iexpbizprod.imgs.partner.voyage.dto.MpOpenMarketRecordDto;\r\nimport com.ipay.iexpbizprod.imgs.partner.voyage.dto.MpVoyageCompanyInformationDto;\r\nimport com.ipay.iexpbizprod.imgs.partner.voyage.request.*;\r\nimport com.ipay.iexpbizprod.imgs.partner.voyage.response.*;\r\nimport com.ipay.iexpbizprod.partner.domain.service.voyage.VoyageService;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport java.util.List;\r\n\r\n@SofaService(bindings = {@SofaServiceBinding(bindingType = \"tr\")})\r\n@Component\r\npublic class VoyageRpcFacadeImpl implements VoyageRpcFacade {\r\n\r\n  @Autowired\r\n  private VoyageService voyageService;\r\n\r\n  /**\r\n   * 单条查询主体信息 根据id\r\n   *\r\n   * @param request\r\n   * @return\r\n   */\r\n  @Override\r\n  public ImgsResult<QueryVoyageCompanyInfoResponse> queryCompanyInfo(QueryVoyageCompanyInfoRequest request) {\r\n    request.setUserId(UserAuthenticationContext.get().getUserId());\r\n    QueryVoyageCompanyInfoResponse queryVoyageCompanyInfoResponse = voyageService\r\n        .queryCompanyInfo(request);\r\n    return ImgsResult.buildSuccessResult(queryVoyageCompanyInfoResponse);\r\n  }\r\n\r\n\r\n  /**\r\n   * 分页多条查询主体信息\r\n   *\r\n   * @param request\r\n   * @return\r\n   */\r\n  @Override\r\n  public ImgsResult<PaginatorResponse<List<MpVoyageCompanyInformationDto>>> queryCompanyInfoList(QueryVoyageCompanyInfoListRequest request) {\r\n    request.setUserId(UserAuthenticationContext.get().getUserId());\r\n    PaginatorResponse<List<MpVoyageCompanyInformationDto>> paginatorResponse = voyageService\r\n        .queryCompanyInfoList(request);\r\n    return ImgsResult.buildSuccessResult(paginatorResponse);\r\n  }\r\n\r\n  /**\r\n   * 更新主体信息\r\n   *\r\n   * @param request\r\n   * @return\r\n   */\r\n  @Override\r\n  public ImgsResult<UpdateVoyageCompanyInfoResponse> updateCompanyInfo(UpdateVoyageCompanyInfoRequest request) {\r\n    request.setUserId(UserAuthenticationContext.get().getUserId());\r\n    UpdateVoyageCompanyInfoResponse updateVoyageCompanyInfoResponse = voyageService.updateCompanyInfo(request);\r\n    return ImgsResult.buildSuccessResult(updateVoyageCompanyInfoResponse);\r\n  }\r\n\r\n  /**\r\n   * 删除主体信息\r\n   *\r\n   * @param request\r\n   * @return\r\n   */\r\n  @Override\r\n  public ImgsResult<DeleteVoyageCompanyInfoResponse> deleteCompanyInfo(DeleteVoyageCompanyInfoRequest request) {\r\n    request.setUserId(UserAuthenticationContext.get().getUserId());\r\n    DeleteVoyageCompanyInfoResponse deleteVoyageCompanyInfoResponse = voyageService.deleteCompanyInfo(request);\r\n    return ImgsResult.buildSuccessResult(deleteVoyageCompanyInfoResponse);\r\n  }\r\n\r\n  /**\r\n   * 添加主体信息\r\n   *\r\n   * @param request\r\n   * @return\r\n   */\r\n  @Override\r\n  public ImgsResult<AddVoyageCompanyInfoResponse> addCompanyInfo(AddVoyageCompanyInfoRequest request) {\r\n    request.setUserId(UserAuthenticationContext.get().getUserId());\r\n    AddVoyageCompanyInfoResponse addVoyageCompanyInfoResponse = voyageService.addCompanyInfo(request);\r\n    return ImgsResult.buildSuccessResult(addVoyageCompanyInfoResponse);\r\n  }\r\n\r\n  @Override\r\n  public ImgsResult<MpOpenMarketRecordDto> queryMarketPlaceApply(QueryVoyageApplyRequest request) {\r\n\r\n    QueryVoyageApplyResponse response = voyageService.queryMarketPlaceApply(request);\r\n\r\n    return ImgsResult.buildSuccessResult(response.getMpOpenMarketApplyRecordDto());\r\n  }\r\n\r\n  @Override\r\n  public ImgsResult<PaginatorResponse<List<MpOpenMarketRecordDto>>> queryMarketPlaceApplyList(QueryVoyageApplyListRequest request) {\r\n    request.setUserId(UserAuthenticationContext.get().getUserId());\r\n    PaginatorResponse<List<MpOpenMarketRecordDto>> marketPlaceApplyList = voyageService .queryMarketPlaceApplyList(request);\r\n    return ImgsResult.buildSuccessResult(marketPlaceApplyList);\r\n  }\r\n\r\n\r\n\r\n\r\n  @Override\r\n  public ImgsResult<AddVoyageApplyResponse> addMarketPlaceApply(AddVoyageApplyRequest request) {\r\n    request.setUserId(UserAuthenticationContext.get().getUserId());\r\n\r\n    return ImgsResult.buildSuccessResult(voyageService.addMarketPlaceApply(request));\r\n  }\r\n\r\n  @Override\r\n  public ImgsResult<UpdateVoyageApplyResponse> updateMarketPlace(UpdateVoyageApplyRequest request) {\r\n    request.setUserId(UserAuthenticationContext.get().getUserId());\r\n    return ImgsResult.buildSuccessResult(voyageService.updateMarketPlace(request));\r\n  }\r\n\r\n  @Override\r\n  public ImgsResult<QueryVoyageSitesInfoResponse> querySiteInfo(QueryVoyageSitesInfoRequest request) {\r\n    return ImgsResult.buildSuccessResult(voyageService.querySiteInfo(request));\r\n  }\r\n\r\n  @Override\r\n  public ImgsResult<SentSmsCodeResponse> sentSmsCode(SentSmsCodeRequest request) {\r\n    SentSmsCodeResponse sentSmsCodeResponse = voyageService.sentSmsCode(request);\r\n    return ImgsResult.buildSuccessResult(sentSmsCodeResponse);\r\n  }\r\n\r\n  @Override\r\n  public ImgsResult<List<CityLabel>> queryCityCodeLabel(QueryCityCodeLabelRequest request) {\r\n    return ImgsResult.buildSuccessResult(voyageService.queryCityCodeLabel(request));\r\n  }\r\n\r\n  @Override\r\n  public ImgsResult<ReminderResponse> reminder(ReminderRequest request) {\r\n    return ImgsResult.buildSuccessResult(voyageService.reminder(request));\r\n  }\r\n\r\n  /**\r\n   * 获取用户的入驻信息\r\n   * @return\r\n   */\r\n  @Override\r\n  public ImgsResult<QueryVoyageOnboardingInfoResponse> queryOnboardingInfo(QueryVoyageOnboardingInfoRequest request) {\r\n    return ImgsResult.buildSuccessResult(voyageService.queryOnboardingInfo(request));\r\n  }\r\n\r\n  /**\r\n   * 暂存 远航批量开店表单数据\r\n   * @return\r\n   */\r\n  @Override\r\n  public ImgsResult<StoreMpApplyFormDataResponse> storeMpApplyFormData(StoreMpApplyFormDataRequest request) {\r\n    return ImgsResult.buildSuccessResult(voyageService.storeMpApplyFormData(request));\r\n  }\r\n\r\n  /**\r\n   * 查询 暂存的远航批量开店表单数据\r\n   * @return\r\n   */\r\n  @Override\r\n  public ImgsResult<QueryMpApplyFormDataResponse> queryMpApplyFormData(QueryMpApplyFormDataRequest request) {\r\n    return ImgsResult.buildSuccessResult(voyageService.queryMpApplyFormData(request));\r\n  }\r\n}\r\n","fileName":"${ClassName}RpcFacadeImpl.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\resources\\FreeMarkerFile\\CodeTemplates\\iexpbizprod\\${ClassName}RpcFacadeImpl.java"},{"content":"package com.ipay.iexpbizprod.integration.ibizecoprod;\r\n\r\nimport com.ipay.ibizecoprod.common.service.facade.dto.MpCompanyInformationDto;\r\nimport com.ipay.ibizecoprod.common.service.facade.dto.MpOpenMarketApplyRecordDto;\r\nimport com.ipay.ibizecoprod.common.service.facade.dto.PaginatorResult;\r\nimport com.ipay.ibizecoprod.common.service.facade.request.GetCityLabelRequest;\r\nimport com.ipay.ibizecoprod.common.service.facade.request.voyage.*;\r\nimport com.ipay.ibizecoprod.common.service.facade.response.GetCityLabelResponse;\r\nimport com.ipay.ibizecoprod.common.service.facade.response.voyage.*;\r\nimport com.ipay.iexpbizprod.imgs.partner.voyage.request.QueryMpApplyFormDataRequest;\r\nimport com.ipay.iexpbizprod.imgs.partner.voyage.request.StoreMpApplyFormDataRequest;\r\nimport com.ipay.iexpbizprod.imgs.partner.voyage.response.QueryMpApplyFormDataResponse;\r\nimport com.ipay.iexpbizprod.imgs.partner.voyage.response.StoreMpApplyFormDataResponse;\r\n\r\nimport java.util.List;\r\n\r\n\r\n/**\r\n * @author ：lisc\r\n * @date ：Created in 2022/4/12 9:54\r\n * @description：ibizecoprod 全球远航-远程开店申请相关服务\r\n */\r\npublic interface VoyageRpcServiceClient {\r\n    /**\r\n     * 单条查询主体信息\r\n     * 根据id\r\n     *\r\n     * @param request\r\n     * @return\r\n     */\r\n    QueryCompanyInfoResponse queryCompanyInfo(QueryCompanyInfoRequest request);\r\n\r\n    /**\r\n     * 分页多条查询主体信息\r\n     *\r\n     * @param request\r\n     * @return\r\n     */\r\n    PaginatorResult<List<MpCompanyInformationDto>> queryCompanyInfoList(QueryCompanyInfoListRequest request);\r\n\r\n    /**\r\n     * 更新主体信息\r\n     *\r\n     * @param request\r\n     * @return\r\n     */\r\n    UpdateCompanyInfoResponse updateCompanyInfo(UpdateCompanyInfoRequest request);\r\n\r\n    /**\r\n     * 删除主体信息\r\n     *\r\n     * @param request\r\n     * @return\r\n     */\r\n    DeleteCompanyInfoResponse deleteCompanyInfo(DeleteCompanyInfoRequest request);\r\n\r\n    /**\r\n     * 添加主体信息\r\n     *\r\n     * @param request\r\n     * @return\r\n     */\r\n    AddCompanyInfoResponse addCompanyInfo(AddCompanyInfoRequest request);\r\n\r\n\r\n\r\n    /**\r\n     * 单条查询MarketPlace申请\r\n     * <p>\r\n     * 如果传入applyid根据主键id查询\r\n     *\r\n     * @param request\r\n     * @return\r\n     */\r\n    QueryMarketPlaceApplyResponse queryMarketPlaceApply(QueryMarketPlaceApplyRequest request);\r\n\r\n\r\n    /**\r\n     * 分页多条查询MarketPlace申请\r\n     *\r\n     * @param request\r\n     * @return\r\n     */\r\n    PaginatorResult<List<MpOpenMarketApplyRecordDto>> queryMarketPlaceList(QueryMarketPlaceApplyListRequest request);\r\n\r\n    /**\r\n     * 更新MarketPlace申请\r\n     *\r\n     * @param request\r\n     * @return\r\n     */\r\n    UpdateMarketPlaceApplyResponse updateMarketPlace(UpdateMarketPlaceApplyRequest request);\r\n\r\n    /**\r\n     * 删除开店申请\r\n     *\r\n     * @param request\r\n     * @return\r\n     */\r\n    DeleteMarketPlaceApplyResponse deleteMarketPlace(DeleteMarketPlaceApplyRequest request);\r\n\r\n    /**\r\n     * 添加开店申请\r\n     *\r\n     * @param request\r\n     * @return\r\n     */\r\n    AddMarketPlaceApplyResponse addMarketPlaceApply(AddMarketPlaceApplyRequest request);\r\n\r\n    /**\r\n     * 查询站点信息\r\n     * @param request\r\n     * @return\r\n     */\r\n    QueryMarketPlaceRuleInfoResponse queryMarketPlaceSiteInfo(QueryMarketPlaceRuleInfoRequest request);\r\n\r\n\r\n    /**\r\n     * 获取城市日志\r\n     * @param request\r\n     * @return\r\n     */\r\n    GetCityLabelResponse getCityLabel(GetCityLabelRequest request);\r\n\r\n    /**\r\n     * 催单\r\n     * @param request\r\n     * @return\r\n     */\r\n    UpdateReminderInfoResponse UpdateReminderInfo(UpdateReminderInfoRequest request);\r\n\r\n    /**\r\n     * 通过Mid获取用户的入驻信息\r\n     * @param request\r\n     * @return\r\n     */\r\n    QueryOnboardingInfoResponse queryOnboardingInfo(QueryOnboardingInfoRequest request);\r\n\r\n\r\n    /**\r\n     * 暂存 远航批量开店表单数据\r\n     * @return\r\n     */\r\n    SaveApplyFormDataResponse storeMpApplyFormData(SaveApplyFormDataRequest request);\r\n\r\n    /**\r\n     * 查询 暂存的远航批量开店表单数据\r\n     * @return\r\n     */\r\n    QueryApplyFormDataResponse queryMpApplyFormData(QueryApplyFormDataRequest request);\r\n}\r\n","fileName":"${ClassName}RpcServiceClient.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\resources\\FreeMarkerFile\\CodeTemplates\\iexpbizprod\\${ClassName}RpcServiceClient.java"},{"content":"package com.ipay.iexpbizprod.integration.ibizecoprod.impl;\r\n\r\nimport com.alibaba.common.logging.Logger;\r\nimport com.alibaba.common.logging.LoggerFactory;\r\nimport com.ipay.ialicore.common.util.log.LogUtil;\r\nimport com.ipay.ibizecoprod.common.service.facade.CityCodeFacade;\r\nimport com.ipay.ibizecoprod.common.service.facade.MpOpenMarketPlaceFacade;\r\nimport com.ipay.ibizecoprod.common.service.facade.dto.MpCompanyInformationDto;\r\nimport com.ipay.ibizecoprod.common.service.facade.dto.MpOpenMarketApplyRecordDto;\r\nimport com.ipay.ibizecoprod.common.service.facade.dto.PaginatorResult;\r\nimport com.ipay.ibizecoprod.common.service.facade.enums.UpdateMarketFormEnum;\r\nimport com.ipay.ibizecoprod.common.service.facade.request.GetCityLabelRequest;\r\nimport com.ipay.ibizecoprod.common.service.facade.request.voyage.*;\r\nimport com.ipay.ibizecoprod.common.service.facade.response.GetCityLabelResponse;\r\nimport com.ipay.ibizecoprod.common.service.facade.response.voyage.*;\r\nimport com.ipay.iexpbizprod.capability.config.util.JSONUtil;\r\nimport com.ipay.iexpbizprod.integration.ibizecoprod.VoyageRpcServiceClient;\r\n\r\nimport java.util.List;\r\n\r\n\r\n/**\r\n * @author ：lisc\r\n * @date ：Created in 2022/4/12 9:55\r\n * @description：全球远航-远程开店申请相关服务\r\n */\r\npublic class VoyageRpcServiceClientImpl implements VoyageRpcServiceClient {\r\n    private static final Logger logger = LoggerFactory.getLogger(VoyageRpcServiceClientImpl.class);\r\n\r\n    private MpOpenMarketPlaceFacade mpOpenMarketPlaceFacade;\r\n\r\n    private CityCodeFacade   cityCodeFacade;\r\n\r\n    /**\r\n     * 单条查询主体信息\r\n     * 根据id\r\n     *\r\n     * @param request\r\n     * @return\r\n     */\r\n    @Override\r\n    public QueryCompanyInfoResponse queryCompanyInfo(QueryCompanyInfoRequest request) {\r\n        QueryCompanyInfoResponse queryCompanyInfoResponse = mpOpenMarketPlaceFacade\r\n            .queryCompanyInfo(request);\r\n        LogUtil.info(logger, String.format(\"VoyageRpcServiceClient:queryCompanyInfo request:%s,response:%s\",\r\n            JSONUtil.objectToString(request), JSONUtil.objectToString(queryCompanyInfoResponse)));\r\n\r\n        return queryCompanyInfoResponse;\r\n    }\r\n\r\n    /**\r\n     * 分页多条查询主体信息\r\n     *\r\n     * @param request\r\n     * @return\r\n     */\r\n    @Override\r\n    public PaginatorResult<List<MpCompanyInformationDto>> queryCompanyInfoList(QueryCompanyInfoListRequest request) {\r\n        PaginatorResult<List<MpCompanyInformationDto>> listPaginatorResult = mpOpenMarketPlaceFacade\r\n            .queryCompanyInfoList(request);\r\n        LogUtil.info(logger, String.format(\"VoyageRpcServiceClient:queryCompanyInfoList request:%s,response:%s\",\r\n            JSONUtil.objectToString(request), JSONUtil.objectToString(listPaginatorResult)));\r\n\r\n        return listPaginatorResult;\r\n    }\r\n\r\n\r\n    /**\r\n     * 更新主体信息\r\n     *\r\n     * @param request\r\n     * @return\r\n     */\r\n    @Override\r\n    public UpdateCompanyInfoResponse updateCompanyInfo(UpdateCompanyInfoRequest request) {\r\n        UpdateCompanyInfoResponse updateCompanyInfoResponse = mpOpenMarketPlaceFacade\r\n            .updateCompanyInfo(request);\r\n        LogUtil.info(logger, String.format(\"VoyageRpcServiceClient:updateCompanyInfo request:%s,response:%s\",\r\n            JSONUtil.objectToString(request), JSONUtil.objectToString(updateCompanyInfoResponse)));\r\n\r\n        return updateCompanyInfoResponse;\r\n    }\r\n\r\n    /**\r\n     * 删除主体信息\r\n     *\r\n     * @param request\r\n     * @return\r\n     */\r\n    @Override\r\n    public DeleteCompanyInfoResponse deleteCompanyInfo(DeleteCompanyInfoRequest request) {\r\n        DeleteCompanyInfoResponse deleteCompanyInfoResponse = mpOpenMarketPlaceFacade\r\n            .deleteCompanyInfo(request);\r\n        LogUtil.info(logger, String.format(\"VoyageRpcServiceClient:deleteCompanyInfo request:%s,response:%s\",\r\n            JSONUtil.objectToString(request), JSONUtil.objectToString(deleteCompanyInfoResponse)));\r\n        return deleteCompanyInfoResponse;\r\n    }\r\n\r\n    /**\r\n     * 添加主体信息\r\n     *\r\n     * @param request\r\n     * @return\r\n     */\r\n    @Override\r\n    public AddCompanyInfoResponse addCompanyInfo(AddCompanyInfoRequest request) {\r\n        AddCompanyInfoResponse addCompanyInfoResponse = mpOpenMarketPlaceFacade\r\n            .addCompanyInfo(request);\r\n        LogUtil.info(logger, String.format(\"VoyageRpcServiceClient:addCompanyInfo request:%s,response:%s\",\r\n            JSONUtil.objectToString(request), JSONUtil.objectToString(addCompanyInfoResponse)));\r\n\r\n        return addCompanyInfoResponse;\r\n    }\r\n\r\n    @Override\r\n    public QueryMarketPlaceApplyResponse queryMarketPlaceApply(\r\n        QueryMarketPlaceApplyRequest request) {\r\n        QueryMarketPlaceApplyResponse response = mpOpenMarketPlaceFacade\r\n            .queryMarketPlaceApply(request);\r\n        LogUtil.info(logger, String.format(\"VoyageRpcServiceClient:queryMarketPlaceApply request:%s,response:%s\",\r\n            JSONUtil.objectToString(request), JSONUtil.objectToString(response)));\r\n        return response;\r\n    }\r\n\r\n    @Override\r\n    public PaginatorResult<List<MpOpenMarketApplyRecordDto>> queryMarketPlaceList(\r\n        QueryMarketPlaceApplyListRequest request) {\r\n        PaginatorResult<List<MpOpenMarketApplyRecordDto>> response = mpOpenMarketPlaceFacade\r\n            .queryMarketPlaceList(request);\r\n\r\n        LogUtil.info(logger, String.format(\"VoyageRpcServiceClient:queryMarketPlaceList request:%s,response:%s\",\r\n            JSONUtil.objectToString(request), JSONUtil.objectToString(response)));\r\n\r\n        return response;\r\n    }\r\n\r\n    @Override\r\n    public UpdateMarketPlaceApplyResponse updateMarketPlace(UpdateMarketPlaceApplyRequest request) {\r\n        request.setUpdateType(UpdateMarketFormEnum.UPDATE_APPLE_INFO.getCode());\r\n        UpdateMarketPlaceApplyResponse updateMarketPlaceApplyResponse = mpOpenMarketPlaceFacade\r\n            .updateMarketPlace(request);\r\n        LogUtil.info(logger, String.format(\"VoyageRpcServiceClient:updateMarketPlace request:%s,response:%s\",\r\n            JSONUtil.objectToString(request), JSONUtil.objectToString(updateMarketPlaceApplyResponse)));\r\n        return updateMarketPlaceApplyResponse;\r\n    }\r\n\r\n    @Override\r\n    public DeleteMarketPlaceApplyResponse deleteMarketPlace(DeleteMarketPlaceApplyRequest request) {\r\n        DeleteMarketPlaceApplyResponse deleteMarketPlaceApplyResponse = mpOpenMarketPlaceFacade\r\n            .deleteMarketPlace(request);\r\n        LogUtil.info(logger, String.format(\"VoyageRpcServiceClient:updateMarketPlace request:%s,response:%s\",\r\n            JSONUtil.objectToString(request), JSONUtil.objectToString(deleteMarketPlaceApplyResponse)));\r\n        return deleteMarketPlaceApplyResponse;\r\n    }\r\n\r\n    @Override\r\n    public AddMarketPlaceApplyResponse addMarketPlaceApply(AddMarketPlaceApplyRequest request) {\r\n        AddMarketPlaceApplyResponse addMarketPlaceApplyResponse = mpOpenMarketPlaceFacade\r\n            .addMarketPlaceApply(request);\r\n\r\n        LogUtil.info(logger, String.format(\"VoyageRpcServiceClient:updateMarketPlace request:%s,response:%s\",\r\n            JSONUtil.objectToString(request), JSONUtil.objectToString(addMarketPlaceApplyResponse)));\r\n\r\n        return addMarketPlaceApplyResponse;\r\n    }\r\n\r\n    @Override\r\n    public QueryMarketPlaceRuleInfoResponse queryMarketPlaceSiteInfo(\r\n        QueryMarketPlaceRuleInfoRequest request) {\r\n        QueryMarketPlaceRuleInfoResponse queryMarketPlaceRuleInfoResponse = mpOpenMarketPlaceFacade\r\n            .queryMarketPlaceSiteInfo(request);\r\n\r\n        LogUtil.info(logger, String.format(\"VoyageRpcServiceClient:queryMarketPlaceSiteInfo request:%s,response:%s\",\r\n            JSONUtil.objectToString(request), JSONUtil.objectToString(queryMarketPlaceRuleInfoResponse)));\r\n\r\n        return queryMarketPlaceRuleInfoResponse;\r\n    }\r\n\r\n    @Override\r\n    public GetCityLabelResponse getCityLabel(GetCityLabelRequest request) {\r\n        GetCityLabelResponse cityLabel = cityCodeFacade.getCityLabel(request);\r\n        LogUtil.info(logger, String.format(\"VoyageRpcServiceClient:queryMarketPlaceSiteInfo request:%s,response:%s\",\r\n            JSONUtil.objectToString(request), JSONUtil.objectToString(cityLabel)));\r\n        return cityLabel;\r\n    }\r\n\r\n    @com.ipay.iexpbizprod.capability.log.Logger\r\n    @Override\r\n    public UpdateReminderInfoResponse UpdateReminderInfo(UpdateReminderInfoRequest request) {\r\n        UpdateReminderInfoResponse updateReminderInfoResponse = mpOpenMarketPlaceFacade.UpdateReminderInfo(request);\r\n        return updateReminderInfoResponse;\r\n    }\r\n\r\n    /**\r\n     * 通过Mid获取用户的入驻信息\r\n     * @param request\r\n     * @return\r\n     */\r\n    @Override\r\n    public QueryOnboardingInfoResponse queryOnboardingInfo(QueryOnboardingInfoRequest request) {\r\n        QueryOnboardingInfoResponse queryOnboardingInfoResponse = mpOpenMarketPlaceFacade.queryOnboardingInfo(request);\r\n        LogUtil.info(logger, String.format(\"VoyageRpcServiceClientImpl:queryOnboardingInfo: request: %s response: %s\" ,\r\n                JSONUtil.objectToString(request),JSONUtil.objectToString(queryOnboardingInfoResponse)));\r\n        return queryOnboardingInfoResponse;\r\n    }\r\n\r\n    @Override\r\n    public SaveApplyFormDataResponse storeMpApplyFormData(SaveApplyFormDataRequest request) {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public QueryApplyFormDataResponse queryMpApplyFormData(QueryApplyFormDataRequest request) {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Sets the mpOpenMarketPlaceFacade. *\r\n     * <p>You can use getMpOpenMarketPlaceFacade() to get the value of mpOpenMarketPlaceFacade</p>\r\n     * * @param mpOpenMarketPlaceFacade mpOpenMarketPlaceFacade\r\n     */\r\n    public void setMpOpenMarketPlaceFacade(MpOpenMarketPlaceFacade mpOpenMarketPlaceFacade) {\r\n        this.mpOpenMarketPlaceFacade = mpOpenMarketPlaceFacade;\r\n    }\r\n\r\n    public void setCityCodeFacade(CityCodeFacade cityCodeFacade) {\r\n        this.cityCodeFacade = cityCodeFacade;\r\n    }\r\n}\r\n","fileName":"${ClassName}RpcServiceClientImpl.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\resources\\FreeMarkerFile\\CodeTemplates\\iexpbizprod\\${ClassName}RpcServiceClientImpl.java"},{"content":"package com.ipay.iexpbizprod.partner.domain.service.voyage;\r\n\r\n\r\nimport com.ipay.ibizecoprod.common.service.facade.response.CityLabel;\r\nimport com.ipay.iexpbizprod.imgs.partner.voyage.dto.MpOpenMarketRecordDto;\r\nimport com.ipay.iexpbizprod.imgs.partner.voyage.dto.MpVoyageCompanyInformationDto;\r\nimport com.ipay.iexpbizprod.imgs.partner.voyage.request.*;\r\nimport com.ipay.iexpbizprod.imgs.partner.voyage.response.*;\r\n\r\nimport java.util.List;\r\n\r\npublic interface VoyageService {\r\n    /**\r\n     * 单条查询主体信息\r\n     * 根据id\r\n     * @param request\r\n     * @return\r\n     */\r\n    QueryVoyageCompanyInfoResponse queryCompanyInfo(QueryVoyageCompanyInfoRequest request);\r\n\r\n    /**\r\n     * 分页多条查询主体信息\r\n     * @param request\r\n     * @return\r\n     */\r\n    PaginatorResponse<List<MpVoyageCompanyInformationDto>> queryCompanyInfoList(QueryVoyageCompanyInfoListRequest request);\r\n\r\n    /**\r\n     * 更新主体信息\r\n     * @param request\r\n     * @return\r\n     */\r\n    UpdateVoyageCompanyInfoResponse updateCompanyInfo(UpdateVoyageCompanyInfoRequest request);\r\n\r\n    /**\r\n     * 删除主体信息\r\n     * @param request\r\n     * @return\r\n     */\r\n    DeleteVoyageCompanyInfoResponse deleteCompanyInfo(DeleteVoyageCompanyInfoRequest request);\r\n\r\n    /**\r\n     * 添加主体信息\r\n     * @param request\r\n     * @return\r\n     */\r\n\r\n    AddVoyageCompanyInfoResponse addCompanyInfo(AddVoyageCompanyInfoRequest request);\r\n\r\n\r\n\r\n    //MarketPlace\r\n    /**\r\n     * 单条查询MarketPlace申请\r\n     *\r\n     * 如果传入applyid根据主键id查询\r\n     * @param request\r\n     * @return\r\n     */\r\n    QueryVoyageApplyResponse queryMarketPlaceApply(QueryVoyageApplyRequest request);\r\n\r\n\r\n    /**\r\n     * 分页多条查询MarketPlace申请\r\n     * @param request\r\n     * @return\r\n     */\r\n    PaginatorResponse<List<MpOpenMarketRecordDto>> queryMarketPlaceApplyList(QueryVoyageApplyListRequest request);\r\n\r\n\r\n    /**\r\n     * 删除开店申请\r\n     * @param request\r\n     * @return\r\n     */\r\n    DeleteVoyageApplyResponse deleteMarketPlaceApply(DeleteVoyageApplyRequest request);\r\n\r\n    /**\r\n     * 添加开店申请\r\n     * @param request\r\n     * @return\r\n     */\r\n    AddVoyageApplyResponse addMarketPlaceApply(AddVoyageApplyRequest request);\r\n\r\n\r\n\r\n    UpdateVoyageApplyResponse updateMarketPlace(UpdateVoyageApplyRequest request);\r\n\r\n\r\n    /**\r\n     * 查询站点信息\r\n     * @param request\r\n     * @return\r\n     */\r\n    QueryVoyageSitesInfoResponse querySiteInfo(QueryVoyageSitesInfoRequest request);\r\n\r\n    /**\r\n     * 发送短信验证码\r\n     * @param request\r\n     * @return\r\n     */\r\n    SentSmsCodeResponse sentSmsCode(SentSmsCodeRequest request);\r\n\r\n    /**\r\n     * 获取联动城市选框数据\r\n     * @param request\r\n     * @return\r\n     */\r\n    List<CityLabel>  queryCityCodeLabel(QueryCityCodeLabelRequest request);\r\n\r\n    /**\r\n     * 开店催单\r\n     * @param request\r\n     * @return\r\n     */\r\n    ReminderResponse reminder(ReminderRequest request);\r\n\r\n    /**\r\n     * 通过Mid获取用户的入驻信息\r\n     * @param request\r\n     * @return\r\n     */\r\n    QueryVoyageOnboardingInfoResponse queryOnboardingInfo(QueryVoyageOnboardingInfoRequest request);\r\n\r\n    /**\r\n     * 暂存 远航批量开店表单数据\r\n     * @return\r\n     */\r\n    StoreMpApplyFormDataResponse storeMpApplyFormData(StoreMpApplyFormDataRequest request);\r\n\r\n    /**\r\n     * 查询 暂存的远航批量开店表单数据\r\n     * @return\r\n     */\r\n   QueryMpApplyFormDataResponse queryMpApplyFormData(QueryMpApplyFormDataRequest request);\r\n}\r\n","fileName":"${ClassName}Service.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\resources\\FreeMarkerFile\\CodeTemplates\\iexpbizprod\\${ClassName}Service.java"},{"content":"package com.ipay.iexpbizprod.partner.domain.service.voyage.impl;\r\n\r\nimport com.alibaba.common.lang.StringUtil;\r\nimport com.alibaba.common.logging.Logger;\r\nimport com.alibaba.common.logging.LoggerFactory;\r\nimport com.alipay.sofa.runtime.api.annotation.SofaReference;\r\nimport com.alipay.sofa.runtime.api.annotation.SofaService;\r\nimport com.alipay.sofa.runtime.api.annotation.SofaServiceBinding;\r\nimport com.ipay.ialicore.common.enums.CountryEnum;\r\nimport com.ipay.ialicore.common.util.log.LogUtil;\r\nimport com.ipay.ibizecoprod.common.service.facade.dto.MarketPlaceSiteRuleDto;\r\nimport com.ipay.ibizecoprod.common.service.facade.dto.MpCompanyInformationDto;\r\nimport com.ipay.ibizecoprod.common.service.facade.dto.MpOpenMarketApplyRecordDto;\r\nimport com.ipay.ibizecoprod.common.service.facade.dto.PaginatorResult;\r\nimport com.ipay.ibizecoprod.common.service.facade.dto.SiteRuleDto;\r\nimport com.ipay.ibizecoprod.common.service.facade.enums.PlatformReviewEnum;\r\nimport com.ipay.ibizecoprod.common.service.facade.request.GetCityLabelRequest;\r\nimport com.ipay.ibizecoprod.common.service.facade.request.voyage.*;\r\nimport com.ipay.ibizecoprod.common.service.facade.response.CityLabel;\r\nimport com.ipay.ibizecoprod.common.service.facade.response.GetCityLabelResponse;\r\nimport com.ipay.ibizecoprod.common.service.facade.response.voyage.*;\r\nimport com.ipay.iexpbizprod.capability.authentication.UserAuthentication;\r\nimport com.ipay.iexpbizprod.capability.authentication.util.UserAuthenticationContext;\r\nimport com.ipay.iexpbizprod.capability.config.util.JSONUtil;\r\nimport com.ipay.iexpbizprod.capability.errorhandling.ErrorCode;\r\nimport com.ipay.iexpbizprod.capability.errorhandling.util.AssertService;\r\nimport com.ipay.iexpbizprod.capability.i18n.I18nUtils;\r\nimport com.ipay.iexpbizprod.capability.otp.dto.OtpTypeEnum;\r\nimport com.ipay.iexpbizprod.capability.otp.dto.PhoneNumber;\r\nimport com.ipay.iexpbizprod.capability.otp.request.OtpSendRequest;\r\nimport com.ipay.iexpbizprod.capability.otp.request.OtpVerifyRequest;\r\nimport com.ipay.iexpbizprod.capability.otp.result.OtpSendResult;\r\nimport com.ipay.iexpbizprod.capability.otp.result.OtpVerifyResult;\r\nimport com.ipay.iexpbizprod.capability.otp.service.OtpService;\r\nimport com.ipay.iexpbizprod.common.tool.constants.enums.ProductTypeEnum;\r\nimport com.ipay.iexpbizprod.imgs.partner.voyage.dto.MPSiteRuleDto;\r\nimport com.ipay.iexpbizprod.imgs.partner.voyage.dto.MpOpenMarketRecordDto;\r\nimport com.ipay.iexpbizprod.imgs.partner.voyage.dto.MpVoyageCompanyInformationDto;\r\nimport com.ipay.iexpbizprod.imgs.partner.voyage.dto.SiteLabelDto;\r\nimport com.ipay.iexpbizprod.imgs.partner.voyage.request.*;\r\nimport com.ipay.iexpbizprod.imgs.partner.voyage.response.*;\r\nimport com.ipay.iexpbizprod.integration.ibizecoprod.VoyageRpcServiceClient;\r\nimport com.ipay.iexpbizprod.integration.imember.ImemberProdClient;\r\nimport com.ipay.iexpbizprod.partner.domain.service.voyage.VoyageService;\r\nimport com.ipay.iexpbizprod.partner.error.EcoErrorCodeMappingEnum;\r\nimport com.ipay.imemberprod.service.facade.result.prod.memebership.MembershipLevelAndBenefitsQueryResult;\r\nimport org.apache.commons.collections.CollectionUtils;\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport com.ipay.iexpbizprod.capability.tools.beans.BeanUtils;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\n@Service\r\n@SofaService(bindings = {@SofaServiceBinding(bindingType = \"tr\")})\r\npublic class VoyageServiceImpl implements VoyageService {\r\n\r\n    @SofaReference\r\n    private VoyageRpcServiceClient voyageRpcServiceClient;\r\n\r\n    /**\r\n     * 发送短信验证\r\n     */\r\n    @SofaReference\r\n    private OtpService otpService;\r\n\r\n    @SofaReference\r\n    private ImemberProdClient imemberProdClient;\r\n\r\n    @SofaReference\r\n    private AssertService assertService;\r\n\r\n\r\n    private static final Logger logger = LoggerFactory.getLogger(VoyageServiceImpl.class);\r\n\r\n    /**\r\n     * 开店主体添加，全球远航手机OTP发送scene\r\n     * 对应参数中心新的ServiceCode:VOYAGE_VERIFY_MOBILE / VOYAGE_VERIFY_MOBILE_EN \r\n     * OTP文案无#action#\r\n     */\r\n    private static final String VOYAGE_MOBILE_OTP = \"VOYAGE_MOBILE_OTP\";\r\n\r\n    /**\r\n     * 单条查询主体信息\r\n     * 根据id\r\n     *\r\n     * @param request\r\n     * @return\r\n     */\r\n\r\n    @Override\r\n    public QueryVoyageCompanyInfoResponse queryCompanyInfo(QueryVoyageCompanyInfoRequest request) {\r\n\r\n        LogUtil.info(logger, String.format(\"VoyageServiceImpl:queryCompanyInfo:start , request: %s\", JSONUtil.objectToString(request)));\r\n        QueryVoyageCompanyInfoResponse queryVoyageCompanyInfoResponse = new QueryVoyageCompanyInfoResponse();\r\n        // 转换入参\r\n        QueryCompanyInfoRequest queryCompanyInfoRequest = getQueryCompanyInfoRequest(request);\r\n        QueryCompanyInfoResponse queryCompanyInfoResponse = voyageRpcServiceClient.queryCompanyInfo(queryCompanyInfoRequest);\r\n\r\n        assertService.notNull(queryCompanyInfoResponse, ErrorCode.BIZECOPROD_INVOKE_FAILED);\r\n        assertService.isTrue(queryCompanyInfoResponse.isSuccess(), ErrorCode.BIZECOPROD_INVOKE_FAILED);\r\n        // 转换对象\r\n        buildQueryVoyageCompanyInfoResponse(queryVoyageCompanyInfoResponse, queryCompanyInfoResponse);\r\n\r\n        LogUtil.info(logger, String.format(\"VoyageServiceImpl:queryCompanyInfo:end , response: %s\", JSONUtil.objectToString(queryVoyageCompanyInfoResponse)));\r\n        return queryVoyageCompanyInfoResponse;\r\n    }\r\n\r\n    /**\r\n     * 分页多条查询主体信息\r\n     *\r\n     * @param request\r\n     * @return\r\n     */\r\n\r\n    @Override\r\n    public PaginatorResponse<List<MpVoyageCompanyInformationDto>> queryCompanyInfoList(QueryVoyageCompanyInfoListRequest request) {\r\n        LogUtil.info(logger, String.format(\"VoyageServiceImpl:queryCompanyInfoList:start , request: %s\", JSONUtil.objectToString(request)));\r\n        // 转换入参\r\n        QueryCompanyInfoListRequest queryCompanyInfoListRequest = buildQueryCompanyInfoListRequest(request);\r\n        PaginatorResult<List<MpCompanyInformationDto>> queryPaginatorResult = voyageRpcServiceClient.queryCompanyInfoList(queryCompanyInfoListRequest);\r\n\r\n        assertService.isTrue(queryPaginatorResult.isSuccess(), ErrorCode.BIZECOPROD_INVOKE_FAILED);\r\n\r\n        PaginatorResponse paginatorResponse = buildPaginatorResult(queryPaginatorResult);\r\n\r\n        LogUtil.info(logger, String.format(\"VoyageServiceImpl:queryCompanyInfoList:end , response: %s\", JSONUtil.objectToString(paginatorResponse)));\r\n        return paginatorResponse;\r\n    }\r\n\r\n    /**\r\n     * 更新主体信息\r\n     *\r\n     * @param request\r\n     * @return\r\n     */\r\n\r\n    @Override\r\n    public UpdateVoyageCompanyInfoResponse updateCompanyInfo(UpdateVoyageCompanyInfoRequest request) {\r\n        LogUtil.info(logger, String.format(\"VoyageServiceImpl:updateCompanyInfo:start , request: %s\", JSONUtil.objectToString(request)));\r\n        // 创建response对象\r\n        UpdateVoyageCompanyInfoResponse updateVoyageCompanyInfoResponse = new UpdateVoyageCompanyInfoResponse();\r\n        // 转换请求对象\r\n        UpdateCompanyInfoRequest updateCompanyInfoRequest = buildUpdateCompanyInfoRequest(request);\r\n        // 查询主体信息\r\n        QueryCompanyInfoResponse queryCompanyInfo = getCompanyInfoResponse(request);\r\n        assertService.notNull(queryCompanyInfo, ErrorCode.VOYAGE_COMPANY_INFO_DO_NOT_EXIST);\r\n        assertService.notNull(queryCompanyInfo.getMpCompanyInformationDto(), ErrorCode.VOYAGE_COMPANY_INFO_DO_NOT_EXIST);\r\n        String phoneNumber = request.getPhoneNumber();\r\n        // 判断是否修改手机号\r\n        if (!phoneNumber.equals(queryCompanyInfo.getMpCompanyInformationDto().getPhoneNumber()) && StringUtils.isNoneEmpty(request.getCode())) {\r\n            // 获取短信验证码校验结果\r\n            OtpVerifyResult otpResult = getVerifyOtpResult(request.getCode(), request.getCountryCode(), request.getPhoneNumber(), request.getEnvInfo().getLang(), request.getRequestId());\r\n            assertService.isTrue(otpResult.isSuccess(), ErrorCode.VERIFY_OTP_FAILED);\r\n        }\r\n        UpdateCompanyInfoResponse updateCompanyInfoResponse = voyageRpcServiceClient.updateCompanyInfo(updateCompanyInfoRequest);\r\n\r\n        assertService.notNull(updateCompanyInfoResponse, ErrorCode.BIZECOPROD_INVOKE_FAILED);\r\n        assertService.isTrue(updateCompanyInfoResponse.isSuccess(), ErrorCode.BIZECOPROD_INVOKE_FAILED);\r\n\r\n        buildUpdateCompanyInfoResponse(updateVoyageCompanyInfoResponse, updateCompanyInfoResponse);\r\n\r\n        LogUtil.info(logger, String.format(\"VoyageServiceImpl:updateCompanyInfo:end , response: %s\", JSONUtil.objectToString(updateVoyageCompanyInfoResponse)));\r\n        return updateVoyageCompanyInfoResponse;\r\n    }\r\n\r\n    /**\r\n     * 删除主体信息\r\n     *\r\n     * @param request\r\n     * @return\r\n     */\r\n\r\n    @Override\r\n    public DeleteVoyageCompanyInfoResponse deleteCompanyInfo(DeleteVoyageCompanyInfoRequest request) {\r\n        LogUtil.info(logger, String.format(\"VoyageServiceImpl:deleteCompanyInfo:start , request: %s\", JSONUtil.objectToString(request)));\r\n        DeleteVoyageCompanyInfoResponse deleteVoyageCompanyInfoResponse = new DeleteVoyageCompanyInfoResponse();\r\n        // 查询主体信息\r\n        QueryCompanyInfoResponse queryCompanyInfoResponse = getQueryCompanyInfoResponse(request);\r\n        assertService.notNull(queryCompanyInfoResponse, ErrorCode.VOYAGE_COMPANY_INFO_DO_NOT_EXIST);\r\n        assertService.notNull(queryCompanyInfoResponse.getMpCompanyInformationDto(), ErrorCode.VOYAGE_COMPANY_INFO_DO_NOT_EXIST);\r\n        // 判断是否允许删除\r\n        assertService.isTrue(queryCompanyInfoResponse.getCanModify(), ErrorCode.VOYAGE_COMPANY_INFO_NOT_ALLOWED_DELETE);\r\n        // 构建入参\r\n        DeleteCompanyInfoRequest deleteCompanyInfoRequest = buildDeleteCompanyInfoRequest(request);\r\n        DeleteCompanyInfoResponse deleteCompanyInfoResponse = voyageRpcServiceClient.deleteCompanyInfo(deleteCompanyInfoRequest);\r\n        assertService.notNull(deleteCompanyInfoResponse, ErrorCode.BIZECOPROD_INVOKE_FAILED);\r\n        assertService.isTrue(deleteCompanyInfoResponse.isSuccess(), ErrorCode.BIZECOPROD_INVOKE_FAILED);\r\n        // 构建出参\r\n        buildDeleteVoyageCompanyInfoResponse(deleteVoyageCompanyInfoResponse, deleteCompanyInfoResponse);\r\n\r\n        LogUtil.info(logger, String.format(\"VoyageServiceImpl:deleteCompanyInfo:end , response: %s\", JSONUtil.objectToString(deleteVoyageCompanyInfoResponse)));\r\n        return deleteVoyageCompanyInfoResponse;\r\n    }\r\n\r\n\r\n    /**\r\n     * 添加主体信息\r\n     *\r\n     * @param request\r\n     * @return\r\n     */\r\n\r\n    @Override\r\n    public AddVoyageCompanyInfoResponse addCompanyInfo(AddVoyageCompanyInfoRequest request) {\r\n        LogUtil.info(logger, String.format(\"VoyageServiceImpl:addCompanyInfo:start , request: %s\", JSONUtil.objectToString(request)));\r\n        AddVoyageCompanyInfoResponse addVoyageCompanyInfoResponse = new AddVoyageCompanyInfoResponse();\r\n        AddCompanyInfoRequest addCompanyInfoRequest = buildAddCompanyInfoRequest(request);\r\n        // 校验短信验证码\r\n        OtpVerifyResult otpResult = getVerifyOtpResult(request.getCode(), request.getCountryCode(), request.getPhoneNumber(), request.getEnvInfo().getLang(), request.getRequestId());\r\n        assertService.isTrue(otpResult.isSuccess(), ErrorCode.VERIFY_OTP_FAILED);\r\n        // 调下游服务,保存主体信息\r\n        AddCompanyInfoResponse addCompanyInfoResponse = voyageRpcServiceClient.addCompanyInfo(addCompanyInfoRequest);\r\n        assertService.notNull(addCompanyInfoResponse, ErrorCode.BIZECOPROD_INVOKE_FAILED);\r\n\r\n        assertService.notEquals(EcoErrorCodeMappingEnum.COMPANY_INFO_EXIST.getExternalCode(), addCompanyInfoResponse.getErrorCode(),\r\n                EcoErrorCodeMappingEnum.getByCode(addCompanyInfoResponse.getErrorCode()), \"company info has exist\");\r\n\r\n        assertService.isTrue(addCompanyInfoResponse.isSuccess(), ErrorCode.BIZECOPROD_INVOKE_FAILED);\r\n\r\n        buildAddVoyageCompanyInfoResponse(addVoyageCompanyInfoResponse, addCompanyInfoResponse);\r\n\r\n        LogUtil.info(logger, String.format(\"VoyageServiceImpl:addCompanyInfo:end , response: %s\", JSONUtil.objectToString(addVoyageCompanyInfoResponse)));\r\n        return addVoyageCompanyInfoResponse;\r\n    }\r\n\r\n    /**\r\n     * 单条查询MarketPlace申请\r\n     * <p>\r\n     * 如果传入applyid根据主键id查询\r\n     *\r\n     * @param request\r\n     * @return\r\n     */\r\n    @com.ipay.iexpbizprod.capability.log.Logger\r\n    @Override\r\n    public QueryVoyageApplyResponse queryMarketPlaceApply(QueryVoyageApplyRequest request) {\r\n        QueryMarketPlaceApplyRequest queryMarketPlaceApplyRequest = new QueryMarketPlaceApplyRequest();\r\n        queryMarketPlaceApplyRequest.setApplyId(request.getApplyId());\r\n        QueryMarketPlaceApplyResponse response = voyageRpcServiceClient\r\n                .queryMarketPlaceApply(queryMarketPlaceApplyRequest);\r\n        QueryVoyageApplyResponse queryVoyageApplyResponse = new QueryVoyageApplyResponse();\r\n\r\n        assertService.notNull(response, ErrorCode.BIZECOPROD_INVOKE_FAILED);\r\n        assertService.isTrue(response.isSuccess(), ErrorCode.BIZECOPROD_INVOKE_FAILED);\r\n\r\n        MpOpenMarketApplyRecordDto mpOpenMarketApplyRecordDto = response.getMpOpenMarketApplyRecordDto();\r\n\r\n        if (mpOpenMarketApplyRecordDto != null) {\r\n            MpOpenMarketRecordDto mpOpenMarketRecordDto = new MpOpenMarketRecordDto();\r\n            mpOpenMarketRecordDto = mpOpenMarketRecordDto.buildResponseDTO(mpOpenMarketApplyRecordDto);\r\n            queryVoyageApplyResponse.setMpOpenMarketApplyRecordDto(mpOpenMarketRecordDto);\r\n        }\r\n        return queryVoyageApplyResponse;\r\n    }\r\n\r\n    /**\r\n     * 分页多条查询MarketPlace申请\r\n     *\r\n     * @param request\r\n     * @return\r\n     */\r\n\r\n    @Override\r\n    public PaginatorResponse<List<MpOpenMarketRecordDto>> queryMarketPlaceApplyList(\r\n            QueryVoyageApplyListRequest request) {\r\n        QueryMarketPlaceApplyListRequest queryMarketPlaceApplyListRequest = new QueryMarketPlaceApplyListRequest();\r\n        BeanUtils.copyProperties(request, queryMarketPlaceApplyListRequest);\r\n        PaginatorResult<List<MpOpenMarketApplyRecordDto>> listPaginatorResult = voyageRpcServiceClient\r\n                .queryMarketPlaceList(queryMarketPlaceApplyListRequest);\r\n\r\n        assertService.isTrue(listPaginatorResult.isSuccess(), ErrorCode.BIZECOPROD_INVOKE_FAILED);\r\n\r\n        List<MpOpenMarketRecordDto> mpOpenMarketRecordDtos = new ArrayList<>();\r\n        if (CollectionUtils.isNotEmpty(listPaginatorResult.getValue())) {\r\n            for (MpOpenMarketApplyRecordDto mpOpenMarketApplyRecordDto : listPaginatorResult\r\n                    .getValue()) {\r\n                MpOpenMarketRecordDto mpOpenMarketRecordDto = new MpOpenMarketRecordDto();\r\n                MpOpenMarketRecordDto recordDto = mpOpenMarketRecordDto\r\n                        .buildResponseDTO(mpOpenMarketApplyRecordDto);\r\n                mpOpenMarketRecordDtos.add(recordDto);\r\n            }\r\n        }\r\n\r\n        PaginatorResponse paginatorResponse = PaginatorResponse.builder()\r\n                .paginator(listPaginatorResult.getPaginator())\r\n                .value(mpOpenMarketRecordDtos).build();\r\n        return paginatorResponse;\r\n    }\r\n\r\n    /**\r\n     * 删除开店申请\r\n     *\r\n     * @param request\r\n     * @return\r\n     */\r\n\r\n    @Override\r\n    public DeleteVoyageApplyResponse deleteMarketPlaceApply(DeleteVoyageApplyRequest request) {\r\n        DeleteVoyageApplyResponse response = new DeleteVoyageApplyResponse();\r\n\r\n        DeleteMarketPlaceApplyRequest deleteMarketPlaceApplyRequest = new DeleteMarketPlaceApplyRequest();\r\n        deleteMarketPlaceApplyRequest.setApplyId(request.getApplyId());\r\n        deleteMarketPlaceApplyRequest.setUserId(request.getUserId());\r\n        DeleteMarketPlaceApplyResponse deleteMarketPlaceApplyResponse = voyageRpcServiceClient\r\n                .deleteMarketPlace(deleteMarketPlaceApplyRequest);\r\n        BeanUtils.copyProperties(deleteMarketPlaceApplyResponse, response);\r\n        return response;\r\n    }\r\n\r\n    /**\r\n     * 添加开店申请\r\n     *\r\n     * @param request\r\n     * @return\r\n     */\r\n    @Override\r\n    public AddVoyageApplyResponse addMarketPlaceApply(AddVoyageApplyRequest request) {\r\n        // 允许访问的地区\r\n        List<String> countryList = Arrays.asList(CountryEnum.CHINA.getAlpha2Code(), CountryEnum.HONG_KONG.getAlpha2Code());\r\n        // 当前用户地区\r\n        UserAuthentication userAuthentication = UserAuthenticationContext.get();\r\n        String productTypeCode = userAuthentication.getProductTypeCode();\r\n        CountryEnum country = userAuthentication.getCountry();\r\n\r\n        boolean countryCheck = countryList.contains(country.getAlpha2Code()) && ProductTypeEnum.E_COMMERCE.getCode().equalsIgnoreCase(productTypeCode);\r\n        LogUtil.info(logger, String.format(\"VoyageServiceImpl:addMarketPlaceApply: UserAuthentication: %s \" ,\r\n                JSONUtil.objectToString(userAuthentication)));\r\n        // 非指定地区\r\n        assertService.isTrue(countryCheck, ErrorCode.VOAYGE_UNEXPECTED_REGION);\r\n\r\n        //查询当前用户信息\r\n        QueryCompanyInfoRequest queryCompanyInfoRequest = new QueryCompanyInfoRequest();\r\n        queryCompanyInfoRequest.setUserId(request.getUserId());\r\n        queryCompanyInfoRequest.setCompanyId(request.getCompanyId());\r\n        QueryCompanyInfoResponse queryCompanyInfoResponse = voyageRpcServiceClient.queryCompanyInfo(queryCompanyInfoRequest);\r\n        //查询结果不能为空\r\n        assertService.notNull(queryCompanyInfoResponse, ErrorCode.VOYAGE_COMPANY_INFO_DO_NOT_EXIST);\r\n        assertService.isTrue(queryCompanyInfoResponse.isSuccess(), ErrorCode.BIZECOPROD_INVOKE_FAILED);\r\n\r\n        //手机号有修改，验证码不能为空\r\n        if (!StringUtil.equals(queryCompanyInfoResponse.getMpCompanyInformationDto().getPhoneNumber(),request.getPhoneNumber())) {\r\n            assertService.isTrue(StringUtils.isNotBlank(request.getCode()),ErrorCode.VOYAGE_PHONE_NUMBER_CHANGE_NEED_CODE);\r\n            assertService.isTrue(StringUtils.isNotBlank(request.getRequestId()),ErrorCode.VOYAGE_PHONE_NUMBER_CHANGE_NEED_CODE);\r\n            // 获取短信验证码校验结果\r\n            OtpVerifyResult otpResult = getVerifyOtpResult(request.getCode(),\r\n                    request.getCountryCode(), request.getPhoneNumber(), request.getEnvInfo().getLang(),\r\n                    request.getRequestId());\r\n            assertService.isTrue(otpResult.isSuccess(), ErrorCode.VERIFY_OTP_FAILED);\r\n        }\r\n        AddMarketPlaceApplyRequest addMarketPlaceApplyRequest = AddVoyageApplyRequest.buildRequestDTO(request);\r\n        //获取用户等级\r\n        MembershipLevelAndBenefitsQueryResult membershipLevelAndBenefitsQueryResult = imemberProdClient\r\n                .queryMembershipLevelAndBenefits(UserAuthenticationContext.get().getUserId());\r\n        membershipLevelAndBenefitsQueryResult.getLevelCode();\r\n        addMarketPlaceApplyRequest.setUserLevel(membershipLevelAndBenefitsQueryResult.getLevelCode());\r\n        //添加\r\n        AddMarketPlaceApplyResponse addMarketPlaceApplyResponse = voyageRpcServiceClient.addMarketPlaceApply(addMarketPlaceApplyRequest);\r\n\r\n        assertService.notEquals(EcoErrorCodeMappingEnum.APPLY_INFO_HAS_EXIST.getExternalCode(),\r\n                addMarketPlaceApplyResponse.getErrorCode(),\r\n                EcoErrorCodeMappingEnum.getByCode(addMarketPlaceApplyResponse.getErrorCode()),\r\n                \"apply info has exist\");\r\n        assertService.isTrue(addMarketPlaceApplyResponse.isSuccess(), ErrorCode.BIZECOPROD_INVOKE_FAILED);\r\n        return AddVoyageApplyResponse\r\n                .buildResponse(addMarketPlaceApplyResponse);\r\n    }\r\n\r\n\r\n    @Override\r\n    public UpdateVoyageApplyResponse updateMarketPlace(UpdateVoyageApplyRequest request) {\r\n        LogUtil.info(logger, String.format(\"VoyageServiceImpl:updateMarketPlace:end , request: %s\",\r\n                JSONUtil.objectToString(request)));\r\n        QueryCompanyInfoRequest queryCompanyInfoRequest = new QueryCompanyInfoRequest();\r\n        queryCompanyInfoRequest.setCompanyId(request.getCompanyId());\r\n        queryCompanyInfoRequest.setUserId(request.getUserId());\r\n        QueryCompanyInfoResponse queryCompanyInfoResponse = voyageRpcServiceClient\r\n                .queryCompanyInfo(queryCompanyInfoRequest);\r\n        assertService.isTrue(queryCompanyInfoResponse.isSuccess(), ErrorCode.BIZECOPROD_INVOKE_FAILED);\r\n\r\n        //通过查询出的接口，进行逻辑判断，如果存在非fail状态，不能提交\r\n        QueryMarketPlaceApplyListRequest applyListRequest=new QueryMarketPlaceApplyListRequest();\r\n        applyListRequest.setUserId(request.getUserId());\r\n        applyListRequest.setMarketPlace(request.getMarketplace());\r\n        applyListRequest.setSite(request.getSite());\r\n        List<String> platformReviews= Arrays.asList(PlatformReviewEnum.INIT.getCode(),PlatformReviewEnum.SUCCESS.getCode(),PlatformReviewEnum.PROCESS.getCode());\r\n        applyListRequest.setCompanyId(request.getCompanyId());\r\n        applyListRequest.setPlatformReviews(platformReviews);\r\n        PaginatorResult<List<MpOpenMarketApplyRecordDto>> list = voyageRpcServiceClient\r\n            .queryMarketPlaceList(applyListRequest);\r\n        assertService.isTrue(list.isSuccess(), ErrorCode.BIZECOPROD_INVOKE_FAILED);\r\n        assertService.isTrue(list.getPaginator().getTotalCount()==0, ErrorCode.VOYAGE_REPEAT_APPLY_INFO);\r\n\r\n\r\n        if (!StringUtil.equals(request.getPhoneNumber(),\r\n                queryCompanyInfoResponse.getMpCompanyInformationDto().getPhoneNumber())) {\r\n            assertService.notBlank(request.getCode(), ErrorCode.VOYAGE_PHONE_NUMBER_CHANGE_NEED_CODE);\r\n            // 校验短信验证码\r\n            OtpVerifyResult otpResult = getVerifyOtpResult(request.getCode(),\r\n                    request.getCountryCode(), request.getPhoneNumber(), request.getEnvInfo().getLang(),\r\n                    request.getRequestId());\r\n            assertService.isTrue(otpResult.isSuccess(), ErrorCode.VERIFY_OTP_FAILED);\r\n        }\r\n        UpdateMarketPlaceApplyRequest updateMarketPlaceApplyRequest = UpdateVoyageApplyRequest\r\n                .buildRequest(request);\r\n        UpdateMarketPlaceApplyResponse updateMarketPlaceApplyResponse = voyageRpcServiceClient\r\n                .updateMarketPlace(updateMarketPlaceApplyRequest);\r\n\r\n        assertService.isTrue(updateMarketPlaceApplyResponse.isSuccess(), ErrorCode.UPDATE_MARET_FAIL);\r\n\r\n        return UpdateVoyageApplyResponse.buildResponse(updateMarketPlaceApplyResponse);\r\n    }\r\n\r\n    /**\r\n     * 查询站点信息\r\n     * @param request\r\n     * @return\r\n     */\r\n    @Override\r\n    public QueryVoyageSitesInfoResponse querySiteInfo(QueryVoyageSitesInfoRequest request) {\r\n        QueryMarketPlaceRuleInfoRequest queryMarketPlaceRuleInfoRequest = new QueryMarketPlaceRuleInfoRequest(request.getMarketplace(),I18nUtils.getLocaleStringFromTraceContext());\r\n        QueryMarketPlaceRuleInfoResponse queryMarketPlaceRuleInfoResponse = voyageRpcServiceClient.queryMarketPlaceSiteInfo(queryMarketPlaceRuleInfoRequest);\r\n        assertService.isTrue(queryMarketPlaceRuleInfoResponse.isSuccess(), ErrorCode.BIZECOPROD_INVOKE_FAILED);\r\n        return buildSiteInfoResponse(queryMarketPlaceRuleInfoResponse);\r\n    }\r\n\r\n    private QueryVoyageSitesInfoResponse buildSiteInfoResponse(\r\n            QueryMarketPlaceRuleInfoResponse queryMarketPlaceRuleInfoResponse) {\r\n        QueryVoyageSitesInfoResponse response = new QueryVoyageSitesInfoResponse();\r\n        List<SiteRuleDto> siteList = queryMarketPlaceRuleInfoResponse\r\n                .getSiteList();\r\n        List<SiteLabelDto> siteLabelDtos = new ArrayList();\r\n        if (CollectionUtils.isNotEmpty(siteList)) {\r\n            for (SiteRuleDto siteRuleDto : siteList) {\r\n                SiteLabelDto siteLabelDto = new SiteLabelDto();\r\n                siteLabelDto.setLabel(siteRuleDto.getLabel());\r\n                siteLabelDto.setValue(siteRuleDto.getSiteName());\r\n                siteLabelDtos.add(siteLabelDto);\r\n            }\r\n        }\r\n\r\n        BeanUtils.copyProperties(queryMarketPlaceRuleInfoResponse, response);\r\n        List<MPSiteRuleDto> mpSiteRuleDtos = new ArrayList<>();\r\n        if (CollectionUtils\r\n                .isNotEmpty(queryMarketPlaceRuleInfoResponse.getMarketPlaceSiteRuleDtoList())) {\r\n            for (MarketPlaceSiteRuleDto marketPlaceSiteRuleDto : queryMarketPlaceRuleInfoResponse\r\n                    .getMarketPlaceSiteRuleDtoList()) {\r\n                MPSiteRuleDto dto = new MPSiteRuleDto();\r\n                dto.setKey(marketPlaceSiteRuleDto.getKey());\r\n                if (\"TRUE\".equalsIgnoreCase(marketPlaceSiteRuleDto.getValue())) {\r\n                    dto.setValue(Boolean.TRUE);\r\n                } else {\r\n                    dto.setValue(Boolean.FALSE);\r\n                }\r\n                mpSiteRuleDtos.add(dto);\r\n            }\r\n        }\r\n        response.setSiteList(siteLabelDtos);\r\n        response.setMpSiteRuleDtos(mpSiteRuleDtos);\r\n        response.setSentMailExcuteTime(queryMarketPlaceRuleInfoResponse.getSentMailExcuteTimeByListString());\r\n        //远航,平台,参数中心扩展配置\r\n        response.setMarketPlaceExtConfigDto(queryMarketPlaceRuleInfoResponse.getMarketPlaceExtConfigDto());\r\n        LogUtil.info(logger, String.format(\"VoyageServiceImpl:查询站点结果:%s\",\r\n                JSONUtil.objectToString(response)));\r\n        return response;\r\n    }\r\n\r\n    /**\r\n     * 发送短信验证码\r\n     *\r\n     * @param request\r\n     * @return\r\n     */\r\n\r\n    @Override\r\n    public SentSmsCodeResponse sentSmsCode(SentSmsCodeRequest request) {\r\n        LogUtil.info(logger, String.format(\"VoyageServiceImpl:sentSmsCode:start , request: %s\", JSONUtil.objectToString(request)));\r\n        SentSmsCodeResponse sentSmsCodeResponse = new SentSmsCodeResponse();\r\n        OtpSendRequest otpSendRequest = buildSendOtpRequest(request);\r\n        OtpSendResult OtpSendResult = otpService.sendOtp(otpSendRequest);\r\n        assertService.isTrue(OtpSendResult.isSuccess(), ErrorCode.SEND_OTP_FAILED);\r\n        Map<String, Object> result = new HashMap<>();\r\n        result.put(\"otpProperty\", OtpSendResult.getOtpProperty());\r\n        sentSmsCodeResponse.setOtpProperty(result);\r\n        sentSmsCodeResponse.setRequestId(OtpSendResult.getRequestId());\r\n\r\n        LogUtil.info(logger, String.format(\"VoyageServiceImpl:sentSmsCode: , request: %s\", JSONUtil.objectToString(request)));\r\n\r\n        return sentSmsCodeResponse;\r\n    }\r\n\r\n    @Override\r\n    public List<CityLabel> queryCityCodeLabel(QueryCityCodeLabelRequest request) {\r\n        GetCityLabelRequest getCityLabelRequest = new GetCityLabelRequest();\r\n        getCityLabelRequest.setCode(request.getCode());\r\n        getCityLabelRequest.setLocal(I18nUtils.getLocaleStringFromTraceContext());\r\n        GetCityLabelResponse cityLabel = voyageRpcServiceClient.getCityLabel(getCityLabelRequest);\r\n\r\n        LogUtil.info(logger, String.format(\"VoyageServiceImpl:queryCityCodeLabel: , request: %s\",\r\n            JSONUtil.objectToString(request)));\r\n        assertService.isTrue(cityLabel.isSuccess(), ErrorCode.BIZECOPROD_INVOKE_FAILED);\r\n\r\n        return cityLabel.getLabelList();\r\n    }\r\n\r\n    /**\r\n     * 开店催单\r\n     * @param request\r\n     * @return\r\n     */\r\n    @Override\r\n    public ReminderResponse reminder(ReminderRequest request) {\r\n        ReminderResponse response = new ReminderResponse();\r\n        // 调用ibizecoprod查询接口，获取当前user的开店申请信息\r\n        QueryMarketPlaceApplyRequest queryMarketPlaceApplyRequest = new QueryMarketPlaceApplyRequest();\r\n        queryMarketPlaceApplyRequest.setApplyId(request.getApplyId());\r\n        QueryMarketPlaceApplyResponse queryMarketPlaceApplyResponse = voyageRpcServiceClient.queryMarketPlaceApply(\r\n                queryMarketPlaceApplyRequest);\r\n        assertService.isTrue(queryMarketPlaceApplyResponse.isSuccess(), ErrorCode.BIZECOPROD_INVOKE_FAILED);\r\n        MpOpenMarketApplyRecordDto mpOpenMarketApplyRecordDto = queryMarketPlaceApplyResponse.getMpOpenMarketApplyRecordDto();\r\n        // 判断是否可以催单\r\n        boolean canReminder = false;\r\n        if (PlatformReviewEnum.INIT.getCode().equals(mpOpenMarketApplyRecordDto.getPlatformReview())) {\r\n            assertService.isTrue(mpOpenMarketApplyRecordDto.getRemainingSubmission() != null,\r\n                    ErrorCode.NOT_ALLOW_REMINDER_WITH_CURRENT_STATUS);\r\n            if (Integer.valueOf(mpOpenMarketApplyRecordDto.getRemainingSubmission()) < 0) {\r\n                canReminder = true;\r\n            }\r\n        }\r\n        if (PlatformReviewEnum.PROCESS.getCode().equals(mpOpenMarketApplyRecordDto.getPlatformReview())) {\r\n            assertService.isTrue(mpOpenMarketApplyRecordDto.getRemainingAudit() != null, ErrorCode.NOT_ALLOW_REMINDER_WITH_CURRENT_STATUS);\r\n            if (Integer.valueOf(mpOpenMarketApplyRecordDto.getRemainingAudit()) < 0) {\r\n                canReminder = true;\r\n            }\r\n        }\r\n        // 如果不需要催单组装错误码\r\n        assertService.isTrue(canReminder, ErrorCode.NOT_ALLOW_REMINDER_WITH_CURRENT_STATUS);\r\n        // 否则调用ibizecoprod的催单接口，进行催单处理\r\n        UpdateReminderInfoRequest updateReminderInfoRequest = new UpdateReminderInfoRequest();\r\n        updateReminderInfoRequest.setApplyId(request.getApplyId());\r\n        updateReminderInfoRequest.setUserId(UserAuthenticationContext.get().getUserId());\r\n        UpdateReminderInfoResponse updateReminderInfoResponse = voyageRpcServiceClient.UpdateReminderInfo(updateReminderInfoRequest);\r\n        assertService.isTrue(updateReminderInfoResponse.isSuccess(), ErrorCode.UPDATE_REMINDER_FAILED);\r\n        return response;\r\n    }\r\n\r\n    @Override\r\n    public QueryVoyageOnboardingInfoResponse queryOnboardingInfo(QueryVoyageOnboardingInfoRequest request) {\r\n        QueryVoyageOnboardingInfoResponse response = new QueryVoyageOnboardingInfoResponse();\r\n        QueryOnboardingInfoRequest queryOnboardingInfoRequest = new QueryOnboardingInfoRequest();\r\n        queryOnboardingInfoRequest.setIpayUserId(UserAuthenticationContext.get().getUserId());\r\n        queryOnboardingInfoRequest.setLanguagePrefer(request.getEnvInfo().getLang());\r\n\r\n        QueryOnboardingInfoResponse queryOnboardingInfoResponse = voyageRpcServiceClient.queryOnboardingInfo(queryOnboardingInfoRequest);\r\n\r\n        assertService.isTrue(null != queryOnboardingInfoResponse, ErrorCode.BIZECOPROD_INVOKE_FAILED);\r\n        response.setCompanyLicenseCode(queryOnboardingInfoResponse.getCompanyLicenseCode());\r\n        response.setCompanyName(queryOnboardingInfoResponse.getCompanyName());\r\n        return response;\r\n    }\r\n\r\n    /**\r\n     * 暂存 远航批量开店表单数据\r\n     * @return\r\n     */\r\n    @Override\r\n    public StoreMpApplyFormDataResponse storeMpApplyFormData(StoreMpApplyFormDataRequest request) {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public QueryMpApplyFormDataResponse queryMpApplyFormData(QueryMpApplyFormDataRequest request) {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 构建sentSmsCode() 入参\r\n     *\r\n     * @param request\r\n     * @return\r\n     */\r\n    public OtpSendRequest buildSendOtpRequest(SentSmsCodeRequest request) {\r\n        OtpSendRequest otpSendRequest = new OtpSendRequest();\r\n        PhoneNumber phoneNumber = new PhoneNumber();\r\n        phoneNumber.setTelNumber(request.getPhoneNumber());\r\n        phoneNumber.setTelCode(request.getCountryCode());\r\n        otpSendRequest.setPhoneNumber(phoneNumber);\r\n        otpSendRequest.setScene(VOYAGE_MOBILE_OTP);\r\n        otpSendRequest.setType(OtpTypeEnum.MOBILE.getCode());\r\n        otpSendRequest.setLcoale(request.getEnvInfo().getLang());\r\n        otpSendRequest.getEnvInfo().setLang(request.getEnvInfo().getLang());\r\n        return otpSendRequest;\r\n    }\r\n\r\n    /**\r\n     * 构建 queryCompanyInfo() 入参\r\n     *\r\n     * @param request\r\n     * @return\r\n     */\r\n\r\n    public QueryCompanyInfoRequest getQueryCompanyInfoRequest(QueryVoyageCompanyInfoRequest request) {\r\n        QueryCompanyInfoRequest queryCompanyInfoRequest = new QueryCompanyInfoRequest();\r\n        queryCompanyInfoRequest.setRegistrationNo(request.getRegistrationNo());\r\n        queryCompanyInfoRequest.setCompanyId(request.getCompanyId());\r\n        queryCompanyInfoRequest.setLegalName(request.getLegalName());\r\n        queryCompanyInfoRequest.setUserId(request.getUserId());\r\n        return queryCompanyInfoRequest;\r\n    }\r\n\r\n    /**\r\n     * 构建 queryCompanyInfo() 出参\r\n     *\r\n     * @param queryVoyageCompanyInfoResponse\r\n     * @param queryCompanyInfoResponse\r\n     */\r\n\r\n    public void buildQueryVoyageCompanyInfoResponse(QueryVoyageCompanyInfoResponse queryVoyageCompanyInfoResponse, QueryCompanyInfoResponse queryCompanyInfoResponse) {\r\n\r\n        queryVoyageCompanyInfoResponse.setCanModify(queryCompanyInfoResponse.getCanModify());\r\n\r\n        MpCompanyInformationDto mpCompanyInformationDto = queryCompanyInfoResponse.getMpCompanyInformationDto();\r\n        MpVoyageCompanyInformationDto mpVoyageCompanyInformationDto = new MpVoyageCompanyInformationDto();\r\n        mpVoyageCompanyInformationDto.setApplyEmail(mpCompanyInformationDto.getApplyEmail());\r\n        mpVoyageCompanyInformationDto.setApplyType(mpCompanyInformationDto.getApplyType());\r\n        mpVoyageCompanyInformationDto.setBrand(mpCompanyInformationDto.getBrand());\r\n        mpVoyageCompanyInformationDto.setCountryCode(mpCompanyInformationDto.getCountryCode());\r\n        mpVoyageCompanyInformationDto.setCompanyId(mpCompanyInformationDto.getCompanyId());\r\n        mpVoyageCompanyInformationDto.setCompanyType(mpCompanyInformationDto.getCompanyType());\r\n        mpVoyageCompanyInformationDto.setCurrencyType(mpCompanyInformationDto.getCurrencyType());\r\n        mpVoyageCompanyInformationDto.setCanDelete(mpCompanyInformationDto.getCanDelete());\r\n        mpVoyageCompanyInformationDto.setExistinStoreLink((List<String>) JSONUtil.stringToObject(mpCompanyInformationDto.getExistinStoreLink(), List.class));\r\n        mpVoyageCompanyInformationDto.setExpectedCapitalFlow(mpCompanyInformationDto.getExpectedCapitalFlow());\r\n        mpVoyageCompanyInformationDto.setForeignOperator((List<String>) JSONUtil.stringToObject(mpCompanyInformationDto.getForeignOperator(), List.class));\r\n        mpVoyageCompanyInformationDto.setHasVat((List<String>) JSONUtil.stringToObject(mpCompanyInformationDto.getHasVat(), List.class));\r\n        mpVoyageCompanyInformationDto.setLegalName(mpCompanyInformationDto.getLegalName());\r\n        mpVoyageCompanyInformationDto.setMainCategory(mpCompanyInformationDto.getMainCategory());\r\n        mpVoyageCompanyInformationDto.setOperatorEmail(mpCompanyInformationDto.getOperatorEmail());\r\n        mpVoyageCompanyInformationDto.setOverseasWarehouse((List<String>) JSONUtil.stringToObject(mpCompanyInformationDto.getOverseasWarehouse(), List.class));\r\n        mpVoyageCompanyInformationDto.setPhoneNumber(mpCompanyInformationDto.getPhoneNumber());\r\n        mpVoyageCompanyInformationDto.setProvince((List<String>) JSONUtil.stringToObject(mpCompanyInformationDto.getProvince(), List.class));\r\n        mpVoyageCompanyInformationDto.setQqNumber(mpCompanyInformationDto.getQqNumber());\r\n        mpVoyageCompanyInformationDto.setRegistrationNo(mpCompanyInformationDto.getRegistrationNo());\r\n        mpVoyageCompanyInformationDto.setTotalSku(mpCompanyInformationDto.getTotalSku());\r\n        mpVoyageCompanyInformationDto.setUserId(mpCompanyInformationDto.getUserId());\r\n        mpVoyageCompanyInformationDto.setUsername(mpCompanyInformationDto.getUsername());\r\n        mpVoyageCompanyInformationDto.setWeChat(mpCompanyInformationDto.getWeChat());\r\n        mpVoyageCompanyInformationDto.setGmtCreate(mpCompanyInformationDto.getGmtCreate());\r\n        mpVoyageCompanyInformationDto.setGmtModified(mpCompanyInformationDto.getGmtModified());\r\n        queryVoyageCompanyInfoResponse.setMpVoyageCompanyInformationDto(mpVoyageCompanyInformationDto);\r\n    }\r\n\r\n    /**\r\n     * 构建queryCompanyInfoList() 入参\r\n     *\r\n     * @param request\r\n     * @return\r\n     */\r\n\r\n    public QueryCompanyInfoListRequest buildQueryCompanyInfoListRequest(QueryVoyageCompanyInfoListRequest request) {\r\n        QueryCompanyInfoListRequest queryCompanyInfoListRequest = new QueryCompanyInfoListRequest();\r\n        queryCompanyInfoListRequest.setUserId(request.getUserId());\r\n        queryCompanyInfoListRequest.setCompanyId(request.getCompanyId());\r\n        queryCompanyInfoListRequest.setPageNumber(request.getPageNumber());\r\n        queryCompanyInfoListRequest.setPageSize(request.getPageSize());\r\n        queryCompanyInfoListRequest.setCompanyType(request.getCompanyType());\r\n        queryCompanyInfoListRequest.setApplyEmail(request.getApplyEmail());\r\n        queryCompanyInfoListRequest.setLegalName(request.getLegalName());\r\n        queryCompanyInfoListRequest.setApplyType(request.getApplyType());\r\n        queryCompanyInfoListRequest.setMainCategory(request.getMainCategory());\r\n        queryCompanyInfoListRequest.setRegistrationNo(request.getRegistrationNo());\r\n        queryCompanyInfoListRequest.setExtParams(request.getExtParams());\r\n        queryCompanyInfoListRequest.setGmtCreate(request.getGmtCreate());\r\n        return queryCompanyInfoListRequest;\r\n    }\r\n\r\n    /**\r\n     * 构建 queryCompanyInfoList() 出参\r\n     *\r\n     * @param queryPaginatorResult\r\n     */\r\n    public PaginatorResponse buildPaginatorResult(PaginatorResult<List<MpCompanyInformationDto>> queryPaginatorResult) {\r\n        ArrayList<MpVoyageCompanyInformationDto> mpVoyageCompanyInformationDtos = new ArrayList<>();\r\n        List<MpCompanyInformationDto> queryPaginatorResultValue = queryPaginatorResult.getValue();\r\n        if (CollectionUtils.isNotEmpty(queryPaginatorResultValue)) {\r\n            for (MpCompanyInformationDto mpCompanyInformationDto : queryPaginatorResultValue) {\r\n                MpVoyageCompanyInformationDto mpVoyageCompanyInformationDto = new MpVoyageCompanyInformationDto();\r\n                mpVoyageCompanyInformationDto\r\n                        .setApplyEmail(mpCompanyInformationDto.getApplyEmail());\r\n                mpVoyageCompanyInformationDto.setApplyType(mpCompanyInformationDto.getApplyType());\r\n                mpVoyageCompanyInformationDto.setBrand(mpCompanyInformationDto.getBrand());\r\n                mpVoyageCompanyInformationDto\r\n                        .setCountryCode(mpCompanyInformationDto.getCountryCode());\r\n                mpVoyageCompanyInformationDto.setCompanyId(mpCompanyInformationDto.getCompanyId());\r\n                mpVoyageCompanyInformationDto\r\n                        .setCompanyType(mpCompanyInformationDto.getCompanyType());\r\n                mpVoyageCompanyInformationDto\r\n                        .setCurrencyType(mpCompanyInformationDto.getCurrencyType());\r\n                mpVoyageCompanyInformationDto.setCanDelete(mpCompanyInformationDto.getCanDelete());\r\n                mpVoyageCompanyInformationDto.setExistinStoreLink((List<String>) JSONUtil\r\n                        .stringToObject(mpCompanyInformationDto.getExistinStoreLink(), List.class));\r\n                mpVoyageCompanyInformationDto\r\n                        .setExpectedCapitalFlow(mpCompanyInformationDto.getExpectedCapitalFlow());\r\n                mpVoyageCompanyInformationDto.setForeignOperator((List<String>) JSONUtil\r\n                        .stringToObject(mpCompanyInformationDto.getForeignOperator(), List.class));\r\n                mpVoyageCompanyInformationDto.setHasVat((List<String>) JSONUtil\r\n                        .stringToObject(mpCompanyInformationDto.getHasVat(), List.class));\r\n                mpVoyageCompanyInformationDto.setLegalName(mpCompanyInformationDto.getLegalName());\r\n                mpVoyageCompanyInformationDto\r\n                        .setMainCategory(mpCompanyInformationDto.getMainCategory());\r\n                mpVoyageCompanyInformationDto\r\n                        .setOperatorEmail(mpCompanyInformationDto.getOperatorEmail());\r\n                mpVoyageCompanyInformationDto.setOverseasWarehouse((List<String>) JSONUtil\r\n                        .stringToObject(mpCompanyInformationDto.getOverseasWarehouse(), List.class));\r\n                mpVoyageCompanyInformationDto\r\n                        .setPhoneNumber(mpCompanyInformationDto.getPhoneNumber());\r\n                mpVoyageCompanyInformationDto.setProvince((List<String>) JSONUtil\r\n                        .stringToObject(mpCompanyInformationDto.getProvince(), List.class));\r\n                mpVoyageCompanyInformationDto.setQqNumber(mpCompanyInformationDto.getQqNumber());\r\n                mpVoyageCompanyInformationDto\r\n                        .setRegistrationNo(mpCompanyInformationDto.getRegistrationNo());\r\n                mpVoyageCompanyInformationDto.setTotalSku(mpCompanyInformationDto.getTotalSku());\r\n                mpVoyageCompanyInformationDto.setUserId(mpCompanyInformationDto.getUserId());\r\n                mpVoyageCompanyInformationDto.setUsername(mpCompanyInformationDto.getUsername());\r\n                mpVoyageCompanyInformationDto.setWeChat(mpCompanyInformationDto.getWeChat());\r\n                mpVoyageCompanyInformationDto.setGmtCreate(mpCompanyInformationDto.getGmtCreate());\r\n                mpVoyageCompanyInformationDto\r\n                        .setGmtModified(mpCompanyInformationDto.getGmtModified());\r\n                mpVoyageCompanyInformationDtos.add(mpVoyageCompanyInformationDto);\r\n            }\r\n        }\r\n\r\n        PaginatorResponse paginatorResponse = PaginatorResponse.builder()\r\n                .paginator(queryPaginatorResult.getPaginator())\r\n                .extParams(queryPaginatorResult.getSelfExtParams())\r\n                .value(mpVoyageCompanyInformationDtos).build();\r\n        return paginatorResponse;\r\n    }\r\n\r\n    /**\r\n     * 构建 updateCompanyInfo() 入参\r\n     *\r\n     * @param request\r\n     * @return\r\n     */\r\n    public UpdateCompanyInfoRequest buildUpdateCompanyInfoRequest(UpdateVoyageCompanyInfoRequest request) {\r\n        UpdateCompanyInfoRequest updateCompanyInfoRequest = new UpdateCompanyInfoRequest();\r\n        updateCompanyInfoRequest.setApplyEmail(request.getApplyEmail());\r\n        updateCompanyInfoRequest.setApplyType(request.getApplyType());\r\n        updateCompanyInfoRequest.setBrand(request.getBrand());\r\n        updateCompanyInfoRequest.setCountryCode(request.getCountryCode());\r\n        updateCompanyInfoRequest.setCompanyId(request.getCompanyId());\r\n        updateCompanyInfoRequest.setCompanyType(request.getCompanyType());\r\n        updateCompanyInfoRequest.setCurrencyType(request.getCurrencyType());\r\n        updateCompanyInfoRequest.setExtParams(request.getExtParams());\r\n        updateCompanyInfoRequest.setExistinStoreLink(JSONUtil.objectToString(request.getExistinStoreLink()));\r\n        updateCompanyInfoRequest.setExpectedCapitalFlow(request.getExpectedCapitalFlow());\r\n        updateCompanyInfoRequest.setForeignOperator(JSONUtil.objectToString(request.getForeignOperator()));\r\n        updateCompanyInfoRequest.setHasVat(JSONUtil.objectToString(request.getHasVat()));\r\n        updateCompanyInfoRequest.setLegalName(request.getLegalName());\r\n        updateCompanyInfoRequest.setMainCategory(request.getMainCategory());\r\n        updateCompanyInfoRequest.setOperatorEmail(request.getOperatorEmail());\r\n        updateCompanyInfoRequest.setOverseasWarehouse(JSONUtil.objectToString(request.getOverseasWarehouse()));\r\n        updateCompanyInfoRequest.setPhoneNumber(request.getPhoneNumber());\r\n        updateCompanyInfoRequest.setProvince(JSONUtil.objectToString(request.getProvince()));\r\n        updateCompanyInfoRequest.setQqNumber(request.getQqNumber());\r\n        updateCompanyInfoRequest.setRegistrationNo(request.getRegistrationNo());\r\n        updateCompanyInfoRequest.setTotalSku(request.getTotalSku());\r\n        updateCompanyInfoRequest.setUserId(request.getUserId());\r\n        updateCompanyInfoRequest.setUsername(request.getUsername());\r\n        updateCompanyInfoRequest.setWeChat(request.getWeChat());\r\n        return updateCompanyInfoRequest;\r\n    }\r\n\r\n    /**\r\n     * 构建 updateCompanyInfo() 出参\r\n     *\r\n     * @param updateVoyageCompanyInfoResponse\r\n     * @param updateCompanyInfoResponse\r\n     */\r\n    public void buildUpdateCompanyInfoResponse(UpdateVoyageCompanyInfoResponse updateVoyageCompanyInfoResponse, UpdateCompanyInfoResponse updateCompanyInfoResponse) {\r\n        updateVoyageCompanyInfoResponse.setCompanyId(updateCompanyInfoResponse.getCompanyId());\r\n        updateVoyageCompanyInfoResponse.setGmtCreate(updateCompanyInfoResponse.getGmtCreate());\r\n        updateVoyageCompanyInfoResponse.setLegalName(updateCompanyInfoResponse.getLegalName());\r\n    }\r\n\r\n    /**\r\n     * 获取主体信息\r\n     *\r\n     * @param request\r\n     * @return\r\n     */\r\n    public QueryCompanyInfoResponse getCompanyInfoResponse(UpdateVoyageCompanyInfoRequest request) {\r\n        // 构建查询主体信息request\r\n        QueryCompanyInfoRequest queryCompanyInfoRequest = new QueryCompanyInfoRequest();\r\n        queryCompanyInfoRequest.setCompanyId(request.getCompanyId());\r\n        queryCompanyInfoRequest.setUserId(request.getUserId());\r\n        // 查询主体信息\r\n        return voyageRpcServiceClient.queryCompanyInfo(queryCompanyInfoRequest);\r\n    }\r\n\r\n    /**\r\n     * 校验短信验证码是否正确\r\n     *\r\n     * @param\r\n     * @return\r\n     */\r\n    public OtpVerifyResult getVerifyOtpResult(String code, String countryCode, String phoneNumber, String lang, String requestId) {\r\n        OtpVerifyRequest otpVerifyRequest = new OtpVerifyRequest();\r\n        otpVerifyRequest.setOtpCode(code);\r\n        PhoneNumber phone = new PhoneNumber();\r\n        phone.setTelCode(countryCode);\r\n        phone.setTelNumber(phoneNumber);\r\n        otpVerifyRequest.setPhoneNumber(phone);\r\n        otpVerifyRequest.setRequestId(requestId);\r\n        otpVerifyRequest.setType(OtpTypeEnum.MOBILE.getCode());\r\n        otpVerifyRequest.setScene(VOYAGE_MOBILE_OTP);\r\n        otpVerifyRequest.setLocale(lang);\r\n        otpVerifyRequest.getEnvInfo().setLang(lang);\r\n\r\n        // 校验短信验证码是否正确\r\n        OtpVerifyResult otpVerifyResult = otpService.verifyOtp(otpVerifyRequest);\r\n        LogUtil.info(logger, String.format(\"VoyageServiceImpl:getVerifyOtpResult:end , response: %s\", JSONUtil.objectToString(otpVerifyResult)));\r\n\r\n        return otpVerifyResult;\r\n    }\r\n\r\n    /**\r\n     * 构建 deleteCompanyInfo() 入参\r\n     *\r\n     * @param request\r\n     * @return\r\n     */\r\n    private DeleteCompanyInfoRequest buildDeleteCompanyInfoRequest(DeleteVoyageCompanyInfoRequest request) {\r\n        DeleteCompanyInfoRequest deleteCompanyInfoRequest = new DeleteCompanyInfoRequest();\r\n        deleteCompanyInfoRequest.setCompanyId(request.getCompanyId());\r\n        deleteCompanyInfoRequest.setUserId(request.getUserId());\r\n        return deleteCompanyInfoRequest;\r\n    }\r\n\r\n    /**\r\n     * 构建 deleteCompanyInfo() 出餐\r\n     *\r\n     * @param deleteVoyageCompanyInfoResponse\r\n     * @param deleteCompanyInfoResponse\r\n     */\r\n    public void buildDeleteVoyageCompanyInfoResponse(DeleteVoyageCompanyInfoResponse deleteVoyageCompanyInfoResponse, DeleteCompanyInfoResponse deleteCompanyInfoResponse) {\r\n        deleteVoyageCompanyInfoResponse.setSuccess(deleteCompanyInfoResponse.isSuccess());\r\n    }\r\n\r\n    /**\r\n     * 构建addCompanyInfo() 入参\r\n     *\r\n     * @param request\r\n     * @return\r\n     */\r\n    public AddCompanyInfoRequest buildAddCompanyInfoRequest(AddVoyageCompanyInfoRequest request) {\r\n        AddCompanyInfoRequest addCompanyInfoRequest = new AddCompanyInfoRequest();\r\n        addCompanyInfoRequest.setApplyEmail(request.getApplyEmail());\r\n        addCompanyInfoRequest.setApplyType(request.getApplyType());\r\n        addCompanyInfoRequest.setBrand(request.getBrand());\r\n        addCompanyInfoRequest.setCountryCode(request.getCountryCode());\r\n        addCompanyInfoRequest.setCompanyType(request.getCompanyType());\r\n        addCompanyInfoRequest.setCurrencyType(request.getCurrencyType());\r\n        addCompanyInfoRequest.setExtParams(request.getExtParams());\r\n        addCompanyInfoRequest.setExistinStoreLink(JSONUtil.objectToString(request.getExistinStoreLink()));\r\n        addCompanyInfoRequest.setExpectedCapitalFlow(request.getExpectedCapitalFlow());\r\n        addCompanyInfoRequest.setForeignOperator(JSONUtil.objectToString(request.getForeignOperator()));\r\n        addCompanyInfoRequest.setHasVat(JSONUtil.objectToString(request.getHasVat()));\r\n        addCompanyInfoRequest.setLegalName(request.getLegalName());\r\n        addCompanyInfoRequest.setMainCategory(request.getMainCategory());\r\n        addCompanyInfoRequest.setOperatorEmail(request.getOperatorEmail());\r\n        addCompanyInfoRequest.setOverseasWarehouse(JSONUtil.objectToString(request.getOverseasWarehouse()));\r\n        addCompanyInfoRequest.setPhoneNumber(request.getPhoneNumber());\r\n        addCompanyInfoRequest.setProvince(JSONUtil.objectToString(request.getProvince()));\r\n        addCompanyInfoRequest.setQqNumber(request.getQqNumber());\r\n        addCompanyInfoRequest.setRegistrationNo(request.getRegistrationNo());\r\n        addCompanyInfoRequest.setTotalSku(request.getTotalSku());\r\n        addCompanyInfoRequest.setUserId(request.getUserId());\r\n        addCompanyInfoRequest.setUsername(request.getUsername());\r\n        addCompanyInfoRequest.setWeChat(request.getWeChat());\r\n        return addCompanyInfoRequest;\r\n    }\r\n\r\n    /**\r\n     * 构建 addCompanyInfo() 出参\r\n     *\r\n     * @param addVoyageCompanyInfoResponse\r\n     * @param addCompanyInfoResponse\r\n     */\r\n    public void buildAddVoyageCompanyInfoResponse(AddVoyageCompanyInfoResponse addVoyageCompanyInfoResponse, AddCompanyInfoResponse addCompanyInfoResponse) {\r\n        addVoyageCompanyInfoResponse.setCompanyId(addCompanyInfoResponse.getCompanyId());\r\n        addVoyageCompanyInfoResponse.setLegalName(addCompanyInfoResponse.getLegalName());\r\n        addVoyageCompanyInfoResponse.setGmtCreate(addCompanyInfoResponse.getGmtCreate());\r\n    }\r\n\r\n    /**\r\n     * 查询主体信息\r\n     *\r\n     * @param request\r\n     * @return\r\n     */\r\n    public QueryCompanyInfoResponse getQueryCompanyInfoResponse(DeleteVoyageCompanyInfoRequest request) {\r\n        QueryCompanyInfoRequest queryCompanyInfoRequest = new QueryCompanyInfoRequest();\r\n        queryCompanyInfoRequest.setUserId(request.getUserId());\r\n        queryCompanyInfoRequest.setCompanyId(request.getCompanyId());\r\n        return voyageRpcServiceClient.queryCompanyInfo(queryCompanyInfoRequest);\r\n    }\r\n}\r\n\r\n","fileName":"${ClassName}ServiceImpl.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\resources\\FreeMarkerFile\\CodeTemplates\\iexpbizprod\\${ClassName}ServiceImpl.java"},{"content":"public static ${mock.className} buildRequest(Request request){\r\n        ${mock.className} ${mock.className?uncap_first}=new ${mock.className}();\r\n<#list mock.methodsName as method>\r\n        ${mock.className?uncap_first}.method(\"\");\r\n</#list>\r\n        return ${mock.className?uncap_first};\r\n        }","fileName":"${mock.className}setMethod.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\resources\\FreeMarkerFile\\CodeTemplates\\setMethod\\${mock.className}setMethod.java"},{"content":"<table sqlname=\"${table.databaseTableName}\" dummyPk=\"id\" physicalName=\"${table.databaseTableName}\">\r\n\r\n    <!--批量插入-->\r\n    <operation name=\"batchInsert\">\r\n        <extraparams>\r\n            <param name=\"items\" javatype=\"java.util.List\"/>\r\n        </extraparams>\r\n        <sql>\r\n            <![CDATA[\r\n                INSERT INTO ${table.databaseTableName}\r\n                (<#list table.columns as column>${column.columnName}<#sep>, </#list>)\r\n                VALUES (<#list table.columns as column>?<#sep>, </#list>)\r\n\r\n\r\n\t\t    ]]>\r\n        </sql>\r\n        <sqlmap>\r\n            <![CDATA[\r\n                INSERT INTO ${table.databaseTableName}\r\n                (<#list table.columns as column>${column.columnName}<#sep>, </#list>)\r\n                VALUES\r\n                 <iterate conjunction=\",\">\r\n                 (\r\n                    <#list table.columns as column>\r\n                    #items[].${column.javaColumnName}#<#sep>, </#sep>\r\n                    </#list>\r\n                  )\r\n                 </iterate>\r\n\t\t    ]]>\r\n        </sqlmap>\r\n    </operation>\r\n\r\n    <!--单条插入-->\r\n    <operation name=\"insert\" paramtype=\"object\">\r\n        <sql>\r\n            <![CDATA[\r\n                INSERT INTO ${table.databaseTableName}\r\n                  (<#list table.columns as column>${column.columnName}<#sep>, </#list>)\r\n                VALUES (<#list table.columns as column>?<#sep>, </#list>)\r\n\t\t    ]]>\r\n        </sql>\r\n    </operation>\r\n\r\n    <!--查询单条-->\r\n    <operation name=\"selectOneByIpayUserId\" multiplicity=\"one\">\r\n        <sql>\r\n            <![CDATA[\r\n                 SELECT\r\n\t\t\t\t\t<#list table.columns as column>${column.columnName}<#sep>, </#list>\r\n                 FROM\r\n                    ${table.databaseTableName}\r\n                 WHERE\r\n                    ipay_user_id = ? for update\r\n            ]]>\r\n        </sql>\r\n    </operation>\r\n\r\n    <!--查询多条-->\r\n    <operation name=\"selectByUserIdAndLegalName\" multiplicity=\"many\">\r\n        <sql>\r\n            <![CDATA[\r\n                 SELECT\r\n                    <#list table.columns as column>${column.columnName}<#sep>, </#list>\r\n                 FROM\r\n                    ${table.databaseTableName}\r\n                 WHERE\r\n                    user_id = ? and legal_name = ?\r\n                 FOR UPDATE\r\n            ]]>\r\n        </sql>\r\n    </operation>\r\n\r\n    <!--分页查-->\r\n    <operation name=\"queryCompanyInfoList\" multiplicity=\"many\">\r\n        <extraparams>\r\n            <param name=\"user_id\" javatype=\"java.lang.String\"/>\r\n            <param name=\"pageSize\" javatype=\"java.lang.Integer\"/>\r\n            <param name=\"offset\" javatype=\"java.lang.Integer\"/>\r\n        </extraparams>\r\n        <sql>\r\n            <![CDATA[\r\n                SELECT\r\n                    <#list table.columns as column>${column.columnName}<#sep>, </#list>\r\n                FROM\r\n                    ${table.databaseTableName}\r\n            ]]>\r\n        </sql>\r\n        <sqlmap>\r\n            <![CDATA[\r\n                 SELECT\r\n                    <#list table.columns as column>${column.columnName}<#sep>, </#list>\r\n                 FROM\r\n                    ${table.databaseTableName}\r\n                 WHERE\r\n                    user_id = #userId#\r\n                 ORDER BY gmt_create desc\r\n                 LIMIT #offset#,#pageSize#\r\n            ]]>\r\n        </sqlmap>\r\n    </operation>\r\n\r\n    <!--更新-->\r\n    <operation name=\"updateByIpayUserId\" paramtype=\"object\">\r\n        <sql>\r\n            <![CDATA[\r\n                UPDATE ${table.databaseTableName}\r\n                SET gmt_modified = CURRENT_TIMESTAMP\r\n                WHERE ipay_user_id = ?\r\n            ]]>\r\n        </sql>\r\n        <sqlmap>\r\n            <![CDATA[\r\n                UPDATE ${table.databaseTableName}\r\n                SET\r\n\t\t\t\t\tgmt_modified = CURRENT_TIMESTAMP\r\n\t\t\t\t\t<#list table.columns as column>\r\n\t\t\t\t\t<dynamic prepend=\",\"><isNotNull property=\"${column.javaColumnName}\">${column.columnName} = #${column.javaColumnName}#</isNotNull></dynamic>\r\n\t\t\t\t\t</#list>\r\n                WHERE\r\n                    ipay_user_id = #ipayUserId#\r\n            ]]>\r\n        </sqlmap>\r\n    </operation>\r\n\r\n\r\n\r\n\r\n    <operation name=\"deleteByIpayUser\" multiplicity=\"one\">\r\n        <sql>\r\n            <![CDATA[\r\n                 DELETE FROM ${table.databaseTableName}\r\n                 WHERE\r\n                    ipay_user_id = ?\r\n            ]]>\r\n        </sql>\r\n    </operation>\r\n\r\n</table>\r\n","fileName":"${table.databaseTableName}.xml","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\resources\\FreeMarkerFile\\dataBaseTemplates\\${table.databaseTableName}.xml"},{"content":"package ${mock.classPath};\r\n\r\nimport org.junit.Assert;\r\nimport org.junit.Test;\r\nimport org.junit.runner.RunWith;\r\nimport org.mockito.InjectMocks;\r\nimport org.mockito.MockitoAnnotations;\r\nimport org.mockito.Spy;\r\nimport org.mockito.junit.MockitoJUnitRunner;\r\nimport org.testng.annotations.BeforeMethod;\r\nimport com.alibaba.fastjson.JSON;\r\n\r\nimport static org.mockito.ArgumentMatchers.any;\r\n\r\n/*\r\n * @author lisc\r\n * @Description: ${mock.classPath}.${mock.className}\r\n * @date ${date?datetime}\r\n */\r\n@RunWith(MockitoJUnitRunner.Silent.class)\r\npublic class ${mock.className}MockTest extends IbizcoprodJunitTestBase{\r\n\r\n        @Spy\r\n        @InjectMocks\r\n        private ${mock.className} ${mock.className?uncap_first};\r\n\r\n        <#list mock.fieldBeanList as fieldBeans>\r\n        @Mock\r\n        private ${fieldBeans.fieldType} ${fieldBeans.fieldName};\r\n        </#list>\r\n\r\n\r\n        @BeforeMethod\r\n        public void initMocks(){\r\n               MockitoAnnotations.initMocks(this);\r\n         }\r\n\r\n<#-- 遍历所有方法-->\r\n<#list mock.methodBeanList as methodBeans>\r\n\r\n        @Test\r\n        public void ${methodBeans.methodName}Test() {\r\n            try {\r\n\r\n                /**\r\n                 * tip:\r\n                 * 正常流程\r\n                 */\r\n                reset(this);\r\n                <#if methodBeans.methodRequestType??>\r\n                    <#list methodBeans.methodRequestType as request>\r\n                ${request.fieldType}  ${request.fieldName}Request0010 = new ${request.fieldType}();\r\n                    </#list>\r\n                </#if>\r\n\r\n                <#if methodBeans.methodResponseType??>\r\n                        <#list methodBeans.methodResponseType as response>\r\n                ${response.fieldType}  ${response.fieldName}response0010 = new ${response.fieldType}();\r\n                        </#list>\r\n                </#if>\r\n\r\n                //stub\r\n              //  Mockito.when().thenReturn();\r\n                //fire\r\n              //  ${mock.className?uncap_first}.${methodBeans.methodName}(<#list  methodBeans.methodRequestType as par>${par.fieldName}Request0010<#sep>, </#sep></#list>);\r\n\r\n            } catch (Exception e) {\r\n                logger.error(\"${mock.className}:${methodBeans.methodName}:系统异常,原始入参:{} 异常文本:{} 异常栈:\", JSON.toJSONString(\"\"), e.getMessage(), e);\r\n                Assert.fail();\r\n            }\r\n        }\r\n\r\n</#list>\r\n}\r\n","fileName":"${mock.className}MockTest.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\resources\\FreeMarkerFile\\mock-templates\\${mock.className}MockTest.java"},{"content":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n       xmlns:context=\"http://www.springframework.org/schema/context\"\r\n       xmlns:aop=\"http://www.springframework.org/schema/aop\"\r\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\r\n\t   http://www.springframework.org/schema/beans/spring-beans.xsd\r\n\t    http://www.springframework.org/schema/context\r\n\t\thttp://www.springframework.org/schema/context/spring-context-4.3.xsd\r\n        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd\">\r\n\r\n\r\n    <!-- 引入外部配置文件 -->\r\n    <!--\t<context:property-placeholder location=\"classpath:db.properties\"/>-->\r\n\r\n    <!--开启注解-->\r\n    <context:annotation-config/>\r\n    <!-- 1、包扫描所有组件，除过web组件 -->\r\n    <context:component-scan base-package=\"com.lsc\"/>\r\n\r\n    <!-- 开启aop注解方式，此步骤不能少，这样java类中的aop注解才会生效 -->\r\n    <aop:aspectj-autoproxy/>\r\n    <!-- 2、数据源 -->\r\n    <!--\t<bean id=\"dataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\">\r\n            <property name=\"url\" value=\"${datasource.url}\"></property>\r\n            <property name=\"driverClassName\" value=\"${datasource.driverClass}\"></property>\r\n            <property name=\"username\" value=\"${datasource.username}\"></property>\r\n            <property name=\"password\" value=\"${datasource.password}\"></property>\r\n        </bean>-->\r\n\r\n\r\n</beans>\r\n","fileName":"applicationContext.xml","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\resources\\spring-config\\applicationContext.xml"},{"content":"url=jdbc:mysql://obproxy.ocp2.alipay.net:2883/ibizecoprodsg?useUnicode=true&amp;characterEncoding=utf8\r\nusername=dev_ipay35:dev_ipay35_sg0_2764:ibizecoprodsg\r\npassword=5d9Y9R4v\r\ndriverClassName=com.mysql.jdbc.Driver\r\n\r\n#\\u521D\\u59CB\\u5316\\u7269\\u7406\\u8FDE\\u63A5\\u7684\\u4E2A\\u6570\r\ninitialSize=5\r\n#\\u6700\\u5927\\u8FDE\\u63A5\\u6C60\\u6570\\u91CF\r\nmaxActive=10\r\n#\\u83B7\\u53D6\\u8FDE\\u63A5\\u65F6\\u6700\\u5927\\u7B49\\u5F85\\u65F6\\u95F4\r\nmaxWait=3000","fileName":"db.properties","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\resources\\spring-config\\db.properties"},{"content":"Spring AOP的主要概念：\r\n目标代码（或称目标方法、被代理类、被代理方法）：原本的业务代码。\r\n切点表达式（或称切面表达式）：切点表达式过滤的规则，筛选范围，即哪些目标代码才需要切。\r\n切点代码（或称切面代码、连接点、代理方法）：在原本的业务代码上包裹的切面逻辑。\r\n\r\nSpring AOP注解\r\n@Aspect\r\n切面声明，标注在类、接口（包括注解类型）或枚举上，表示我这个类要切别人，或者我这个类是要代理别人的，要准备搞事了。\r\n例子：\r\n@Aspect//我要开始搞事了\r\n    public class MyAspect {\r\n        @Around(\"@target(org.springframework.stereotype.Controller)\")\r\n        public void cutCode(ProceedingJoinPoint pjp){\r\n            //...我真正搞事的代码\r\n        }\r\n    }\r\n\r\n\r\n@Pointcut\r\n切点声明，可以理解为就是一个包含切点表达式的变量，为了避免@Before、@After等真实切点代码重复定义切点表达式。只是图个方便，不是必需品。\r\n例子：\r\n\r\n@Aspect//我要开始搞事了\r\npublic class MyAspect {\r\n\t@Pointcut(\"@target(org.springframework.stereotype.Controller)\")\r\n\tpublic void myPoincut(){\r\n\t\t//这是只是喊口号，具体事务啥也不干\r\n\t}\r\n\t//@Around(\"@target(org.springframework.stereotype.Controller)\")\r\n\t@Around(value=\"myPoincut()\")//响应myPoincut方法的口号\r\n\tpublic void cutCode(ProceedingJoinPoint pjp){\r\n\t\t//...我真正搞事的代码\r\n\t}\r\n}\r\n\r\n\r\n@Before\r\n前置通知，在目标方法（切入点）执行之前执行，接收JoinPoint参数。\r\nvalue属性绑定通知的切入点表达式，可以关联切点声明（@Pointcut(切点表达式) myPoincut(){}，@Before(value=\"myPoincut()\") myBefore(JoinPoint jp){}），也可以直接设置切入点表达式(@Before(\"切点表达式\"))。\r\n注意：如果在此回调方法中抛出异常，则目标方法不会再执行，会继续执行后置通知和异常通知。\r\n例子：\r\n\r\n@Aspect//我要开始搞事了\r\npublic class MyAspect {\r\n\t@Pointcut(\"@target(org.springframework.stereotype.Controller)\")\r\n\tpublic void myPoincut(){\r\n\t\t//这是只是喊口号，具体事务啥也不干\r\n\t}\r\n\t//@Before(\"@target(org.springframework.stereotype.Controller)\")\r\n\t@Before(value=\"myPoincut()\")//响应myPoincut方法的口号\r\n\tpublic void myBefore(JoinPoint jp){\r\n\t\t//...我真正搞事的代码，如果此处发生异常，那么目标方法不会再执行\r\n\t}\r\n}\r\n\r\n\r\n@After\r\n后置通知，在目标方法执行之后执行，接收JoinPoint参数。\r\nvalue属性绑定通知的切入点表达式，可以关联切点声明（@Pointcut(切点表达式) myPoincut(){}，@After(value=\"myPoincut()\") myAfter(JoinPoint jp){}），也可以直接设置切入点表达式(@After(\"切点表达式\"))。\r\n例子：\r\n\r\n@Aspect//我要开始搞事了\r\npublic class MyAspect {\r\n\t@Pointcut(\"@target(org.springframework.stereotype.Controller)\")\r\n\tpublic void myPoincut(){\r\n\t\t//这是只是喊口号，具体事务啥也不干\r\n\t}\r\n\t//@After(\"@target(org.springframework.stereotype.Controller)\")\r\n\t@After(value=\"myPoincut()\")//响应myPoincut方法的口号\r\n\tpublic void myAfter(JoinPoint jp){\r\n\t\t//...我真正搞事的代码\r\n\t}\r\n}\r\n\r\n\r\n@AfterReturning\r\n返回通知，在目标方法返回结果之后，并且在@After切点执行之后执行。\r\n该注解有四个属性pointcut，value，returning，argNames，pointcut和value属性都是绑定通知的切入点表达式，不过pointcut优先级高于value。returning属性则是使用了命名绑定模式(下文有介绍)，定义返回值类型并接收返回值。argNames属性使用了命名绑定模式，定义参数类型、个数和顺序，和args(下文有介绍)效果一样，只是argNames优先级高于args。\r\n注意：如果目标方法返回原生类型，则会报错，SpringAop不会自动给返回值装箱。\r\n例子：\r\n\r\n@Aspect//我要开始搞事了\r\npublic class MyAspect {\r\n\t@Pointcut(\"@target(org.springframework.stereotype.Controller)\")\r\n\tpublic void myPoincut(){\r\n\t\t//这是只是喊口号，具体事务啥也不干\r\n\t}\r\n\t//@AfterReturning(returning = \"result\",value=\"@target(org.springframework.stereotype.Controller)\")\r\n\t@AfterReturning(returning = \"result\",pointcut=\"myPoincut()\")//响应myPoincut方法的口号\r\n\tpublic void myAfterReturning(JoinPoint jp,Object result){//result是目标方法的返回值，如果目标方法返回原生类型，则会报错，SpringAop不会自动给返回值装箱。\r\n\t\t//...我真正搞事的代码\r\n\t}\r\n}\r\n\r\n\r\n@AfterThrowing\r\n异常通知，在目标方法抛出异常之后执行，意味着如果此通知被执行，则@AfterReturning不会被执行。\r\n此注解有一个throwing属性，使用了命名绑定模式(下文有介绍)，定义异常类型并接收异常对象。\r\n注意：\r\n1、如果目标方法自己try- catch了异常，而没有继续往外抛，则不会进入此通知。\r\n2、@AfterThrowing虽然处理异常，但它不会阻止异常传播到上一级调用者，如果没有catch，则会导致jvm终止。\r\n\r\n例子：\r\n\r\n@Aspect//我要开始搞事了\r\npublic class MyAspect {\r\n\t@Pointcut(\"@target(org.springframework.stereotype.Controller)\")\r\n\tpublic void myPoincut(){\r\n\t\t//这是只是喊口号，具体事务啥也不干\r\n\t}\r\n\t//@AfterThrowing(throwing = \"e\",value=\"@target(org.springframework.stereotype.Controller)\")\r\n\t@AfterThrowing(throwing = \"e\",pointcut=\"myPoincut()\")//响应myPoincut方法的口号\r\n\tpublic void myAfterThrowing(JoinPoint jp,Throwable e){//e是目标方法的真实发生异常后抛出的异常对象。\r\n\t\t//...我真正搞事的代码\r\n\t}\r\n}\r\n\r\n\r\n@Around\r\n环绕通知：目标方法执行前后分别执行一些代码，接收ProceedingJoinPoint参数，可以控制目标方法是否继续执行。通常用于统计方法耗时，参数校验等操作。\r\n环绕通知早于前置通知，晚于返回通知。\r\n例子：\r\n\r\n@Aspect//我要开始搞事了\r\npublic class MyAspect {\r\n\t@Pointcut(\"@target(org.springframework.stereotype.Controller)\")\r\n\tpublic void myPoincut(){\r\n\t\t//这是只是喊口号，具体事务啥也不干\r\n\t}\r\n\t//@Around(\"@target(ctr)\")//可以使用“命名绑定模式”定义切点表达式\r\n\t//public void cutCode(ProceedingJoinPoint pjp,org.springframework.stereotype.Controller ctr){//可以使用“命名绑定模式”定义切点表达式\r\n\t@Around(value=\"myPoincut()\")//响应myPoincut方法的口号\r\n\tpublic Object cutCode(ProceedingJoinPoint pjp){\r\n\t\t//...我真正搞事的代码，前部分，这部分代码在@Before之前执行\r\n\t\tObject result = pjp.proceed();//调用目标方法\r\n\t\t//...我真正搞事的代码，后部分，这部分代码在@After之后执行\r\n\t\treturn result;\r\n\t}\r\n}\r\n\r\n\r\n顺序总结\r\n真实方法无异常：\r\n@Around=>@Before=>真实方法=>@After=>@AfterReturning=>@Around\r\n真实方法有异常：\r\n@Around=>@Before=>真实方法=>@After=>@AfterThrowing=>@Around\r\n\r\n\r\n\r\n切点表达式\r\n以下内容抄录自：最全 SpringAOP 切面表达式，内容我有细微改动和补充。\r\n\r\n概述\r\n切点表达式即PCD(pointcut designators )，SpringAOP的PCD是完全兼容AspectJ，一共有10种。\r\n\r\n通配符\r\n\r\n● 任意，不限制。\r\n.. 0个或多个项，主要用于类名匹配式和参数匹配式中，如果用于类名匹配式中，则表示匹配当前包及其子包，如果用于参数匹配式中，则表示匹配0个或多个参数。\r\n\r\n运算符\r\n切面表达式支持&& 、|| 、! 这种逻辑操作，表示将多个表达式按照逻辑与、逻辑非、逻辑或的规则拼接起来。\r\n&& 左右两个表达式同时满足(不是短路与)。\r\n|| 左右两个表达式任意满足一个(不是短路或)。\r\n! 非，取反。\r\n\r\nexecution(* com.xxx.spring.demo..*.login(java.lang.String,..))&&execution(* com.xxx.spring.demo2..*.test(java.lang.String,..))\r\n\r\n\r\n如上\"within(per.aop.*) && args(str)\"，str必须是String类型或其子类，且方法入参只能有一个。\r\n命名绑定模式只支持target、this、args三种PCD表达式。\r\n\r\nexecution\r\nexecution是最常用的PCD。它的匹配式模板如下展示:\r\n\r\nexecution(modifiers-pattern? ret-type-pattern declaring-type-pattern? name-pattern(param-pattern) throws-pattern?)\r\nexecution(修饰符匹配式? 返回类型匹配式 类名匹配式? 方法名匹配式(参数匹配式) 异常匹配式?)\r\n\r\n\r\n代码块中带?符号的匹配式都是可选的，对于execution PCD必不可少的只有三个:\r\n返回值匹配值、方法名匹配式、参数匹配式\r\n\r\n举例分析: execution(public  ServiceDemo.(..)) 匹配public修饰符，返回值是,即任意返回值类型都行，ServiceDemo是类名匹配式不一定要全路径，只要全局依可见性唯一就行，.是方法名匹配式，匹配所有方法，…是参数匹配式，匹配任意数量、任意类型参数的方法。\r\n栗子：\r\n\r\n//匹配com.xyz.service及其子包下的任意方法\r\nexecution(* com.xyz.service..*.*(..))\r\n//匹配任意名字为joke的方法，且其动态入参是是Object类型或该类的子类\r\nexecution(* joke(Object+)))\r\n//匹配任意名字为joke的方法，该方法 一个入参为String(不可以为子类)，后面可以有任意个入参且入参类型不限\r\nexecution(* joke(String,..))\r\n//匹配指定包下find开头的方法\r\nexecution(* com..*.*Dao.find*(..))\r\n//匹配com.baobaotao包下Waiter及其子类的所有方法\r\nexecution(* com.baobaotao.Waiter+.*(..))\r\n\r\n//以下示例摘录自：https://blog.csdn.net/u012156858/article/details/108429285\r\n//匹配使用public修饰，返回值为任意类型，并且是com.xxx.spring.demo.LoginService类中名称为login的方法，方法包含两个参数，都是String类型。\r\nexecution(public * com.xxx.spring.demo.LoginService.login(java.lang.String,java.lang.String))\r\n//对任何类的任何返回值的任何方法都有效\r\nexecution( * *.*(..))\r\n//匹配使用public修饰，返回值为任意类型，并且是com.xxx.spring.demo包下任意类中名称为login的方法，方法包含两个参数，第一个参数类型是String 第二个参数任意\r\nexecution(public * com.xxx.spring.demo.*.login(java.lang.String,*))\r\n//匹配使用public修饰，返回值为任意类型，并且是com.xxx.spring.demo包下任意类中名称为login的方法，方法包含多个参数，第一个参数类型是String 后面的参数任意\r\nexecution(public * com.xxx.spring.demo.*.login(java.lang.String,..))\r\n//匹配使用public修饰，返回值为任意类型，并且是com.xxx.spring.demo包及其子包下任意类中名称为login的方法，方法包含多个参数，第一个参数类型是String 后面的参数任意\r\nexecution(public * com.xxx.spring.demo..*.login(java.lang.String,..))\r\n//与上面示例完全一样 权限修饰符可写可不写 默认就是public\r\nexecution(* com.xxx.spring.demo..*.login(java.lang.String,..))\r\n//以上示例摘录自：https://blog.csdn.net/u012156858/article/details/108429285\r\n\r\n\r\nwithin\r\n筛选出某包下的所有类，注意要带有*。\r\n\r\n@Pointcut(\"within(com.abc.service.*)\")//com.abc.service包下的所有类，不包括子包下的类。\r\npublic void myPointcut1()\r\n{\r\n}\r\n@Pointcut(\"within(com.xyz.service..*)\")//com.xyz.service包下及其子包下的类\r\npublic void myPointcut2()\r\n{\r\n}\r\n\r\n\r\ntarget\r\ntarget作用于目标对象，即被代理对象(请先了解代理模式中代理对象和被代理对象）需要实现哪些接口，可以通过target来定义。常用于命名绑定模式，对被代理对象的类型进行过滤筛选。this和target的实际作用非常相似。\r\n\r\n@Pointcut(\"target(mys)\")//被代理类是MyService接口的实现\r\npublic void myPointcut1(MyService mys)\r\n{\r\n}\r\n@Pointcut(\"target(mys)\")//被代理类是MyServiceImpl类或者是MyServiceImpl的子类\r\npublic void myPointcut2(MyServiceImpl mys)\r\n{\r\n}\r\n\r\n\r\nthis\r\nthis作用于代理对象，即生成的代理对象(请先了解代理模式中代理对象和被代理对象）需要实现哪些接口，可以通过this来定义。常用于命名绑定模式，对被代理对象（我没写错，它和target的真实目的都是过滤被代理对象）的类型进行过滤筛选。this和target的实际作用非常相似。\r\n\r\n如果目标类是基于接口实现的，则this()中可以填该接口的全路径名，目标类是基于CGLIB实现的，则this中可以填写目标类的全路径名。\r\n使用@EnableAspectJAutoProxy(proxyTargetClass  = true)可以强制使用CGLIB。否则默认首先使用jdk动态代理，jdk代理不了才会用CGLIB。\r\n\r\n@Pointcut(\"this(mys)\")//代理类是MyService接口的实现（也就是说明被代理类也必须这样，绕了一层后，其实最终目的还是为了筛选被代理类）\r\npublic void myPointcut1(MyService mys)\r\n{\r\n}\r\n@Pointcut(\"this(mys)\")//代理类是MyServiceImpl类或者是MyServiceImpl的子类（也就是说明被代理类也必须这样，绕了一层后，其实最终目的还是为了筛选被代理类）\r\npublic void myPointcut2(MyServiceImpl mys)\r\n{\r\n}\r\n\r\n\r\nargs\r\n常用于对目标方法的参数匹配。一般不单独使用，而是配合其他PCD来使用。args可以使用命名绑定模式，如下举例:\r\n\r\n@Aspect // 切面声明@Component // 注入IOC\r\n@Slf4jclass\r\nAspectDemo {\r\n\t@Around(\"within(per.aop.*) && args(str)\") // 在per.aop包下，且被代理方法的只有一个参数，参数类是String或者其子类\r\n\t@SneakyThrowspublic\r\n\tObject logAspect(ProceedingJoinPoint pjp, String str) {\r\n        String signature = pjp.getSignature().toString();\r\n        log.info(\"{} start,param={}\", signature, pjp.getArgs());\r\n        Object res = pjp.proceed();\r\n        log.info(\"{} end\", signature);return res;\r\n    }\r\n}\r\n\r\n\r\n1.如果args中是参数名，则配合切面(advice)方法的使用来确定要匹配的方法参数类型。\r\n2.如果args中是类型，例如@Around(\"within(per.aop.*) && args(String)\")，则可以不必使用切面方法来确定类型，但此时也不能使用参数绑定了见下文了。\r\n虽然args()支持+符号，但本身args()就支持子类通配。\r\n和带参数匹配execution区别\r\n举个例子: args(com.xgj.Waiter)等价于 execution( (com.xgj.Waiter+))。而且execution不能支持带参数的advice。\r\n\r\n@annotation\r\n@annotation属于方法名匹配式，指示筛选指定注解的方法作为被代理方法。\r\n例子：\r\n\r\n@Aspect//我要开始搞事了\r\npublic class MyAspect {\r\n\t@Pointcut(\"@annotation(org.springframework.web.bind.annotation.RequestMapping)\")//方法上有@RequestMapping注解的需要代理\r\n\tpublic void myPoincut(){\r\n\t}\r\n}\r\n\r\n\r\n@target\r\n@target属于类名匹配式，指示筛选指定注解的类作为被代理类。\r\n例子：\r\n\r\n@Aspect//我要开始搞事了\r\npublic class MyAspect {\r\n\t@Pointcut(\"@target(org.springframework.stereotype.Controller)\")//类上有@Controller注解的需要代理\r\n\tpublic void myPoincut(){\r\n\t}\r\n}\r\n\r\n\r\n@args\r\n@args属于参数匹配式，指示筛选指定注解的参数类型作为被代理方法。是方法参数的类上有指定注解，不是方法参数上带注解。\r\n例子：\r\n\r\n@Aspect//我要开始搞事了\r\npublic class MyAspect {\r\n\t@Pointcut(\"@args(io.swagger.annotations.ApiModel)\")//匹配1个参数，参数的类上运行时具有@ApiModel注解的需要被代理，不是方法参数有注解@ApiModel\r\n\tpublic void myPoincut1(){\r\n\t}\r\n\t@Pointcut(\"@args(io.swagger.annotations.ApiModel,..)\")//匹配一个或多个参数，第一个参数的类上运行时具有@ApiModel注解的需要被代理\r\n\tpublic void myPoincut2(){\r\n\t}\r\n\t@Pointcut(\"@args(io.swagger.annotations.ApiModel,io.swagger.annotations.MyModel)\")//匹配两个参数，第一个参数的类上运行时具有@ApiModel注解并且第二个参数的类上运行时具有@MyModel注解的需要被代理\r\n\tpublic void myPoincut3(){\r\n\t}\r\n}\r\n\r\n\r\n@within\r\n非运行时类型的@target。\r\n\r\n@target关注的是被调用的对象，@within关注的是调用的方法所在的类。\r\n\r\n@target  和 @within  的不同点:\r\n\r\n@target(注解A)：判断被调用的目标对象中是否声明了注解A，如果有，会被拦截\r\n\r\n@within(注解A)： 判断被调用的方法所属的类中是否声明了注解A，如果有，会被拦截\r\n\r\nbean\r\n根据Spring Bean名称来匹配。支持*通配符。\r\n\r\nbean(*Service) // 匹配所有Service结尾的Spring容器内对象\r\n\r\n\r\nargNames\r\n观察源码可以发现，所有的Advice注解都带有argNames字段，例如@Around:\r\n\r\n@Around(value = \"execution(* TestBean.paramArgs(..))  && args(decimal,str,..)&& target(bean)\", argNames = \"pjp,str,decimal,bean\")@SneakyThrows // proceed会抛受检异常Object aroundArgs(ProceedingJoinPoint pjp,/*使用命名绑定模式*/ String str, BigDecimal decimal, Object bean) {// 在方法执行前做一些操作return  pjp.proceed();\r\n}\r\n\r\n\r\nargnames 必须要和args、target、this标签一起使用。虽然实际操作中可以不带，但官方建议所有带参数的都带，原因如下:\r\n\r\n因此如果‘ argernames’属性没有指定，那么 Spring AOP 将查看类的调试信息，并尝试从局部变量表中确定参数名。只要使用调试信息(至少是‘-g: vars’)编译了类，就会出现此信息。使用这个标志编译的结果是:\r\n\r\n(1)你的代码将会更容易被反向工程)\r\n\r\n(2)类文件大小将会非常大(通常是无关紧要的)\r\n\r\n(3)删除未使用的局部变量的优化将不会被编译器应用。\r\n\r\n此外，如果编译的代码没有必要的调试信息，那么 Spring AOP 将尝试推断绑定变量与参数的配对。如果变量的绑定在可用信息下是不明确的，那么一个 AmbiguousBindingException 就会被抛出。如果上面的策略都失败了，那么就会抛出一个 IllegalArgumentException。\r\n建议所有的advice注解里都带argNames，反正idea也会提醒。\r\n\r\n以上内容抄录自：https://link.csdn.net/?target=https%3A%2F%2Fblog.51cto.com%2Fu_15087089%2F2599361\r\n\r\n\r\n\r\n使用SpringAOP实现全局日志处理\r\npom.xml\r\n\r\n\t<dependency>\r\n        <groupId>xxbs</groupId>\r\n        <artifactId>xxbs-util</artifactId>\r\n        <version>${xxbs.version}</version>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>xxbs</groupId>\r\n        <artifactId>xxbs-jwt</artifactId>\r\n        <version>${xxbs.version}</version>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>xxbs</groupId>\r\n        <artifactId>xxbs-bean</artifactId>\r\n        <version>${xxbs.version}</version>\r\n    </dependency>\r\n    <dependency>\r\n\t    <groupId>org.slf4j</groupId>\r\n\t    <artifactId>slf4j-api</artifactId>\r\n\t</dependency>\r\n    <dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot</artifactId>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-aop</artifactId>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>javax.servlet</groupId>\r\n        <artifactId>javax.servlet-api</artifactId>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>org.springframework</groupId>\r\n        <artifactId>spring-webmvc</artifactId>\r\n        <scope>provided</scope>\r\n    </dependency>\r\n\r\n\r\napplication.properties\r\n\r\naopLog.enabled=true\r\n\r\nAutoConfiguration.java\r\n\r\npackage tang.zhiyin.log.conf;\r\n\r\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport tang.zhiyin.log.aspect.AopLogAspect;\r\n\r\n@Configuration\r\n@ConditionalOnProperty(name = \"aopLog.enabled\", havingValue = \"true\", matchIfMissing = false)\r\npublic class AutoConfiguration {\r\n\r\n    @Bean\r\n    public AopLogAspect sysLogAspect() {\r\n        return new AopLogAspect();\r\n    }\r\n}\r\n\r\n\r\nAopLogAspect.java\r\n\r\npackage tang.zhiyin.log.aspect;\r\n\r\n\r\nimport cn.hutool.core.util.StrUtil;\r\nimport com.alibaba.fastjson.JSONObject;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.apache.commons.fileupload.FileItem;\r\nimport org.aspectj.lang.ProceedingJoinPoint;\r\nimport org.aspectj.lang.annotation.Around;\r\nimport org.aspectj.lang.annotation.Aspect;\r\nimport org.springframework.web.multipart.MultipartFile;\r\nimport tang.zhiyin.base.bean.result.Result;\r\nimport tang.zhiyin.base.bean.result.ResultCodeEnum;\r\nimport tang.zhiyin.base.util.IpUtil;\r\nimport tang.zhiyin.base.util.SpringRequestUtil;\r\nimport tang.zhiyin.jwt.util.JwtUtil;\r\n\r\nimport javax.servlet.ServletRequest;\r\nimport javax.servlet.ServletResponse;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\nimport java.io.PrintWriter;\r\nimport java.io.StringWriter;\r\nimport java.time.Duration;\r\nimport java.time.LocalDateTime;\r\nimport java.util.ArrayList;\r\nimport java.util.LinkedHashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\n/**\r\n * AOP日志处理\r\n */\r\n@Slf4j\r\n@Aspect\r\npublic class AopLogAspect {\r\n\r\n    /**\r\n     * 1、在tang.zhiyin.*.controller包下\r\n     * 2、有RestController或者Controller注解的类\r\n     * 3、有RequestMapping或者PostMapping或者GetMapping注解的方法\r\n     */\r\n    private static final String execution = \"execution(* tang.zhiyin.*.controller.*.*(..))\" +\r\n            \"&&(@target(org.springframework.web.bind.annotation.RestController)\" +\r\n            \"||@target(org.springframework.stereotype.Controller))\" +\r\n            \"&&(@annotation(org.springframework.web.bind.annotation.RequestMapping)\" +\r\n            \"||@annotation(org.springframework.web.bind.annotation.PostMapping)\" +\r\n            \"||@annotation(org.springframework.web.bind.annotation.GetMapping))\";\r\n\r\n\r\n    @Around(value = execution)\r\n    public Object cutCode(ProceedingJoinPoint pjp) {\r\n        Map<String, String> logString = new LinkedHashMap<>(20);\r\n        logString.put(\"用户ID\", JwtUtil.getUserId() + \"\");\r\n        logString.put(\"用户名\", JwtUtil.getUserName());\r\n        logString.put(\"Token\", JwtUtil.getJwtToken());\r\n        logString.put(\"URL\", SpringRequestUtil.getRequest().getRequestURI());\r\n        logString.put(\"HTTP方法\", SpringRequestUtil.getRequest().getMethod());\r\n        logString.put(\"客户IP\", IpUtil.getIp(SpringRequestUtil.getRequest()));\r\n        logString.put(\"服务器IP\", IpUtil.getLocalIp());\r\n        logString.put(\"线程\", Thread.currentThread().getId() + \"\");\r\n        logString.put(\"类\", pjp.getTarget().getClass().getName());\r\n        logString.put(\"方法\", pjp.getSignature().getName());\r\n        logString.put(\"接口参数\", getParam(pjp.getArgs()));\r\n        logString.put(\"BodyStream\", getParams(SpringRequestUtil.getRequest()));\r\n        logString.put(\"QueryString\", SpringRequestUtil.getRequest().getQueryString());\r\n        logString.put(\"User-Agent\", SpringRequestUtil.getRequest().getHeader(\"User-Agent\"));\r\n\r\n        LocalDateTime startTime = LocalDateTime.now();\r\n        Object result = null;\r\n        try {\r\n            result = pjp.proceed();//调用目标方法\r\n            logString.put(\"返回值\", JSONObject.toJSONString(result));\r\n        } catch (Throwable e) {\r\n            logString.put(\"异常信息\", e.getMessage());\r\n            logString.put(\"堆栈信息\", StrUtil.sub(getStackTrace(e), 0, 65535));\r\n            e.printStackTrace();\r\n//            throw new RuntimeException(e);\r\n            result = Result.build(ResultCodeEnum.SERVICE_ERROR.getCode(), \"系统错误:\" + e.getMessage());\r\n        } finally {\r\n            logString.put(\"用时\", Duration.between(startTime, LocalDateTime.now()).toMillis() + \"秒\");\r\n            if (logString.containsKey(\"异常信息\")) {\r\n                log.error(JSONObject.toJSONString(logString));\r\n            } else {\r\n                log.info(JSONObject.toJSONString(logString));\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public static String getStackTrace(Throwable throwable) {\r\n        StringWriter sw = new StringWriter();\r\n        try (PrintWriter pw = new PrintWriter(sw)) {\r\n            throwable.printStackTrace(pw);\r\n            return sw.toString();\r\n        }\r\n    }\r\n\r\n    public static String getParams(HttpServletRequest request) {\r\n        String param = \"\";\r\n        try {\r\n        \tBufferedReader br = new BufferedReader(new InputStreamReader(request.getInputStream(), \"UTF-8\"));//这流不能关闭\r\n            String line = null;\r\n            StringBuilder sb = new StringBuilder();\r\n            while ((line = br.readLine()) != null) {\r\n                sb.append(line);\r\n            }\r\n            param = sb.toString();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return \"\";\r\n        }\r\n        return param;\r\n    }\r\n\r\n    public static String getParam(Object[] args) {\r\n        List<Object> params = new ArrayList<>(args.length);\r\n        for (int i = 0; i < args.length; i++) {\r\n            if (args[i] instanceof ServletRequest || args[i] instanceof ServletResponse) {\r\n                continue;\r\n            }\r\n            if (args[i] instanceof FileItem) {\r\n                FileItem file = (FileItem) args[i];\r\n                Map<String, String> fileInfo = new LinkedHashMap<>();\r\n                fileInfo.put(\"文件名\", file.getName());\r\n                fileInfo.put(\"文件大小\", file.getSize() + \"字节\");\r\n                params.add(\"文件流参数：\" + JSONObject.toJSONString(fileInfo));\r\n            } else if (args[i] instanceof MultipartFile) {\r\n                MultipartFile file = (MultipartFile) args[i];\r\n                Map<String, String> fileInfo = new LinkedHashMap<>();\r\n                fileInfo.put(\"文件名\", file.getOriginalFilename());\r\n                fileInfo.put(\"文件大小\", file.getSize() + \"字节\");\r\n                params.add(\"文件流参数：\" + JSONObject.toJSONString(fileInfo));\r\n            } else {\r\n                params.add(JSONObject.toJSONString(args[i]));\r\n            }\r\n        }\r\n        return JSONObject.toJSONString(params);\r\n    }\r\n}\r\n\r\n\r\nspring.factories\r\n\r\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\r\n    tang.zhiyin.log.conf.AutoConfiguration\r\n\r\n\r\n原文链接：https://blog.csdn.net/u012643122/article/details/126132724","fileName":"springApo.vm","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\resources\\springApo.vm"},{"content":"package ${mock.classPath};\r\n\r\nimport org.junit.Assert;\r\nimport org.junit.Test;\r\nimport org.junit.runner.RunWith;\r\nimport org.mockito.InjectMocks;\r\nimport org.mockito.MockitoAnnotations;\r\nimport org.mockito.Spy;\r\nimport org.mockito.junit.MockitoJUnitRunner;\r\nimport org.testng.annotations.BeforeMethod;\r\nimport com.alibaba.fastjson.JSON;\r\n\r\nimport static org.mockito.ArgumentMatchers.any;\r\n\r\n/*\r\n * @author lisc\r\n * @Description: ${mock.classPath}.${mock.className}\r\n * @date ${date?datetime}\r\n */\r\n@RunWith(MockitoJUnitRunner.Silent.class)\r\npublic class ${mock.className}MockTest extends IbizcoprodJunitTestBase{\r\n\r\n        @Spy\r\n        @InjectMocks\r\n        private ${mock.className} ${mock.className?uncap_first};\r\n\r\n        <#list mock.fieldBeanList as fieldBeans>\r\n        @Mock\r\n        private ${fieldBeans.fieldType} ${fieldBeans.fieldName};\r\n        </#list>\r\n\r\n\r\n        @BeforeMethod\r\n        public void initMocks(){\r\n               MockitoAnnotations.initMocks(this);\r\n         }\r\n\r\n<#-- 遍历所有方法-->\r\n<#list mock.methodBeanList as methodBeans>\r\n\r\n        @Test\r\n        public void ${methodBeans.methodName}Test() {\r\n            try {\r\n\r\n                /**\r\n                 * tip:\r\n                 * 正常流程\r\n                 */\r\n                reset(this);\r\n\r\n                <#list methodBeans.methodRequestType as request>\r\n                ${request.fieldType}  ${request.fieldName}Request0010 = parseObject(\"/${request.fieldPathAndName}.json\",${request.fieldType}.class);\r\n                </#list>\r\n                <#list methodBeans.methodResponseType as response>\r\n                ${response.fieldType}  ${response.fieldName}response0010 = parseObject(\"/${response.fieldPathAndName}.json\",${response.fieldType}.class);\r\n                </#list>\r\n\r\n                //stub\r\n              //  Mockito.when().thenReturn();\r\n                //fire\r\n              //  ${mock.className?uncap_first}.${methodBeans.methodName}(<#list  methodBeans.methodRequestType as par>${par.fieldName}request0010 <#sep>, </#sep></#list>);\r\n\r\n            } catch (Exception e) {\r\n                logger.error(\"${mock.className}:${methodBeans.methodName}:系统异常,原始入参:{} 异常文本:{} 异常栈:\", JSON.toJSONString(\"\"), e.getMessage(), e);\r\n                Assert.fail();\r\n            }\r\n        }\r\n\r\n</#list>\r\n}\r\n","fileName":"${mock.className}MockTest.java","path":"D:\\Code\\TestCode\\newzhongchou\\Freemarker-utils\\src\\main\\resources\\备份\\弃用模板\\${mock.className}MockTest.java"}]