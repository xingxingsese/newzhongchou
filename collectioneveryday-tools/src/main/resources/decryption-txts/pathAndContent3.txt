[{"content":"package com.lsc.tools.annotation;\r\n\r\nimport java.awt.event.ActionListener;\r\nimport java.lang.annotation.ElementType;\r\nimport java.lang.annotation.Retention;\r\nimport java.lang.annotation.RetentionPolicy;\r\nimport java.lang.annotation.Target;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: com.lsc.tools.annotation\r\n * @date 2022/8/29 18:24\r\n */\r\n@Target(ElementType.FIELD)\r\n@Retention(RetentionPolicy.RUNTIME)\r\npublic @interface ActionListenerFor {\r\n    // 定义一个成员变量，用于设置元数据\r\n    // 该listener成员变量用于保存监听器实现类\r\n    Class<? extends ActionListener> listener();\r\n}\r\n","fileName":"ActionListenerFor.java","path":"D:\\Code\\TestCode\\newzhongchou\\everyday-tools\\src\\main\\java\\com\\lsc\\tools\\annotation\\ActionListenerFor.java"},{"content":"package com.lsc.tools.annotation;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.event.ActionListener;\r\nimport java.lang.reflect.Field;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: com.lsc.tools.annotation\r\n * @date 2022/8/29 18:25\r\n */\r\npublic class ActionListenerInstaller {\r\n    // 处理Annotation的方法，其中obj是包含Annotation的对象\r\n    public static void processAnnotations(Object obj) {\r\n        try {\r\n            // 获取obj对象的类\r\n            Class cl = obj.getClass();\r\n            // 获取指定obj对象的所有成员变量，并遍历每个成员变量\r\n            for (Field f : cl.getDeclaredFields()) {\r\n                // 将该成员变量设置成可自由访问。\r\n                f.setAccessible(true);\r\n                // 获取该成员变量上ActionListenerFor类型的Annotation\r\n                ActionListenerFor a = f.getAnnotation(ActionListenerFor.class);\r\n                // 获取成员变量f的值\r\n                Object fObj = f.get(obj);\r\n                // 如果f是AbstractButton的实例，且a不为null\r\n                if (a != null && fObj != null\r\n                        && fObj instanceof AbstractButton) {\r\n                    // 获取a注解里的listner元数据（它是一个监听器类）\r\n                    Class<? extends ActionListener> listenerClazz = a.listener();\r\n                    // 使用反射来创建listner类的对象\r\n                    ActionListener al = listenerClazz.newInstance();\r\n                    AbstractButton ab = (AbstractButton) fObj;\r\n                    // 为ab按钮添加事件监听器\r\n                    ab.addActionListener(al);\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n","fileName":"ActionListenerInstaller.java","path":"D:\\Code\\TestCode\\newzhongchou\\everyday-tools\\src\\main\\java\\com\\lsc\\tools\\annotation\\ActionListenerInstaller.java"},{"content":"package com.lsc.tools.bean;\r\n\r\nimport lombok.Data;\r\nimport org.springframework.stereotype.Component;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: com.lsc.tools.bean\r\n * @date 2022/8/23 10:23\r\n */\r\n@Data\r\n@Component\r\npublic class ClassBean {\r\n    private String fileName;\r\n    private String path;\r\n    private String content;\r\n}\r\n","fileName":"ClassBean.java","path":"D:\\Code\\TestCode\\newzhongchou\\everyday-tools\\src\\main\\java\\com\\lsc\\tools\\bean\\ClassBean.java"},{"content":"package com.lsc.tools.bean;\r\n\r\nimport com.alibaba.fastjson.JSON;\r\nimport com.alibaba.fastjson.TypeReference;\r\nimport com.alibaba.fastjson.parser.ParserConfig;\r\nimport org.apache.commons.collections.CollectionUtils;\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\nimport java.lang.reflect.Field;\r\nimport java.lang.reflect.Method;\r\nimport java.lang.reflect.Modifier;\r\nimport java.text.DateFormat;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.*;\r\nimport java.util.regex.Pattern;\r\n\r\nimport static com.alibaba.fastjson.JSON.DEFAULT_PARSER_FEATURE;\r\n\r\n/**\r\n * @description:工具类\r\n * @author: yuchao\r\n * @date: 2021/11/1 14:59\r\n */\r\npublic class CommonUtil {\r\n    private static final Logger log = LoggerFactory.getLogger(CommonUtil.class);\r\n    /**\r\n     *\r\n     */\r\n    private static final String DATE_FORMAT = \"yyyyMMdd\";\r\n    \r\n    /**\r\n     *\r\n     */\r\n    public static final String BIRTHDAY_DATE_FORMAT = \"yyyy-MM-dd\";\r\n    \r\n    /**\r\n     * data format\r\n     */\r\n    public static final String DATETIME_FORMAT = \"yyyy-MM-dd HH:mm\";\r\n    \r\n    /**\r\n     * PROCESS_TIME_FORMAT\r\n     */\r\n    public static final String PROCESS_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss.SSS\";\r\n    \r\n    /**\r\n     * PROCESS_TIME_FORMAT\r\n     */\r\n    public static final String TASK_PROCESS_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\r\n    \r\n    /**\r\n     * TASK_PROCESS_YEAR\r\n     */\r\n    public static final String TASK_PROCESS_YEAR = \"2000-01-01\";\r\n    \r\n    /**\r\n     * legacy facade package prefix\r\n     */\r\n    public final static String LEGACY_PACKAGE_PREFIX = \"com.ipay.ibizecoprod.common.service.legacy.facade\";\r\n    \r\n    /**\r\n     * password format\r\n     */\r\n    private static final String PASSWORD_FORMAT = \"^.*(?=.{8,})(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d).*$\";\r\n    \r\n    /**\r\n     * email format\r\n     */\r\n    private static String EMAIL_FORMAT = \"^[a-zA-Z0-9_+&*-]+(?:\\\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\\\.)+[a-zA-Z]{2,7}$\";\r\n    \r\n    /**\r\n     * phone number format\r\n     **/\r\n    private static String PHONE_NUMBER_FORMAT = \"^[0-9]*\";\r\n    \r\n    /**\r\n     * phone country code format\r\n     **/\r\n    private static String PHONE_COUNTRY_CODE_FORMAT = \"^[0-9]*\";\r\n    \r\n    /**\r\n     * PARSER_CONFIG\r\n     * fastJson ParserConfig need to be used in static or maybe result in OOM.\r\n     * Refer:{http://jarvis.alipay.net/xdoc/module_config\r\n     * .htm?docSpaceId=20181031110901000589473110&docModuleId=20181031110910009280657955#20190626110912000718946275}\r\n     */\r\n    private static ParserConfig PARSER_CONFIG = new ParserConfig();\r\n    \r\n    static {\r\n        PARSER_CONFIG.setSafeMode(true);//set safe mode\r\n    }\r\n    \r\n   \r\n \r\n    \r\n    /**\r\n     * @param pattern\r\n     * @return\r\n     */\r\n    public static DateFormat getNewDateFormat(String pattern) {\r\n        DateFormat df = new SimpleDateFormat(pattern);\r\n        df.setLenient(false);\r\n        return df;\r\n    }\r\n    \r\n    /**\r\n     * Get date formatter with locale\r\n     *\r\n     * @param pattern\r\n     * @return\r\n     */\r\n    public static DateFormat getNewDateFormat(String pattern, Locale locale) {\r\n        DateFormat df = new SimpleDateFormat(pattern, locale);\r\n        df.setLenient(false);\r\n        return df;\r\n    }\r\n    \r\n    /**\r\n     * getTodayString\r\n     *\r\n     * @return\r\n     */\r\n    public static String getTodayString() {\r\n        DateFormat dateFormat = getNewDateFormat(DATE_FORMAT);\r\n        return getDateString(new Date(), dateFormat);\r\n    }\r\n    \r\n    /**\r\n     * getDateString\r\n     *\r\n     * @param date\r\n     * @param dateFormat\r\n     * @return\r\n     */\r\n    public static String getDateString(Date date, DateFormat dateFormat) {\r\n        return date != null && dateFormat != null ? dateFormat.format(date) : null;\r\n    }\r\n    \r\n    /**\r\n     * getPartition\r\n     *\r\n     * @param date\r\n     * @return\r\n     */\r\n    public static String getPartition(Date date) {\r\n        DateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT);\r\n        return dateFormat.format(date);\r\n    }\r\n    \r\n    /**\r\n     * @param str\r\n     * @param size\r\n     * @return\r\n     */\r\n    public static boolean lessThan(String str, int size) {\r\n        if (StringUtils.isBlank(str)) {\r\n            return true;\r\n        }\r\n        return str.length() <= size;\r\n    }\r\n    \r\n    /**\r\n     * @param str\r\n     * @param size\r\n     * @return\r\n     */\r\n    public static boolean moreThan(String str, int size) {\r\n        if (StringUtils.isBlank(str)) {\r\n            return true;\r\n        }\r\n        return str.length() >= size;\r\n    }\r\n    \r\n    /**\r\n     * @param str\r\n     * @return\r\n     */\r\n    public static boolean passwordCheck(String str) {\r\n        if (StringUtils.isBlank(str)) {\r\n            return false;\r\n        }\r\n        return str.matches(PASSWORD_FORMAT);\r\n    }\r\n    \r\n    /**\r\n     * checkBirthDay\r\n     *\r\n     * @param birthDay\r\n     * @return\r\n     */\r\n    public static boolean checkBirthDay(String birthDay) {\r\n        if (StringUtils.isBlank(birthDay)) {\r\n            return false;\r\n        }\r\n        DateFormat dateFormat = getNewDateFormat(BIRTHDAY_DATE_FORMAT);\r\n        try {\r\n            dateFormat.parse(birthDay);\r\n            return true;\r\n        } catch (ParseException ex) {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * checkEmail\r\n     *\r\n     * @param email\r\n     * @return\r\n     */\r\n    public static boolean checkEmail(String email) {\r\n        Pattern pat = Pattern.compile(EMAIL_FORMAT);\r\n        if (email == null) {\r\n            return false;\r\n        }\r\n        return pat.matcher(email).matches();\r\n    }\r\n    \r\n    /**\r\n     * checkCountry\r\n     *\r\n     * @param country\r\n     * @return\r\n     */\r\n    public static boolean checkCountry(String country) {\r\n        // get ISO countries\r\n        \r\n        String[] countries = Locale.getISOCountries();\r\n        for (int i = 0; i < countries.length; i++) {\r\n            if (countries[i].equals(country)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * getCountryList\r\n     *\r\n     * @return\r\n     */\r\n    public static Map<String, String> getCountryList(Locale locale) {\r\n        Map<String, String> countryMap = new HashMap<>();\r\n        for (String region : Arrays.asList(Locale.getISOCountries())) {\r\n            // create a new locale\r\n            Locale localeValue = new Locale(locale.getLanguage(), region);\r\n            countryMap.put(region, localeValue.getDisplayCountry());\r\n        }\r\n        return countryMap;\r\n    }\r\n    \r\n    /**\r\n     * @param localeString\r\n     * @return\r\n     */\r\n    public static Locale getLocale(String localeString) {\r\n        Locale[] ls = Locale.getAvailableLocales();\r\n        Locale locale;\r\n        for (Locale localeTmp : ls) {\r\n            if (StringUtils.equals(localeTmp.toString(), localeString)) {\r\n                locale = localeTmp;\r\n                return locale;\r\n            }\r\n        }\r\n        return new Locale(\"zh\", \"CN\");\r\n    }\r\n    \r\n    /**\r\n     * checkTouTncppAgree\r\n     *\r\n     * @param touTncppAgree\r\n     * @return\r\n     */\r\n    public static boolean checkTouTncppAgree(String touTncppAgree) {\r\n        if (StringUtils.equals(touTncppAgree, \"0\") || StringUtils.equals(touTncppAgree, \"1\")) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * checkMarking\r\n     *\r\n     * @param marking\r\n     * @return\r\n     */\r\n    public static boolean checkMarking(String marking) {\r\n        if (StringUtils.equals(marking, \"0\") || StringUtils.equals(marking, \"1\")) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * getLocalFromString\r\n     *\r\n     * @param lang\r\n     * @return\r\n     */\r\n    public static Locale getLocalFromString(String lang) {\r\n        Locale defaultLocal = new Locale(\"zh\", \"CN\");\r\n        if (StringUtils.isEmpty(lang)) {\r\n            return defaultLocal;\r\n        } else {\r\n            String[] arrays = lang.split(\"-\");\r\n            if (arrays.length == 2) {\r\n                return new Locale(arrays[0], arrays[1]);\r\n            }\r\n        }\r\n        return defaultLocal;\r\n    }\r\n    \r\n    /**\r\n     * printProcessTime\r\n     *\r\n     * @param porcessTime\r\n     * @return\r\n     */\r\n    public static String printProcessTime(Date porcessTime) {\r\n        if (porcessTime == null) {\r\n            return \"null\";\r\n        }\r\n        return new SimpleDateFormat(PROCESS_TIME_FORMAT).format(porcessTime);\r\n    }\r\n    \r\n\r\n \r\n    \r\n    /**\r\n     * passTaskProcessTime\r\n     */\r\n    public static Date passTaskProcessTime(String timeStr, String paramName, Logger logger) {\r\n        DateFormat dateFormat = getNewDateFormat(TASK_PROCESS_TIME_FORMAT);\r\n        try {\r\n            return dateFormat.parse(TASK_PROCESS_YEAR + \" \" + timeStr);\r\n        } catch (ParseException ex) {\r\n            log.error( \"parse time error! paramName:{} ,timeStr:{}  \",paramName,timeStr,ex);\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    /**\r\n     * checkTaskProcessTimeValidate\r\n     *\r\n     * @param loadStartTime\r\n     * @param loadEndTime\r\n     * @return\r\n     */\r\n    public static boolean checkTaskProcessTimeValidate(Logger logger, List<Long> minuteList, Date loadStartTime, Date loadEndTime) {\r\n        \r\n        String currentTimeStr = getNewDateFormat(TASK_PROCESS_TIME_FORMAT).format(Calendar.getInstance().getTime());\r\n        currentTimeStr = TASK_PROCESS_YEAR + currentTimeStr.substring(10, currentTimeStr.length());\r\n        try {\r\n            Date currentTime = getNewDateFormat(TASK_PROCESS_TIME_FORMAT).parse(currentTimeStr);\r\n            boolean checkResult = true;\r\n            if (loadStartTime != null) {\r\n                checkResult = loadStartTime.before(currentTime);\r\n            }\r\n            if (loadEndTime != null) {\r\n                checkResult = checkResult && loadEndTime.after(currentTime);\r\n            }\r\n            long minute = currentTime.getTime() / 1000 / 60 % 60;\r\n            return checkResult && minuteList.contains(minute);\r\n        } catch (Exception ex) {\r\n            log.warn(\"check task process time validate error! \",ex);\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    /**\r\n     * parseObject\r\n     *\r\n     * @param text\r\n     * @param type\r\n     * @param <T>\r\n     * @return\r\n     */\r\n    public static <T> T parseObject(String text, TypeReference<T> type) {\r\n        return JSON.parseObject(text, type.getType(), PARSER_CONFIG, DEFAULT_PARSER_FEATURE, null);\r\n    }\r\n    \r\n    /**\r\n     * parseObject\r\n     *\r\n     * @param text\r\n     * @param type\r\n     * @param defaultValue\r\n     * @param <T>\r\n     * @return\r\n     */\r\n    public static <T> T parseObject(String text, TypeReference<T> type, T defaultValue) {\r\n        if (StringUtils.isBlank(text)) {\r\n            return defaultValue;\r\n        }\r\n        return JSON.parseObject(text, type.getType(), PARSER_CONFIG, DEFAULT_PARSER_FEATURE, null);\r\n    }\r\n    \r\n    /**\r\n     * parseObject\r\n     *\r\n     * @param text\r\n     * @param clazz\r\n     * @param <T>\r\n     * @return\r\n     */\r\n    public static <T> T parseObject(String text, Class<T> clazz) {\r\n        return JSON.parseObject(text, clazz, PARSER_CONFIG, DEFAULT_PARSER_FEATURE, null);\r\n    }\r\n    \r\n    /**\r\n     * parseObject\r\n     *\r\n     * @param text\r\n     * @param clazz\r\n     * @param defaultValue\r\n     * @param <T>\r\n     * @return\r\n     */\r\n    public static <T> T parseObject(String text, Class<T> clazz, T defaultValue) {\r\n        if (StringUtils.isBlank(text)) {\r\n            return defaultValue;\r\n        }\r\n        return JSON.parseObject(text, clazz, PARSER_CONFIG, DEFAULT_PARSER_FEATURE, null);\r\n    }\r\n    \r\n    /**\r\n     * @param clazz\r\n     * @return\r\n     */\r\n    public static List<Field> extractFieldFromClassHierarchy(Class<?> clazz) {\r\n        // field list\r\n        List<Field> result = new ArrayList<Field>();\r\n        // check class is null\r\n        while (clazz != null) {\r\n            //  filed is ;ist\r\n            if (null != clazz.getDeclaredFields()) {\r\n                CollectionUtils.addAll(result, Arrays.stream(clazz.getDeclaredFields()).filter(field -> {\r\n                    return !Modifier.isStatic(field.getModifiers());\r\n                }).toArray());\r\n            }\r\n            clazz = clazz.getSuperclass();\r\n            if (!clazz.getName().startsWith(\"com.ipay.ibizecoprod\")) {\r\n                break;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * getNameByFirstAndLastName\r\n     *\r\n     * @param firstName\r\n     * @param lastName\r\n     * @return\r\n     */\r\n    public static String getNameByFirstAndLastName(String firstName, String lastName) {\r\n        StringBuilder stringBuilder = new StringBuilder();\r\n        stringBuilder.append(StringUtils.isBlank(firstName) ? \"\" : firstName);\r\n        stringBuilder.append(StringUtils.isBlank(lastName) ? \"\" : lastName);\r\n        return stringBuilder.toString();\r\n    }\r\n    \r\n    /**\r\n     * @param dateStr\r\n     * @return\r\n     */\r\n    public static String changeDateFormat(String dateStr) {\r\n        if (StringUtils.isBlank(dateStr) || dateStr.length() != 8) {\r\n            return \"\";\r\n        } else {\r\n            StringBuilder stringBuilder = new StringBuilder();\r\n            stringBuilder.append(dateStr.substring(0, 4)).append(\"-\").append(dateStr.substring(4, 6)).append(\"-\").append(\r\n                    dateStr.substring(6, 8));\r\n            return stringBuilder.toString();\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @param fileName\r\n     * @return\r\n     */\r\n    public static String getFileType(String fileName) {\r\n        if (!StringUtils.isBlank(fileName)) {\r\n            String[] token = fileName.split(\"\\\\.\");\r\n            if (token.length == 2) {\r\n                return token[1];\r\n            }\r\n        }\r\n        return fileName;\r\n    }\r\n    \r\n\r\n    \r\n    /**\r\n     * @param method\r\n     * @return\r\n     */\r\n    public static boolean isLegacyFacade(Method method) {\r\n        String className = method.getDeclaringClass().getName();\r\n        return className.startsWith(LEGACY_PACKAGE_PREFIX);\r\n    }\r\n\r\n\r\n\r\n    public static String addOrUpdateFieldToExtendInfo(String oldExtendInfo,Map<String,Object> newValue){\r\n        Map<String, Object> extendInfo = CommonUtil.parseObject(oldExtendInfo, new TypeReference<HashMap<String, Object>>() {});\r\n        if (extendInfo == null) {\r\n            extendInfo = new HashMap<String, Object>();\r\n        }\r\n        if (null!=newValue&&newValue.size()>0){\r\n            extendInfo.putAll(newValue);\r\n        }\r\n        return JSON.toJSONString(extendInfo);\r\n\r\n    }\r\n\r\n    public static Map<String, Object> addOrUpdateFieldToExtendMap(String oldExtendInfo,Map<String,Object> newValue){\r\n        Map<String, Object> extendInfo = CommonUtil.parseObject(oldExtendInfo, new TypeReference<HashMap<String, Object>>() {});\r\n        if (extendInfo == null) {\r\n            extendInfo = new HashMap<String, Object>();\r\n        }\r\n        if (null!=newValue&&newValue.size()>0){\r\n            extendInfo.putAll(newValue);\r\n        }\r\n        return extendInfo;\r\n\r\n    }\r\n\r\n\r\n\r\n    \r\n}\r\n","fileName":"CommonUtil.java","path":"D:\\Code\\TestCode\\newzhongchou\\everyday-tools\\src\\main\\java\\com\\lsc\\tools\\bean\\CommonUtil.java"},{"content":"package com.lsc.tools.bean;\r\n\r\nimport lombok.Data;\r\n\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: com.lsc.tools.bean 菜单集合\r\n * @date 2022/9/23 17:13\r\n */\r\n@Data\r\npublic class MenuBean {\r\n    private String name;\r\n\r\n    private List<UiBean> uiBeanList;\r\n\r\n\r\n\r\n\r\n}\r\n","fileName":"MenuBean.java","path":"D:\\Code\\TestCode\\newzhongchou\\everyday-tools\\src\\main\\java\\com\\lsc\\tools\\bean\\MenuBean.java"},{"content":"package com.lsc.tools.bean;\r\n\r\nimport com.lsc.tools.enums.BtnTypeEnum;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: com.lsc.tools.bean\r\n * @date 2022/9/23 16:18\r\n */\r\n@Data\r\n@NoArgsConstructor\r\npublic class UiBean {\r\n\r\n    /**\r\n     * 按钮名称\r\n     */\r\n    private String menuName;\r\n\r\n    /**\r\n     * 按钮类型\r\n     */\r\n    private BtnTypeEnum btnType;\r\n\r\n    /**\r\n     * 是否激活使用\r\n     */\r\n    private boolean isActivation;\r\n\r\n    /**\r\n     * 事件实现类\r\n     */\r\n    private  String listener;\r\n\r\n\r\n}\r\n","fileName":"UiBean.java","path":"D:\\Code\\TestCode\\newzhongchou\\everyday-tools\\src\\main\\java\\com\\lsc\\tools\\bean\\UiBean.java"},{"content":"package com.lsc.tools.constant;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: com.lsc.tools.constant 常量\r\n * @date 2022/9/5 15:45\r\n */\r\npublic class SystemConstant {\r\n    public static final Integer FRAME_WIDTH = 1200;\r\n    public static final Integer FRAME_HEIGHT = 900;\r\n}\r\n","fileName":"SystemConstant.java","path":"D:\\Code\\TestCode\\newzhongchou\\everyday-tools\\src\\main\\java\\com\\lsc\\tools\\constant\\SystemConstant.java"},{"content":"package com.lsc.tools.controoler;\r\n\r\nimport com.alibaba.fastjson.JSON;\r\nimport com.alibaba.fastjson.TypeReference;\r\nimport com.lsc.common.Constant;\r\nimport com.lsc.common.FileUtils;\r\nimport com.lsc.common.encryptionutils.Base64Util;\r\nimport com.lsc.common.encryptionutils.PBEUtil;\r\nimport com.lsc.common.ziputils.Bzip2Utils;\r\nimport com.lsc.tools.bean.ClassBean;\r\nimport org.aspectj.util.FileUtil;\r\nimport org.junit.Test;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\nimport java.io.File;\r\nimport java.net.URISyntaxException;\r\nimport java.net.URL;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Date;\r\nimport java.util.List;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: com.lsc.tools.controoler\r\n * @date 2022/7/25 15:56\r\n */\r\n\r\npublic class CompressionUIThree {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(CompressionUIThree.class);\r\n    private static final String PASS_WROD = \"cchlqLZ!2cchlqLZ\";\r\n    private static final String SALT = \"7Ywycfpl\";\r\n    /**\r\n     * 压缩文件路径\r\n     */\r\n    private static final String ZIP_PATH_ONE = \"D:\\\\Code\\\\TestCode\\\\newzhongchou\\\\everyday-tools\\\\src\\\\main\\\\resources\\\\cipher-zip\\\\\";\r\n    /**\r\n     * 临时密文暂存路径\r\n     */\r\n    private static final String TXT_PATH_ONE = \"D:\\\\Code\\\\TestCode\\\\newzhongchou\\\\everyday-tools\\\\src\\\\main\\\\resources\\\\cipher-txt\\\\\";\r\n    private static final String RESULT_TXT_PATH = \"D:\\\\Code\\\\TestCode\\\\newzhongchou\\\\everyday-tools\\\\src\\\\main\\\\resources\\\\result\\\\\";\r\n\r\n    private static final SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHHmmss\");\r\n\r\n    @Test\r\n    public void test() throws URISyntaxException {\r\n        List<String> list = Arrays.asList(\"D:\\\\Code\\\\TestCode\\\\newzhongchou\\\\everyday-tools\\\\src\\\\main\\\\java\\\\com\\\\lsc\\\\tools\\\\controoler\\\\CompressionUI.java\",\r\n                \"D:\\\\Code\\\\TestCode\\\\newzhongchou\\\\everyday-tools\\\\src\\\\main\\\\java\\\\com\\\\lsc\\\\tools\\\\controoler\\\\CompressionUITwo.java\"\r\n        );\r\n\r\n        String compressed = encryptedCompressed(list);\r\n        decryptionDecompression(TXT_PATH_ONE + compressed);\r\n    }\r\n\r\n    /**\r\n     * 加密压缩\r\n     * 1 多个文件,第一行是该文件路径和文件名 回车,然后是该文件内容, 以此类推\r\n     */\r\n    public static String encryptedCompressed(List<String> paths) {\r\n        byte[] encrypt = null;\r\n        byte[] compress = null;\r\n        String encode = null;\r\n        // 拼接各个文件的内容\r\n        StringBuffer buffer = new StringBuffer();\r\n        ArrayList<ClassBean> beanArrayList = new ArrayList<>();\r\n\r\n        for (String path : paths) {\r\n            ClassBean bean = new ClassBean();\r\n            File file = new File(path);\r\n            if (!file.exists()) {\r\n                log.info(\"文件或文件夹不存在:{}\", path);\r\n                return null;\r\n            }\r\n            String returnString = FileUtils.readFileAllBytesReturnString(file.getPath());\r\n            bean.setFileName(file.getName());\r\n            bean.setPath(file.getPath());\r\n            bean.setContent(returnString);\r\n            beanArrayList.add(bean);\r\n        }\r\n        //    FileUtils.fileWriteIsExistsAppenTherMkdir(TXT_PATH_ONE + sourceFile, encode);\r\n        //System.out.println(JSON.toJSONString(beanArrayList));\r\n        // 压缩\r\n        compress = Bzip2Utils.compress(JSON.toJSONString(beanArrayList).getBytes());\r\n        // 加密\r\n        encrypt = PBEUtil.encrypt(compress, PASS_WROD, SALT.getBytes());\r\n        // 转为base64\r\n        encode = Base64Util.encryptBASE64(encrypt);\r\n        String format = dateFormat.format(new Date());\r\n        // 输出密文\r\n        FileUtils.fileWriteAdbMkdir(TXT_PATH_ONE + format + Constant.TXT, encode);\r\n\r\n        log.info(\"CompressionUI:encryptedCompressed:end\");\r\n        return format + Constant.TXT;\r\n    }\r\n\r\n    /**\r\n     * 解密解压\r\n     */\r\n    public static void decryptionDecompression(String path) {\r\n        File file = new File(path);\r\n        // 读取指定路径下的文件\r\n        byte[] bytes = FileUtils.readFileAllBytesReturnBytes(file.getPath());\r\n        // base64解密\r\n        byte[] decode = Base64Util.decryBASE64(new String(bytes));\r\n        // 解密\r\n        byte[] decryptZip = PBEUtil.decrypt(decode, PASS_WROD, SALT.getBytes());\r\n        // 解压\r\n        byte[] uncompress = Bzip2Utils.uncompress(decryptZip);\r\n        // 明文\r\n        String content = new String(uncompress);\r\n\r\n        //  ArrayList<ClassBean> files = JSON.parseObject(content, new TypeReference<List<ClassBean>>());\r\n        List<ClassBean> classBeans = JSON.parseObject(content, new TypeReference<List<ClassBean>>() {\r\n        });\r\n        classBeans.forEach(bean -> {\r\n            FileUtils.fileWriteAdbMkdir(RESULT_TXT_PATH + bean.getFileName(), bean.getContent());\r\n        });\r\n        log.info(\"CompressionUI:decryptionDecompression:end\");\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n","fileName":"CompressionUIThree.java","path":"D:\\Code\\TestCode\\newzhongchou\\everyday-tools\\src\\main\\java\\com\\lsc\\tools\\controoler\\CompressionUIThree.java"},{"content":"package com.lsc.tools.demo;\r\n\r\nimport com.alibaba.fastjson.JSONObject;\r\nimport com.alibaba.fastjson.TypeReference;\r\nimport com.alibaba.fastjson.serializer.SerializerFeature;\r\nimport com.lsc.tools.bean.MenuBean;\r\nimport com.lsc.tools.bean.UiBean;\r\nimport com.lsc.tools.enums.BtnTypeEnum;\r\nimport com.lsc.tools.utils.JunitBusiUtil;\r\nimport org.junit.Test;\r\n\r\nimport java.io.IOException;\r\nimport java.lang.reflect.Field;\r\nimport java.lang.reflect.Method;\r\nimport java.lang.reflect.ParameterizedType;\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.regex.Pattern;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: com.lsc.tools.demo\r\n * @date 2022/9/23 16:56\r\n */\r\npublic class DemoOne {\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        // UiBean uiBean = new UiBean();\r\n        MenuBean menuBean = new MenuBean();\r\n        menuBean.setName(\"test1\");\r\n        UiBean uiBean = new UiBean();\r\n        uiBean.setActivation(true);\r\n        uiBean.setBtnType(BtnTypeEnum.J_BUTTON);\r\n        uiBean.setMenuName(\"test1\");\r\n        menuBean.setUiBeanList(Arrays.asList(uiBean));\r\n        // StringBuildUtils.classJsonString(uiBean,\"D:\\\\Code\\\\TestCode\\\\newzhongchou\\\\everyday-tools\\\\src\\\\main\\\\resources\\\\com.lsc.tools.btn.do\\\\\");\r\n\r\n        System.out.println(\"WriteMapNullValue = \" + JSONObject.toJSONString(menuBean, SerializerFeature.PrettyFormat, SerializerFeature.WriteMapNullValue));\r\n\r\n        MenuBean object = JunitBusiUtil.parseObject(\"/com/lsc/tools/btn/do/UiBean.json\", new TypeReference<MenuBean>() {\r\n        });\r\n\r\n        System.out.println(JSONObject.toJSONString(object));\r\n\r\n    }\r\n\r\n    @Test\r\n    public void test() throws IllegalAccessException, InstantiationException {\r\n\r\n        Class<MenuBean> menuBeanClass = MenuBean.class;\r\n        MenuBean newInstance = menuBeanClass.newInstance();\r\n        // 获取当前类所有属性\r\n        Field[] declaredFields = newInstance.getClass().getDeclaredFields();\r\n\r\n        for (Field field : declaredFields) {\r\n            Class<?> type = field.getType();\r\n            Type genericType = field.getGenericType();\r\n            if (genericType instanceof ParameterizedType) {\r\n                ParameterizedType parameterizedType = (ParameterizedType) genericType;\r\n                Type[] types = parameterizedType.getActualTypeArguments();\r\n                for (Type type1 : types) {\r\n                    if (!type1.getTypeName().contains(\"java.lang\")) {\r\n                        System.out.println(\"泛型有:\" + type1);\r\n                    }\r\n                }\r\n            }\r\n            System.out.println(\"字段类型:\" + type);\r\n        }\r\n\r\n    }\r\n\r\n    @Test\r\n    public void test02() throws Exception {\r\n        Class<MenuBean> menuBeanClass = MenuBean.class;\r\n        MenuBean newInstance = menuBeanClass.newInstance();\r\n\r\n        Class<? extends MenuBean> newInstanceClass = newInstance.getClass();\r\n\r\n        Method[] methods = newInstanceClass.getDeclaredMethods();\r\n        for (Method method : methods) {\r\n            if (method.getName().contains(\"set\")) {\r\n\r\n            }\r\n            method.invoke(newInstance, method.getDefaultValue());\r\n        }\r\n        // 获取当前类所有属性\r\n        Field[] fields = newInstanceClass.getFields();\r\n    }\r\n\r\n    @Test\r\n    public void test03() {\r\n        String paths = \"D:\\\\Code\\\\TestCode\\\\newzhongchou\\\\everyday-tools\\\\src\\\\main\\\\java\\\\com\\\\lsc\\\\tools\\\\listener\\\\BtnEncryListener.java\" +\r\n                \"D:\\\\Code\\\\TestCode\\\\newzhongchou\\\\everyday-tools\\\\src\\\\main\\\\java\\\\com\\\\lsc\\\\tools\\\\listener\\\\GsEncryView.java\" +\r\n                \"D:\\\\Code\\\\TestCode\\\\newzhongchou\\\\everyday-tools\\\\src\\\\main\\\\java\\\\com\\\\lsc\\\\tools\\\\listener\\\\GuiListener.java\";\r\n\r\n        String[] split = paths.split(\"\\r\\n\");\r\n        List<String> asList = Arrays.asList(split);\r\n        System.out.println(asList);\r\n        System.out.println(\"asList.size() = \" + asList.size());\r\n        System.out.println(\"System.lineSeparator() = \" + System.lineSeparator());\r\n    }\r\n\r\n    @Test\r\n    public void test04() throws IOException {\r\n        String url = \"D:\\\\Code\\\\TestCode\\\\newzhongchou\\\\everyday-tools\\\\src\\\\main\\\\resources\\\\demo.txt\";\r\n        List<String> list = com.lsc.common.FileUtils.readFileAllLinesReturnList(url);\r\n\r\n        String split1 = \"========\";\r\n        String split2 = \"----\";\r\n      /*  ArrayList<HashMap<Integer, String>> strings = new ArrayList<>();\r\n        HashMap<Integer, String> map = null;\r\n        int j = 1;\r\n        for (int i = 0; i < list.size(); i++) {\r\n\r\n            if (list.get(i).contains(split1)) {\r\n                if (null == map) {\r\n                    map = new HashMap<>();\r\n                    continue;\r\n                }\r\n                strings.add(map);\r\n                map = new HashMap<>();\r\n                j = 1;\r\n                continue;\r\n            }\r\n            if (list.get(i).contains(split2)) continue;\r\n            map.put(j, list.get(i));\r\n            j++;\r\n        }\r\n        System.out.println(\"JSONObject.toJSONString(listMap) = \" + JSONObject.toJSONString(strings));*/\r\n\r\n\r\n    /*    ArrayList<HashMap<String, String>> arrayList = new ArrayList<>();\r\n        StringBuffer stringBuffer = new StringBuffer();\r\n        String keyStr = null;\r\n        for (int i = 0; i < list.size(); i++) {\r\n            if (list.get(i).contains(split1) || list.get(i).contains(split2)) {\r\n                continue;\r\n            }\r\n            if (split2.contains(list.get(i + 1)) && split2.contains(list.get(i - 1))) {\r\n                keyStr = list.get(i);\r\n                continue;\r\n            }\r\n            stringBuffer.append(list.get(i));\r\n            if (split2.contains(list.get(i + 1))) {\r\n                HashMap<String, String> jsonMap = new HashMap<>();\r\n\r\n                jsonMap.put(keyStr, stringBuffer.toString());\r\n                arrayList.add(jsonMap);\r\n                keyStr=null;\r\n            }\r\n\r\n        }\r\n       // System.out.println(\"JSONObject.toJSONString(arrayList) = \" + JSONObject.toJSONString(arrayList, SerializerFeature.PrettyFormat));\r\n        System.out.println(\"JSONObject.toJSONString(arrayList) = \" + JSONObject.toJSONString(arrayList));*/\r\n\r\n\r\n        ArrayList<HashMap<String, String>> arrayList = new ArrayList<>();\r\n        StringBuffer stringBuffer = new StringBuffer();\r\n        HashMap<String, String> jsonMap = null;\r\n        String keyStr = null;\r\n        for (int i = 0; i < list.size(); i++) {\r\n            if (list.get(i).contains(split1) || list.get(i).equals(split2)) {\r\n                continue;\r\n            }\r\n\r\n            if (split2.contains(list.get(i + 1)) && split2.equals(list.get(i - 1))) {\r\n                jsonMap = new HashMap<>();\r\n                jsonMap.put(String.valueOf(jsonMap.size()),list.get(i));\r\n                continue;\r\n            }\r\n            stringBuffer.append(list.get(i));\r\n            if (split2.equals(list.get(i + 1))) {\r\n                jsonMap.put(String.valueOf(jsonMap.size()), stringBuffer.toString());\r\n                arrayList.add(jsonMap);\r\n\r\n            }\r\n\r\n        }\r\n        // System.out.println(\"JSONObject.toJSONString(arrayList) = \" + JSONObject.toJSONString(arrayList, SerializerFeature.PrettyFormat));\r\n        System.out.println(\"JSONObject.toJSONString(arrayList) = \" + JSONObject.toJSONString(arrayList));\r\n    }\r\n\r\n    // https://www.cnblogs.com/byerichas/p/15629371.html  Java--ClassLoader 类加载机制与重写类加\r\n\r\n\r\n    /**\r\n     * 正则判断\r\n     *\r\n     * @param name    内容\r\n     * @param pattern 正则表达式\r\n     * @return\r\n     */\r\n    public boolean panduanZZBDS(String name, String pattern) {\r\n        return Pattern.compile(pattern).matcher(name).matches();\r\n    }\r\n}\r\n","fileName":"DemoOne.java","path":"D:\\Code\\TestCode\\newzhongchou\\everyday-tools\\src\\main\\java\\com\\lsc\\tools\\demo\\DemoOne.java"},{"content":"package com.lsc.tools.demo;\r\n\r\nimport com.lsc.common.FileUtils;\r\nimport com.lsc.tools.controoler.CompressionUIThree;\r\nimport org.junit.Test;\r\n\r\nimport java.io.File;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: com.lsc.freemarker.demo\r\n * @date 2022/10/28 19:05\r\n */\r\npublic class TestDemo {\r\n\r\n    @Test\r\n    public void test(){\r\n        List<File> files = FileUtils.searchAllFile(new File(\"D:\\\\Code\\\\TestCode\\\\newzhongchou\\\\everyday-tools\\\\src\\\\main\\\\java\\\\com\\\\lsc\\\\tools\\\\\"));\r\n        List<String> collect = files.stream().map(fi -> fi.getAbsolutePath()).collect(Collectors.toList());\r\n         CompressionUIThree.encryptedCompressed(collect);\r\n    }\r\n}\r\n","fileName":"TestDemo.java","path":"D:\\Code\\TestCode\\newzhongchou\\everyday-tools\\src\\main\\java\\com\\lsc\\tools\\demo\\TestDemo.java"},{"content":"package com.lsc.tools.enums;\r\n\r\nimport lombok.Getter;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: com.lsc.tools swing各类按钮枚举\r\n * @date 2022/9/23 16:20\r\n */\r\n@Getter\r\npublic enum BtnTypeEnum {\r\n    J_BUTTON(\"JButton\",\"按钮\",\"javax.swing.JButton\"),\r\n    J_MENUBAR(\"JMenuBar\",\"菜单栏\",\"javax.swing.JMenuBar\"),\r\n    J_MENU(\"JMenu\",\"一级菜单栏\",\"javax.swing.JMenu\"),\r\n    J_MENU_ITEM(\"JMenuItem\",\"子菜单栏\",\"javax.swing.JMenuItem\"),\r\n    ;\r\n    /**\r\n     * 按钮类型\r\n     */\r\n    private String BtnType;\r\n    /**\r\n     * 按钮描述\r\n     */\r\n    private String desc;\r\n\r\n    private String classPath;\r\n\r\n    BtnTypeEnum(String btnType, String desc, String classPath) {\r\n        BtnType = btnType;\r\n        this.desc = desc;\r\n        this.classPath = classPath;\r\n    }\r\n\r\n\r\n}\r\n","fileName":"BtnTypeEnum.java","path":"D:\\Code\\TestCode\\newzhongchou\\everyday-tools\\src\\main\\java\\com\\lsc\\tools\\enums\\BtnTypeEnum.java"},{"content":"package com.lsc.tools.enums;\r\n\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Getter;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: 各个跳转按钮或标签\r\n *      JUMP 结尾的为跳转按钮\r\n *      BUILD 结尾的为业务逻辑生成按钮\r\n * @date 2022/10/24 19:11\r\n */\r\n@Getter\r\n@AllArgsConstructor\r\npublic enum JumpBtnType {\r\n\r\n    // 一级菜单栏\r\n    ENORDE_CRYPTION_JMENU_JUMP(\"JMenu\",\"加解密\",\"一级菜单栏\",\"标签栏\"),\r\n    CODE_GENERATOR_JMENU_JUMP(\"JMenu\",\"代码生成\",\"一级菜单栏\",\"标签栏\"),\r\n    CODE_TOOL_JMENU_JUMP(\"JMenu\",\"代码工具\",\"一级菜单栏\",\"标签栏\"),\r\n\r\n\r\n    // 二级菜单栏\r\n    ENCRYPTION_JMENU_JUMP(\"JMenuItem\",\"GS加密\",\"ENORDE_CRYPTION_JMENU_JUMP\",\"二级菜单栏\"),\r\n\r\n    TOOL_LIST_JMENU_JUMP(\"JMenuItem\",\"工具集合\",\"CODE_TOOL_JMENU_JUMP\",\"二级菜单栏\"),\r\n\r\n    MOCK_CODE_GENERATOR_JMENU_JUMP(\"JMenuItem\",\"MOCK代码生成\",\"CODE_GENERATOR_JMENU_JUMP\",\"二级菜单栏\"),\r\n    CRUD_CODE_GENERATOR_JMENU_JUMP(\"JMenuItem\",\"CRUD代码生成\",\"CODE_GENERATOR_JMENU_JUMP\",\"二级菜单栏\"),\r\n\r\n\r\n    // 切换按钮\r\n    OBJECT_TO_JSON_JBUTTON_JUMP(\"JButton\",\"对象转JSON\",\"TOOL_LIST_JMENU_JUMP\",\"执行按钮-CRUD代码生成按钮\"),\r\n\r\n\r\n    // 执行按钮\r\n    ENCRYPTION_JBUTTON_BUILD(\"JButton\",\"加密\",\"ENCRYPTION_JMENU_JUMP\",\"执行按钮\"),\r\n    DECRYPTION_JBUTTON_BUILD(\"JButton\",\"解密\",\"ENCRYPTION_JMENU_JUMP\",\"执行按钮\"),\r\n\r\n    MOCK_GENERATOR_JBUTTON_BUILD(\"JButton\",\"生成\",\"MOCK_CODE_GENERATOR_JMENU_JUMP\",\"执行按钮-MOCK代码生成按钮\"),\r\n    CRUD_GENERATOR_JBUTTON_BUILD(\"JButton\",\"生成\",\"CRUD_CODE_GENERATOR_JMENU_JUMP\",\"执行按钮-CRUD代码生成按钮\"),\r\n\r\n    OBJECT_TO_JSON__JBUTTON_BUILD(\"JButton\",\"生成\",\"TOOL_LIST_JMENU_JUMP\",\"执行按钮-CRUD代码生成按钮\"),\r\n    ;\r\n    /**\r\n     * 按钮类型\r\n     */\r\n    private String btnType;\r\n    /**\r\n     * 按钮名称\r\n     */\r\n    private String btnName;\r\n    /**\r\n     * 上级按钮名称\r\n     */\r\n    private String parentTtnName;\r\n    /**\r\n     * 按钮描述\r\n     */\r\n    private String desc;\r\n\r\n\r\n\r\n\r\n}\r\n","fileName":"JumpBtnType.java","path":"D:\\Code\\TestCode\\newzhongchou\\everyday-tools\\src\\main\\java\\com\\lsc\\tools\\enums\\JumpBtnType.java"},{"content":"package com.lsc.tools.gui;\r\n\r\nimport com.lsc.tools.annotation.ActionListenerInstaller;\r\nimport com.lsc.tools.constant.SystemConstant;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: gui总入口\r\n *  JFrame 各标签文档: https://blog.csdn.net/feng8403000/article/details/125215102\r\n *  各事件文档: https://blog.csdn.net/qq_45879084/article/details/106377757?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-1-106377757-blog-114345234.t5_layer_eslanding_D_4&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-1-106377757-blog-114345234.t5_layer_eslanding_D_4&utm_relevant_index=2\r\n *  https://blog.csdn.net/qq_41474121/article/details/122736955\r\n *\r\n *  https://www.xinbaoku.com/archive/5Mc2FxcP.html\r\n * @date 2022/8/26 16:50\r\n */\r\npublic class GUIInit {\r\n\r\n    // 创建窗口对象\r\n    public static final JFrame mainWin = new JFrame(\"工具箱\");\r\n\r\n    public static void main(String[] args) {\r\n\r\n        GUIInit guiInit = new GUIInit();\r\n        guiInit.init();\r\n\r\n        mainWin.add(MainPanel.getInstance().info());\r\n        // 设置窗口可见\r\n        mainWin.setVisible(true);\r\n\r\n    }\r\n\r\n    public void init() {\r\n        JFrame.setDefaultLookAndFeelDecorated(true);\r\n        mainWin.setSize(SystemConstant.FRAME_WIDTH, SystemConstant.FRAME_HEIGHT); // 大小\r\n\r\n        mainWin.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // 3代表EXIT_ON_CLOSE(在 JFrame 中定义)：使用 System exit 方法退出应用程序。仅在应用程序中使用。\r\n        // 窗口设置到屏幕居中\r\n        mainWin.setLocationRelativeTo(null);\r\n        //窗体大小默认不可变\r\n        // jFrame.setResizable(false);\r\n\r\n        //为内容面板设置布局管理器\r\n        mainWin.setLayout(null);\r\n\r\n    }\r\n\r\n    /**\r\n     * 用于切换Jpanel 面板\r\n     * @param jPanel\r\n     */\r\n    public static void setContent(Container jPanel){\r\n        mainWin.setContentPane(jPanel);\r\n        mainWin.setVisible(true);\r\n\r\n    }\r\n\r\n    public static Container getContainer(){\r\n        return mainWin.getContentPane();\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n","fileName":"GUIInit.java","path":"D:\\Code\\TestCode\\newzhongchou\\everyday-tools\\src\\main\\java\\com\\lsc\\tools\\gui\\GUIInit.java"},{"content":"package com.lsc.tools.gui;\r\n\r\nimport com.lsc.tools.annotation.ActionListenerFor;\r\nimport com.lsc.tools.annotation.ActionListenerInstaller;\r\nimport com.lsc.tools.enums.JumpBtnType;\r\nimport com.lsc.tools.listener.CodeGeneratorListener;\r\nimport com.lsc.tools.listener.CodeToolListener;\r\nimport com.lsc.tools.listener.GsEncryView;\r\nimport com.lsc.tools.listener.MockGeneratorListener;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport javax.swing.*;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: 主面板\r\n * @date 2022/9/5 15:34\r\n */\r\n@Component\r\npublic class MainPanel extends JPanel {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(MainPanel.class);\r\n\r\n    // 菜单栏\r\n    private  JMenuBar jMenuBer = new JMenuBar();\r\n\r\n    // 一级菜单栏\r\n    private  JMenu menu = new JMenu(JumpBtnType.ENORDE_CRYPTION_JMENU_JUMP.getBtnName());\r\n    // 一级菜单栏\r\n    private  JMenu mockMenu = new JMenu(JumpBtnType.CODE_GENERATOR_JMENU_JUMP.getBtnName());\r\n    // 一级菜单栏\r\n    private  JMenu codeToolMenu = new JMenu(JumpBtnType.CODE_TOOL_JMENU_JUMP.getBtnName());\r\n\r\n    /**\r\n     * 加解密子菜单栏\r\n     */\r\n    @ActionListenerFor(listener = GsEncryView.class)\r\n    private  JMenuItem itemEncry = new JMenuItem(JumpBtnType.ENCRYPTION_JMENU_JUMP.getBtnName());\r\n\r\n    /**\r\n     * mock代码生成菜单栏\r\n     */\r\n    @ActionListenerFor(listener = MockGeneratorListener.class)\r\n    private  JMenuItem itemMockGenerator = new JMenuItem(JumpBtnType.MOCK_CODE_GENERATOR_JMENU_JUMP.getBtnName());\r\n\r\n    /**\r\n     * 业务代码子菜单栏\r\n     */\r\n    @ActionListenerFor(listener = CodeGeneratorListener.class)\r\n    private  JMenuItem crudGenerator = new JMenuItem(JumpBtnType.CRUD_CODE_GENERATOR_JMENU_JUMP.getBtnName());\r\n\r\n    @ActionListenerFor(listener = CodeToolListener.class)\r\n    private  JMenuItem toolJmenuItem = new JMenuItem(JumpBtnType.TOOL_LIST_JMENU_JUMP.getBtnName());\r\n\r\n    /**\r\n     * 主面板\r\n     * 存放所有按钮\r\n     */\r\n    public MainPanel info() {\r\n        log.info(\"{}:MainPanel() 开始执行\", this.getClass().getSimpleName());\r\n\r\n        // 把子菜单添加到菜单栏\r\n        menu.add(itemEncry);\r\n\r\n        // 子菜单添加到一级菜单\r\n        mockMenu.add(itemMockGenerator);\r\n        mockMenu.add(crudGenerator);\r\n\r\n        codeToolMenu.add(toolJmenuItem);\r\n\r\n\r\n        // 把一级菜单栏添加到标签栏\r\n        jMenuBer.add(menu);\r\n        jMenuBer.add(mockMenu);\r\n        jMenuBer.add(codeToolMenu);\r\n\r\n\r\n        jMenuBer.setVisible(true);\r\n        GUIInit.mainWin.setJMenuBar(jMenuBer);\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /**\r\n     * 内部类单例\r\n     */\r\n    private MainPanel() {\r\n    }\r\n\r\n    public static MainPanel mainPanel;\r\n\r\n    public static MainPanel getInstance() {\r\n        return MainPanelHander.mainPanel;\r\n    }\r\n\r\n    private static class MainPanelHander {\r\n        private static final MainPanel mainPanel = new MainPanel();\r\n    }\r\n\r\n    /**\r\n     * 代码块加载优先级比构造函数高\r\n     */ {\r\n        // 处理注解的方法\r\n        ActionListenerInstaller.processAnnotations(this);\r\n    }\r\n}\r\n","fileName":"MainPanel.java","path":"D:\\Code\\TestCode\\newzhongchou\\everyday-tools\\src\\main\\java\\com\\lsc\\tools\\gui\\MainPanel.java"},{"content":"package com.lsc.tools.listener;\r\n\r\nimport com.lsc.tools.gui.MainPanel;\r\nimport com.lsc.tools.service.CompressionService;\r\nimport com.lsc.tools.service.impl.CompressionServiceImpl;\r\nimport lombok.NoArgsConstructor;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: com.lsc.tools.listener  加密页面, 执行按钮事件\r\n * @date 2022/9/27 11:19\r\n */\r\n@NoArgsConstructor\r\npublic class BtnEncryListener implements ActionListener {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(MainPanel.class);\r\n\r\n    //@Autowired\r\n    private CompressionService compressionService = new CompressionServiceImpl();\r\n\r\n    private GsEncryView gsEncryView;\r\n\r\n    // ApplicationContext ctx=new ClassPathXmlApplicationContext(\"spring-config/applicationContext.xml\");\r\n    // CompressionService ctxBean = (CompressionService) ctx.getBean(\"compressionService\");\r\n    @Override\r\n    public void actionPerformed(ActionEvent e) {\r\n\r\n        log.info(\"BtnEncryListener.actionPerformed start\");\r\n        JButton jButton = (JButton) e.getSource();\r\n        try {\r\n            JTextArea jta = gsEncryView.getJta();\r\n            JTextField txtfield = gsEncryView.getTxtfield();\r\n\r\n            if (null == jta) {\r\n                log.info(\"文件路径为null\");\r\n                return;\r\n            }\r\n            // 文件路径\r\n            String pathsTxt = jta.getText();\r\n            // 输出路径\r\n            String outPathStr = txtfield.getText();\r\n            List<String> pathList = Arrays.asList(pathsTxt.split(\"\\n\"));\r\n            String name = jButton.getText();\r\n            switch (name) {\r\n                case \"加密\":\r\n                    compressionService.encryptedCompressed(pathList, outPathStr);\r\n                    break;\r\n                case \"解密\":\r\n                    compressionService.decryptionDecompression(pathList.get(0), outPathStr);\r\n                    break;\r\n                default:\r\n                    log.info(\"当前按钮没有相应处理逻辑\");\r\n                    JOptionPane.showMessageDialog(null,\"当前按钮没有相应处理逻辑！\",\"错误 \",0);\r\n            }\r\n        } catch (Exception exception) {\r\n            log.error(\"BtnEncryListener:actionPerformed:Exception btnName:{}, e:{}\", jButton.getText(), exception);\r\n            JOptionPane.showMessageDialog(null,exception.getMessage(),\"错误 \",0);\r\n        }\r\n        log.info(\"BtnEncryListener.actionPerformed end\");\r\n    }\r\n\r\n    public BtnEncryListener(GsEncryView encryListener) {\r\n        this.gsEncryView = encryListener;\r\n    }\r\n\r\n\r\n}\r\n","fileName":"BtnEncryListener.java","path":"D:\\Code\\TestCode\\newzhongchou\\everyday-tools\\src\\main\\java\\com\\lsc\\tools\\listener\\BtnEncryListener.java"},{"content":"package com.lsc.tools.listener;\r\n\r\nimport com.lsc.freemarker.enums.ResultCodeEnum;\r\nimport com.lsc.freemarker.core.Generator;\r\nimport com.lsc.tools.enums.JumpBtnType;\r\nimport com.lsc.tools.gui.GUIInit;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\n\r\n\r\n/**\r\n * @author lisc\r\n * @Description: com.lsc.tools crud代码生成\r\n * @date 2022/8/29 11:13\r\n */\r\n@Component\r\npublic class CodeGeneratorListener implements ActionListener {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(CodeGeneratorListener.class);\r\n\r\n    private JLabel rootPathJLabel = new JLabel(\"项目路径:\");\r\n   // private JTextField rootPathField = new JTextField(50);\r\n    private  JComboBox rootPathField=new JComboBox();\r\n\r\n    private JLabel packagePathJLabel = new JLabel(\"包路径:\");\r\n    private JTextField packagePathField = new JTextField(50);\r\n\r\n    private JLabel classNameLabel = new JLabel(\"类名:\");\r\n    private JTextField classNameField = new JTextField(50);\r\n\r\n    private JLabel tableNameLabel = new JLabel(\"表名:\");\r\n    private JTextField tableNameField = new JTextField(50);\r\n\r\n    private final JButton jButtonGenerator = new JButton(JumpBtnType.CRUD_GENERATOR_JBUTTON_BUILD.getBtnName());\r\n\r\n    @Override\r\n    public void actionPerformed(ActionEvent e) {\r\n\r\n        JPanel jPanel = null;\r\n        log.info(\"点击{}按钮\", e.getActionCommand());\r\n        // 设置布局\r\n        jPanel = crudCodePanel();\r\n\r\n        jButtonGenerator.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                log.info(\"点击{}按钮\", e.getActionCommand());\r\n                // 生成业务代码\r\n                String generateCrudCode = Generator.generateCrudCode(rootPathField.getSelectedItem().toString(), packagePathField.getText(), classNameField.getText(), tableNameField.getText());\r\n                JOptionPane.showMessageDialog(null, ResultCodeEnum.getByCode(generateCrudCode).getDesc(),\"提示 \",JOptionPane.PLAIN_MESSAGE);\r\n            }\r\n        });\r\n\r\n        GUIInit.setContent(jPanel);\r\n\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * crud 代码的面板\r\n     *\r\n     * @return\r\n     */\r\n    public JPanel crudCodePanel() {\r\n        SpringLayout springLayout = new SpringLayout();\r\n        JPanel jPanel = new JPanel(springLayout);\r\n        Font font = new Font(\"宋体\", Font.BOLD, 15);\r\n        // 设置字体大小\r\n        //rootPathField.setFont(font);\r\n        packagePathField.setFont(font);\r\n        classNameField.setFont(font);\r\n        tableNameField.setFont(font);\r\n\r\n        //向下拉列表中添加一项\r\n        rootPathField.addItem(\"--请选择--\");\r\n        rootPathField.addItem(\"com.ipay.ibizecoprod\");\r\n        rootPathField.addItem(\"com.ipay.iexpbizprod\");\r\n\r\n        Spring childWidth = Spring.sum(Spring.sum(Spring.width(rootPathJLabel), Spring.width(rootPathField)), Spring.constant(20));\r\n        int offSetX = childWidth.getValue() / 2;\r\n        /**\r\n         * NORTH 上\r\n         * WEST 左\r\n         * HORIZONTAL_CENTER 中\r\n         * EAST 右\r\n         * SOUTH 下\r\n         * HORIZONTAL_CENTER 水平居中\r\n         * VERTICAL_CENTER 垂直居中\r\n         *  A对象的哪个边  ,A对象  ,间距多少 , B对象的哪个边    , B对象\r\n         */\r\n        springLayout.putConstraint(SpringLayout.EAST, rootPathJLabel, 280, SpringLayout.WEST, jPanel);\r\n        springLayout.putConstraint(SpringLayout.NORTH, rootPathJLabel, 220, SpringLayout.NORTH, jPanel);\r\n\r\n        springLayout.putConstraint(SpringLayout.WEST, rootPathField, 30, SpringLayout.EAST, rootPathJLabel);\r\n        springLayout.putConstraint(SpringLayout.NORTH, rootPathField, 0, SpringLayout.NORTH, rootPathJLabel);\r\n\r\n        springLayout.putConstraint(SpringLayout.EAST, packagePathJLabel, 0, SpringLayout.EAST, rootPathJLabel);\r\n        springLayout.putConstraint(SpringLayout.NORTH, packagePathJLabel, 30, SpringLayout.SOUTH, rootPathJLabel);\r\n\r\n        springLayout.putConstraint(SpringLayout.NORTH, packagePathField, 0, SpringLayout.NORTH, packagePathJLabel);\r\n        springLayout.putConstraint(SpringLayout.WEST, packagePathField, 30, SpringLayout.EAST, packagePathJLabel);\r\n\r\n        springLayout.putConstraint(SpringLayout.NORTH, classNameLabel, 30, SpringLayout.SOUTH, packagePathJLabel);\r\n        springLayout.putConstraint(SpringLayout.EAST, classNameLabel, 0, SpringLayout.EAST, packagePathJLabel);\r\n\r\n        springLayout.putConstraint(SpringLayout.NORTH, classNameField, 0, SpringLayout.NORTH, classNameLabel);\r\n        springLayout.putConstraint(SpringLayout.WEST, classNameField, 30, SpringLayout.EAST, classNameLabel);\r\n\r\n        springLayout.putConstraint(SpringLayout.NORTH, tableNameLabel, 30, SpringLayout.SOUTH, classNameLabel);\r\n        springLayout.putConstraint(SpringLayout.EAST, tableNameLabel, 0, SpringLayout.EAST, classNameLabel);\r\n\r\n        springLayout.putConstraint(SpringLayout.NORTH, tableNameField, 0, SpringLayout.NORTH, tableNameLabel);\r\n        springLayout.putConstraint(SpringLayout.WEST, tableNameField, 0, SpringLayout.WEST, classNameField);\r\n\r\n        springLayout.putConstraint(SpringLayout.NORTH, jButtonGenerator, 80, SpringLayout.NORTH, tableNameField);\r\n        springLayout.putConstraint(SpringLayout.HORIZONTAL_CENTER, jButtonGenerator, 0, SpringLayout.HORIZONTAL_CENTER, tableNameField);\r\n\r\n        jPanel.add(rootPathJLabel);\r\n        jPanel.add(rootPathField);\r\n        jPanel.add(packagePathJLabel);\r\n        jPanel.add(packagePathField);\r\n        jPanel.add(classNameLabel);\r\n        jPanel.add(classNameField);\r\n        jPanel.add(tableNameLabel);\r\n        jPanel.add(tableNameField);\r\n        jPanel.add(jButtonGenerator);\r\n\r\n        return jPanel;\r\n    }\r\n\r\n\r\n}\r\n","fileName":"CodeGeneratorListener.java","path":"D:\\Code\\TestCode\\newzhongchou\\everyday-tools\\src\\main\\java\\com\\lsc\\tools\\listener\\CodeGeneratorListener.java"},{"content":"package com.lsc.tools.listener;\r\n\r\nimport com.lsc.freemarker.core.CustomClassLoader;\r\nimport com.lsc.freemarker.utils.ReflectionUtil;\r\nimport com.lsc.tools.enums.JumpBtnType;\r\nimport com.lsc.tools.gui.GUIInit;\r\nimport lombok.SneakyThrows;\r\nimport lombok.extern.slf4j.Slf4j;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: com.lsc.tools.listener\r\n * @date 2022/11/3 14:21\r\n */\r\n@Slf4j\r\npublic class CodeToolListener implements ActionListener {\r\n\r\n    private JPanel mainJpanel = new JPanel();\r\n\r\n    /**\r\n     * 顶部面板\r\n     */\r\n    private JPanel topJpanel = new JPanel(new FlowLayout(FlowLayout.LEFT));\r\n    /**\r\n     * 中间面板\r\n     */\r\n    private JPanel middleJpanel = new JPanel(new FlowLayout(FlowLayout.CENTER));\r\n\r\n\r\n    /**\r\n     * 顶部面板 - 按钮\r\n     */\r\n    private JButton objectToJsonBtn = new JButton(JumpBtnType.OBJECT_TO_JSON_JBUTTON_JUMP.getBtnName());\r\n\r\n    /**\r\n     * 顶部面板 - 按钮\r\n     */\r\n    private JButton codeGeneratorBtn = new JButton(\"业务代码生成\");\r\n\r\n    // 生成按钮\r\n    JButton generateBtn = new JButton(JumpBtnType.OBJECT_TO_JSON__JBUTTON_BUILD.getBtnName());\r\n\r\n\r\n    @Override\r\n    public void actionPerformed(ActionEvent e) {\r\n\r\n\r\n        mainJpanel.setLayout(new BorderLayout());\r\n        // 顶部面板添加按钮 , 并且把顶部面板添加到主面板上\r\n        mainJpanel.add(topJpanelAdd(), BorderLayout.NORTH);\r\n        // 中间面板添加输入框\r\n        //  mainJpanel.add(middleJpanelBuild(), BorderLayout.CENTER);\r\n\r\n\r\n        log.info(\"切换主面板\");\r\n        GUIInit.setContent(this.mainJpanel);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * 顶部jpanel 添加按钮方法\r\n     *\r\n     * @return\r\n     */\r\n    public JPanel topJpanelAdd() {\r\n        topJpanel.add(objectToJsonBtn);\r\n        topJpanel.add(codeGeneratorBtn);\r\n        // 单击事件\r\n        actionListener();\r\n        return this.topJpanel;\r\n    }\r\n\r\n    /**\r\n     * 按钮的单击事件\r\n     */\r\n    public void actionListener() {\r\n        // 中间面板添加输入框\r\n        objectToJsonBtn.addActionListener(a -> {\r\n            log.info(\"{} :单击事件开始\", a.getActionCommand());\r\n            mainJpanel.add(objectToJsonBtnJpanelBuild(), BorderLayout.CENTER);\r\n            GUIInit.setContent(this.mainJpanel);\r\n        });\r\n\r\n        codeGeneratorBtn.addActionListener(a -> {\r\n            log.info(\"{} :单击事件开始\", a.getActionCommand());\r\n\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * 对象转JSON 的 中间面板\r\n     * @return\r\n     */\r\n    public JPanel objectToJsonBtnJpanelBuild() {\r\n        log.info(\"完善中间面板\");\r\n\r\n        JLabel classPathJLabel = new JLabel(\"类路径:\");\r\n        JTextField classPathTextField = new JTextField(50);\r\n\r\n        // 结果文本框\r\n        JTextArea resultTextArea = new JTextArea(50,100);\r\n        // 生成按钮\r\n        JButton generateBtn = new JButton(\"生成\");\r\n        generateBtn.addActionListener(new ActionListener() {\r\n            @SneakyThrows\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                // 创建自定义的类加载器\r\n                CustomClassLoader loader = new CustomClassLoader();\r\n\r\n                // 使用自定义的类加载器加载TestHelloWorld类\r\n                Class classaa = loader.loadClass(classPathTextField.getText());\r\n                String creationJsonTxt = ReflectionUtil.CreationJsonTxt(classaa);\r\n                resultTextArea.setText(creationJsonTxt);\r\n            }\r\n        });\r\n\r\n        // 设置背景颜色\r\n        middleJpanel.setBackground(Color.lightGray);\r\n\r\n        middleJpanel.add(classPathJLabel);\r\n        middleJpanel.add(classPathTextField);\r\n        middleJpanel.add(generateBtn);\r\n        middleJpanel.add(resultTextArea);\r\n\r\n        return middleJpanel;\r\n\r\n    }\r\n}\r\n","fileName":"CodeToolListener.java","path":"D:\\Code\\TestCode\\newzhongchou\\everyday-tools\\src\\main\\java\\com\\lsc\\tools\\listener\\CodeToolListener.java"},{"content":"package com.lsc.tools.listener;\r\n\r\nimport com.lsc.tools.enums.JumpBtnType;\r\nimport com.lsc.tools.gui.GUIInit;\r\nimport lombok.Getter;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: com.lsc.tools.listener 公司加密listener\r\n * @date 2022/9/26 14:45\r\n */\r\n@Getter\r\npublic class GsEncryView implements ActionListener {\r\n\r\n\r\n    private final JButton jButtonEncry = new JButton(JumpBtnType.ENCRYPTION_JBUTTON_BUILD.getBtnName());\r\n\r\n    private final JButton jButtonDncry = new JButton(JumpBtnType.DECRYPTION_JBUTTON_BUILD.getBtnName());\r\n\r\n\r\n    // 加密路径\r\n    private final JLabel encryPath = new JLabel(\"加解密文件路径:\");\r\n    private final JTextArea jta = new JTextArea(7, 100);\r\n    // 加密后文件输出路径\r\n    private final JLabel outPath = new JLabel(\"文件输出路径(文件夹要以' \\\\ '结尾):\");\r\n    private final JTextField txtfield = new JTextField();\r\n\r\n    @Override\r\n    public void actionPerformed(ActionEvent e) {\r\n        BtnEncryListener btnEncryListener = new BtnEncryListener(this);\r\n\r\n        jta.setLineWrap(true);    //设置文本域中的文本为自动换行\r\n        jta.setForeground(Color.BLACK);    //设置组件的背景色\r\n        jta.setFont(new Font(\"楷体\", Font.BOLD, 12));    //修改字体样式\r\n\r\n        txtfield.setFont(new Font(\"楷体\", Font.BOLD, 12));\r\n        txtfield.setPreferredSize(new Dimension(800, 30));\r\n\r\n        // 绑定单击事件\r\n        jButtonEncry.addActionListener(btnEncryListener);\r\n        jButtonDncry.addActionListener(btnEncryListener);\r\n\r\n        SpringLayout springLayout = new SpringLayout();\r\n        JPanel jPanel = new JPanel(springLayout);\r\n\r\n        // 弹簧布局\r\n        springLayoutCenter(encryPath, jta, outPath, txtfield, jButtonEncry,jButtonDncry, springLayout, jPanel);\r\n\r\n\r\n        jPanel.add(encryPath);\r\n        jPanel.add(jta);\r\n        jPanel.add(outPath);\r\n        jPanel.add(txtfield);\r\n        jPanel.add(jButtonEncry);\r\n        jPanel.add(jButtonDncry);\r\n\r\n        GUIInit.setContent(jPanel);\r\n    }\r\n\r\n    // 弹簧布局\r\n    public void springLayoutCenter(JLabel encryPath, JTextArea jta, JLabel outPath, JTextField txtfield, JButton jButtonEncry,JButton jButtonDncry, SpringLayout springLayout, JPanel jPanel) {\r\n        /**\r\n         * NORTH 上\r\n         * WEST 左\r\n         * HORIZONTAL_CENTER 中\r\n         * EAST 右\r\n         * SOUTH 下\r\n         * Horizontal Center 水平居中\r\n         * Vertical Center 垂直居中\r\n         */\r\n        Spring childWidth = Spring.sum(Spring.sum(Spring.width(encryPath), Spring.width(jta)), Spring.constant(20));\r\n        int offSetX = childWidth.getValue() / 2;\r\n\r\n        /**\r\n         * A对象的哪个边  ,A对象  ,间距多少 , B对象的哪个边    , B对象\r\n         */\r\n        springLayout.putConstraint(SpringLayout.WEST, encryPath, -offSetX, SpringLayout.HORIZONTAL_CENTER, jPanel);\r\n        springLayout.putConstraint(SpringLayout.NORTH, encryPath, 20, SpringLayout.NORTH, jPanel);\r\n\r\n        springLayout.putConstraint(SpringLayout.WEST, jta, 0, SpringLayout.WEST, encryPath);\r\n        springLayout.putConstraint(SpringLayout.NORTH, jta, 10, SpringLayout.SOUTH, encryPath);\r\n\r\n        springLayout.putConstraint(SpringLayout.WEST, outPath, 0, SpringLayout.WEST, encryPath);\r\n        springLayout.putConstraint(SpringLayout.NORTH, outPath, 50, SpringLayout.SOUTH, jta);\r\n\r\n        springLayout.putConstraint(SpringLayout.WEST, txtfield, 0, SpringLayout.WEST, jta);\r\n        springLayout.putConstraint(SpringLayout.NORTH, txtfield, 20, SpringLayout.SOUTH, outPath);\r\n\r\n        springLayout.putConstraint(SpringLayout.EAST, jButtonEncry, -50, SpringLayout.HORIZONTAL_CENTER, txtfield);\r\n        springLayout.putConstraint(SpringLayout.NORTH, jButtonEncry, 30, SpringLayout.SOUTH, txtfield);\r\n\r\n        springLayout.putConstraint(SpringLayout.EAST, jButtonDncry, 150, SpringLayout.WEST, jButtonEncry);\r\n        springLayout.putConstraint(SpringLayout.NORTH, jButtonDncry, 0, SpringLayout.NORTH, jButtonEncry);\r\n    }\r\n\r\n\r\n}\r\n","fileName":"GsEncryView.java","path":"D:\\Code\\TestCode\\newzhongchou\\everyday-tools\\src\\main\\java\\com\\lsc\\tools\\listener\\GsEncryView.java"},{"content":"package com.lsc.tools.listener;\r\n\r\nimport com.lsc.freemarker.core.FreeMarkerGenerator;\r\nimport com.lsc.freemarker.entity.MockResult;\r\nimport com.lsc.freemarker.facade.FreeMarkerCodeFacade;\r\nimport com.lsc.tools.gui.GUIInit;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: com.lsc.tools 代码生成\r\n * @date 2022/8/29 11:13\r\n */\r\n@Component\r\npublic class MockGeneratorListener implements ActionListener {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(MockGeneratorListener.class);\r\n\r\n    private FreeMarkerCodeFacade freeMarkerCodeFacade = new FreeMarkerCodeFacade();\r\n\r\n    private final JButton jButtonGenerator = new JButton(\"生成\");\r\n\r\n\r\n    @Override\r\n    public void actionPerformed(ActionEvent e) {\r\n\r\n        JPanel jPanel = mockCodePanel();\r\n\r\n        GUIInit.setContent(jPanel);\r\n\r\n    }\r\n\r\n    /**\r\n     * mock代码的面板\r\n     *\r\n     * @return\r\n     */\r\n    public JPanel mockCodePanel() {\r\n        // 待生成mock代码全路径\r\n        JLabel encryPath = new JLabel(\"待生成全类名:\");\r\n        JTextField txtfield = new JTextField();\r\n\r\n        // 生成后文件输出路径\r\n        JLabel outPath = new JLabel(\"生成文件路径:\");\r\n        JTextArea jta = new JTextArea(7, 100);\r\n\r\n        jta.setLineWrap(true);    //设置文本域中的文本为自动换行\r\n        jta.setForeground(Color.BLACK);    //设置组件的背景色\r\n        jta.setFont(new Font(\"楷体\", Font.BOLD, 12));    //修改字体样式\r\n\r\n        txtfield.setFont(new Font(\"楷体\", Font.BOLD, 12));\r\n        txtfield.setPreferredSize(new Dimension(800, 30));\r\n\r\n        SpringLayout springLayout = new SpringLayout();\r\n        JPanel jPanel = new JPanel(springLayout);\r\n        // 弹簧布局\r\n        springLayoutCenter(encryPath, txtfield, outPath, jta, jButtonGenerator, springLayout, jPanel);\r\n\r\n\r\n        jPanel.add(encryPath);\r\n        jPanel.add(txtfield);\r\n        jPanel.add(outPath);\r\n        jPanel.add(jta);\r\n        jPanel.add(jButtonGenerator);\r\n\r\n        // 绑定单击事件\r\n        jButtonGenerator.addActionListener(e1 -> {\r\n            MockResult<Boolean> result = freeMarkerCodeFacade.mockCodeGeneration(txtfield.getText());\r\n            jta.setText(String.valueOf(result.isSuccess()));\r\n        });\r\n\r\n\r\n        return jPanel;\r\n    }\r\n\r\n    // 弹簧布局\r\n    public void springLayoutCenter(JLabel encryPath, JTextField txtfield, JLabel outPath, JTextArea jta, JButton jButtonEncry, SpringLayout springLayout, JPanel jPanel) {\r\n        /**\r\n         * NORTH 上\r\n         * WEST 左\r\n         * HORIZONTAL_CENTER 中\r\n         * EAST 右\r\n         * SOUTH 下\r\n         * Horizontal Center 水平居中\r\n         * Vertical Center 垂直居中\r\n         */\r\n        Spring childWidth = Spring.sum(Spring.sum(Spring.width(encryPath), Spring.width(jta)), Spring.constant(20));\r\n        int offSetX = childWidth.getValue() / 2;\r\n\r\n        /**\r\n         * A对象的哪个边  ,A对象  ,间距多少 , B对象的哪个边    , B对象\r\n         */\r\n        springLayout.putConstraint(SpringLayout.WEST, encryPath, -offSetX, SpringLayout.HORIZONTAL_CENTER, jPanel);\r\n        springLayout.putConstraint(SpringLayout.NORTH, encryPath, 20, SpringLayout.NORTH, jPanel);\r\n\r\n        springLayout.putConstraint(SpringLayout.WEST, txtfield, 0, SpringLayout.WEST, encryPath);\r\n        springLayout.putConstraint(SpringLayout.NORTH, txtfield, 10, SpringLayout.SOUTH, encryPath);\r\n\r\n        springLayout.putConstraint(SpringLayout.WEST, outPath, 0, SpringLayout.WEST, encryPath);\r\n        springLayout.putConstraint(SpringLayout.NORTH, outPath, 50, SpringLayout.SOUTH, txtfield);\r\n\r\n        springLayout.putConstraint(SpringLayout.WEST, jta, 0, SpringLayout.WEST, txtfield);\r\n        springLayout.putConstraint(SpringLayout.NORTH, jta, 20, SpringLayout.SOUTH, outPath);\r\n\r\n        springLayout.putConstraint(SpringLayout.EAST, jButtonEncry, -50, SpringLayout.HORIZONTAL_CENTER, jta);\r\n        springLayout.putConstraint(SpringLayout.NORTH, jButtonEncry, 30, SpringLayout.SOUTH, jta);\r\n\r\n    }\r\n}\r\n","fileName":"MockGeneratorListener.java","path":"D:\\Code\\TestCode\\newzhongchou\\everyday-tools\\src\\main\\java\\com\\lsc\\tools\\listener\\MockGeneratorListener.java"},{"content":"package com.lsc.tools.service;\r\n\r\nimport com.lsc.freemarker.core.CustomClassLoader;\r\nimport com.lsc.freemarker.utils.ReflectionUtil;\r\n\r\nimport javax.swing.*;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: com.lsc.tools.service\r\n * @date 2022/11/4 19:04\r\n */\r\npublic class CodeToolServiceImpl {\r\n\r\n\r\n /*   public static String CreationJsonTxt(String classPath){\r\n        // 创建自定义的类加载器\r\n        CustomClassLoader loader = new CustomClassLoader();\r\n\r\n        // 使用自定义的类加载器加载TestHelloWorld类\r\n        Class classaa = loader.loadClass(classPath.getText());\r\n        String creationJsonTxt = ReflectionUtil.CreationJsonTxt(classaa);\r\n\r\n\r\n    }*/\r\n}\r\n","fileName":"CodeToolServiceImpl.java","path":"D:\\Code\\TestCode\\newzhongchou\\everyday-tools\\src\\main\\java\\com\\lsc\\tools\\service\\CodeToolServiceImpl.java"},{"content":"package com.lsc.tools.service;\r\n\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.List;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: com.lsc.tools.service\r\n * @date 2022/9/27 18:32\r\n */\r\n\r\npublic interface CompressionService {\r\n    /**\r\n     * 加密压缩\r\n     * @param paths 文件的路径list\r\n     * @return\r\n     */\r\n    String encryptedCompressed(List<String> paths,String outPath);\r\n\r\n    /**\r\n     * 解密解压\r\n     */\r\n    void decryptionDecompression(String path,String outPath);\r\n}\r\n","fileName":"CompressionService.java","path":"D:\\Code\\TestCode\\newzhongchou\\everyday-tools\\src\\main\\java\\com\\lsc\\tools\\service\\CompressionService.java"},{"content":"package com.lsc.tools.service.impl;\r\n\r\nimport com.alibaba.fastjson.JSON;\r\nimport com.alibaba.fastjson.TypeReference;\r\nimport com.lsc.common.Constant;\r\nimport com.lsc.common.FileUtils;\r\nimport com.lsc.common.encryptionutils.Base64Util;\r\nimport com.lsc.common.encryptionutils.PBEUtil;\r\nimport com.lsc.common.ziputils.Bzip2Utils;\r\nimport com.lsc.tools.bean.ClassBean;\r\nimport com.lsc.tools.controoler.CompressionUIThree;\r\nimport com.lsc.tools.service.CompressionService;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.io.File;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.List;\r\n\r\n/**\r\n * @author lisc\r\n * @Description: com.lsc.tools.service.impl\r\n * @date 2022/9/27 18:32\r\n */\r\n@Service\r\npublic class CompressionServiceImpl implements CompressionService {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(CompressionServiceImpl.class);\r\n    private static final String PASS_WROD = \"cchlqLZ!2cchlqLZ\";\r\n    private static final String SALT = \"7Ywycfpl\";\r\n    private static final SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHHmmss\");\r\n\r\n\r\n    @Override\r\n    public String encryptedCompressed(List<String> paths, String outPath) {\r\n        log.info(\"CompressionServiceImpl:encryptedCompressed paths:{}, outPath: {}\",paths,outPath);\r\n        ArrayList<ClassBean> beanArrayList = new ArrayList<>();\r\n\r\n        for (String path : paths) {\r\n            ClassBean bean = new ClassBean();\r\n            File file = new File(path);\r\n            if (!file.exists()) {\r\n                log.info(\"文件或文件夹不存在:{}\", path);\r\n                return null;\r\n            }\r\n            String returnString = FileUtils.readFileAllBytesReturnString(file.getPath());\r\n            bean.setFileName(file.getName());\r\n            bean.setPath(file.getPath());\r\n            bean.setContent(returnString);\r\n            beanArrayList.add(bean);\r\n        }\r\n        //    FileUtils.fileWriteIsExistsAppenTherMkdir(TXT_PATH_ONE + sourceFile, encode);\r\n        //System.out.println(JSON.toJSONString(beanArrayList));\r\n        // 压缩\r\n        byte[] compress = Bzip2Utils.compress(JSON.toJSONString(beanArrayList).getBytes());\r\n        // 加密\r\n        byte[] encrypt = PBEUtil.encrypt(compress, PASS_WROD, SALT.getBytes());\r\n        // 转为base64\r\n        String encode = Base64Util.encryptBASE64(encrypt);\r\n        String format = dateFormat.format(new Date());\r\n        // 输出密文\r\n        FileUtils.fileWriteAdbMkdir(outPath + format + Constant.TXT, encode);\r\n\r\n        log.info(\"CompressionUI:encryptedCompressed:end\");\r\n        return format + Constant.TXT;\r\n\r\n    }\r\n\r\n    /**\r\n     * 解密解压\r\n     */\r\n    @Override\r\n    public void decryptionDecompression(String path, String outPath) {\r\n        File file = new File(path);\r\n        // 读取指定路径下的文件\r\n        byte[] bytes = FileUtils.readFileAllBytesReturnBytes(file.getPath());\r\n        // base64解密\r\n        byte[] decode = Base64Util.decryBASE64(new String(bytes));\r\n        // 解密\r\n        byte[] decryptZip = PBEUtil.decrypt(decode, PASS_WROD, SALT.getBytes());\r\n        // 解压\r\n        byte[] uncompress = Bzip2Utils.uncompress(decryptZip);\r\n        // 明文\r\n        String content = new String(uncompress);\r\n\r\n        List<ClassBean> classBeans = JSON.parseObject(content, new TypeReference<List<ClassBean>>() {\r\n        });\r\n        classBeans.forEach(bean -> {\r\n            FileUtils.fileWriteAdbMkdir(outPath + bean.getFileName(), bean.getContent());\r\n        });\r\n        log.info(\"CompressionUI:decryptionDecompression:end\");\r\n    }\r\n}\r\n","fileName":"CompressionServiceImpl.java","path":"D:\\Code\\TestCode\\newzhongchou\\everyday-tools\\src\\main\\java\\com\\lsc\\tools\\service\\impl\\CompressionServiceImpl.java"},{"content":"package com.lsc.tools.utils;\r\n\r\nimport com.alibaba.fastjson.TypeReference;\r\nimport com.lsc.tools.bean.CommonUtil;\r\nimport org.apache.commons.io.FileUtils;\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\n\r\n/**\r\n * @description:test工具\r\n * @author:\r\n * @date: 2021/11/18 10:54\r\n */\r\npublic class JunitBusiUtil {\r\n    \r\n    /**\r\n     * 获取json文件中json串的实例\r\n     *\r\n     * @param jsonPath\r\n     * @param type\r\n     * @param <T>\r\n     * @return\r\n     * @throws IOException\r\n     */\r\n    public static <T> T parseObject(String jsonPath, TypeReference<T> type) throws IOException {\r\n        return CommonUtil.parseObject(FileUtils.readFileToString(new File((JunitBusiUtil.class.getResource(jsonPath)).getPath()), \"utf-8\"), type);\r\n    }\r\n    \r\n    public static <T> T parseObject(String jsonPath, Class<T> clazz) throws IOException {\r\n        return CommonUtil.parseObject(FileUtils.readFileToString(new File((JunitBusiUtil.class.getResource(jsonPath)).getPath()), \"utf-8\"), clazz);\r\n    }\r\n    \r\n}\r\n","fileName":"JunitBusiUtil.java","path":"D:\\Code\\TestCode\\newzhongchou\\everyday-tools\\src\\main\\java\\com\\lsc\\tools\\utils\\JunitBusiUtil.java"}]